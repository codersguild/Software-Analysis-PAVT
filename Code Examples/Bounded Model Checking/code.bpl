// generated by SMACK version 2.7.1 for corral
// via /usr/local/bin/smack --no-verify --integer-encoding=bit-vector --float example.c -bpl example.bpl

// Basic types
type i1 = int;
type i5 = int;
type i6 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i33 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type i160 = int;
type i256 = int;
type ref = i64;
type bvhalf = float11e5;
type bvfloat = float24e8;
type bvdouble = float53e11;
type bvlongdouble = float65e15;

// Basic constants
const $0: bv32;
axiom ($0 == 0bv32);
const $1: bv32;
axiom ($1 == 1bv32);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
// Memory model constants
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;

// Memory maps (1 regions)
var $M.0: [ref] bv64;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 25800));
axiom ($EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32768)));
axiom ($MALLOC_TOP == 9223372036854775807);
function {:inline} $isExternal(p: ref) returns (bool) { $slt.ref.bool(p, $EXTERNS_BOTTOM) }

// SMT bit-vector/integer conversion
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2nat"} $bv2uint.64(i: bv64) returns (i64);
function {:inline} $bv2int.64(i: bv64) returns (i64) { (if $slt.bv64.bool(i, 0bv64) then $sub.i64($bv2uint.64(i), 18446744073709551616) else $bv2uint.64(i)) }

// Integer arithmetic operations
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $add.i5(i1: i5, i2: i5) returns (i5) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:inline} $add.i6(i1: i6, i2: i6) returns (i6) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $add.i33(i1: i33, i2: i33) returns (i33) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $add.i160(i1: i160, i2: i160) returns (i160) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:inline} $add.i256(i1: i256, i2: i256) returns (i256) { (i1 + i2) }
function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $sub.i5(i1: i5, i2: i5) returns (i5) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:inline} $sub.i6(i1: i6, i2: i6) returns (i6) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $sub.i33(i1: i33, i2: i33) returns (i33) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $sub.i160(i1: i160, i2: i160) returns (i160) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:inline} $sub.i256(i1: i256, i2: i256) returns (i256) { (i1 - i2) }
function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:inline} $mul.i5(i1: i5, i2: i5) returns (i5) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:inline} $mul.i6(i1: i6, i2: i6) returns (i6) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:inline} $mul.i33(i1: i33, i2: i33) returns (i33) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:inline} $mul.i160(i1: i160, i2: i160) returns (i160) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:inline} $mul.i256(i1: i256, i2: i256) returns (i256) { (i1 * i2) }
function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvidiv"} $idiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvidiv"} $idiv.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvidiv"} $idiv.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvidiv"} $idiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvidiv"} $idiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvidiv"} $idiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvidiv"} $idiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvidiv"} $idiv.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvidiv"} $idiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvidiv"} $idiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvidiv"} $idiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvidiv"} $idiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvidiv"} $idiv.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvidiv"} $idiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvidiv"} $idiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvidiv"} $idiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvidiv"} $idiv.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvidiv"} $idiv.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsdiv"} $sdiv.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvudiv"} $udiv.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsmod"} $smod.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvsrem"} $srem.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvurem"} $urem.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvshl"} $shl.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvlshr"} $lshr.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvashr"} $ashr.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvand"} $and.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvor"} $or.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvxor"} $xor.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) returns (bv1);
function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) returns (bv5);
function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) returns (bv6);
function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) returns (bv8);
function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) returns (bv16);
function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) returns (bv24);
function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) returns (bv32);
function {:bvbuiltin "bvnand"} $nand.bv33(i1: bv33, i2: bv33) returns (bv33);
function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) returns (bv40);
function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) returns (bv48);
function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) returns (bv56);
function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) returns (bv64);
function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) returns (bv80);
function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) returns (bv88);
function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) returns (bv96);
function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) returns (bv128);
function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) returns (bv160);
function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) returns (bv256);
function {:bvbuiltin "bvnot"} $not.bv1(i: bv1) returns (bv1);
function {:bvbuiltin "bvnot"} $not.bv5(i: bv5) returns (bv5);
function {:bvbuiltin "bvnot"} $not.bv6(i: bv6) returns (bv6);
function {:bvbuiltin "bvnot"} $not.bv8(i: bv8) returns (bv8);
function {:bvbuiltin "bvnot"} $not.bv16(i: bv16) returns (bv16);
function {:bvbuiltin "bvnot"} $not.bv24(i: bv24) returns (bv24);
function {:bvbuiltin "bvnot"} $not.bv32(i: bv32) returns (bv32);
function {:bvbuiltin "bvnot"} $not.bv33(i: bv33) returns (bv33);
function {:bvbuiltin "bvnot"} $not.bv40(i: bv40) returns (bv40);
function {:bvbuiltin "bvnot"} $not.bv48(i: bv48) returns (bv48);
function {:bvbuiltin "bvnot"} $not.bv56(i: bv56) returns (bv56);
function {:bvbuiltin "bvnot"} $not.bv64(i: bv64) returns (bv64);
function {:bvbuiltin "bvnot"} $not.bv80(i: bv80) returns (bv80);
function {:bvbuiltin "bvnot"} $not.bv88(i: bv88) returns (bv88);
function {:bvbuiltin "bvnot"} $not.bv96(i: bv96) returns (bv96);
function {:bvbuiltin "bvnot"} $not.bv128(i: bv128) returns (bv128);
function {:bvbuiltin "bvnot"} $not.bv160(i: bv160) returns (bv160);
function {:bvbuiltin "bvnot"} $not.bv256(i: bv256) returns (bv256);
function {:inline} $smin.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $slt.bv1.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv5(i1: bv5, i2: bv5) returns (bv5) { (if $slt.bv5.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv6(i1: bv6, i2: bv6) returns (bv6) { (if $slt.bv6.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv8(i1: bv8, i2: bv8) returns (bv8) { (if $slt.bv8.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv16(i1: bv16, i2: bv16) returns (bv16) { (if $slt.bv16.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv24(i1: bv24, i2: bv24) returns (bv24) { (if $slt.bv24.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv32(i1: bv32, i2: bv32) returns (bv32) { (if $slt.bv32.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv33(i1: bv33, i2: bv33) returns (bv33) { (if $slt.bv33.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv40(i1: bv40, i2: bv40) returns (bv40) { (if $slt.bv40.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv48(i1: bv48, i2: bv48) returns (bv48) { (if $slt.bv48.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv56(i1: bv56, i2: bv56) returns (bv56) { (if $slt.bv56.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv64(i1: bv64, i2: bv64) returns (bv64) { (if $slt.bv64.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv80(i1: bv80, i2: bv80) returns (bv80) { (if $slt.bv80.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv88(i1: bv88, i2: bv88) returns (bv88) { (if $slt.bv88.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv96(i1: bv96, i2: bv96) returns (bv96) { (if $slt.bv96.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv128(i1: bv128, i2: bv128) returns (bv128) { (if $slt.bv128.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv160(i1: bv160, i2: bv160) returns (bv160) { (if $slt.bv160.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.bv256(i1: bv256, i2: bv256) returns (bv256) { (if $slt.bv256.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $sgt.bv1.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv5(i1: bv5, i2: bv5) returns (bv5) { (if $sgt.bv5.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv6(i1: bv6, i2: bv6) returns (bv6) { (if $sgt.bv6.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv8(i1: bv8, i2: bv8) returns (bv8) { (if $sgt.bv8.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv16(i1: bv16, i2: bv16) returns (bv16) { (if $sgt.bv16.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv24(i1: bv24, i2: bv24) returns (bv24) { (if $sgt.bv24.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv32(i1: bv32, i2: bv32) returns (bv32) { (if $sgt.bv32.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv33(i1: bv33, i2: bv33) returns (bv33) { (if $sgt.bv33.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv40(i1: bv40, i2: bv40) returns (bv40) { (if $sgt.bv40.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv48(i1: bv48, i2: bv48) returns (bv48) { (if $sgt.bv48.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv56(i1: bv56, i2: bv56) returns (bv56) { (if $sgt.bv56.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv64(i1: bv64, i2: bv64) returns (bv64) { (if $sgt.bv64.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv80(i1: bv80, i2: bv80) returns (bv80) { (if $sgt.bv80.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv88(i1: bv88, i2: bv88) returns (bv88) { (if $sgt.bv88.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv96(i1: bv96, i2: bv96) returns (bv96) { (if $sgt.bv96.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv128(i1: bv128, i2: bv128) returns (bv128) { (if $sgt.bv128.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv160(i1: bv160, i2: bv160) returns (bv160) { (if $sgt.bv160.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.bv256(i1: bv256, i2: bv256) returns (bv256) { (if $sgt.bv256.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ult.bv1.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv5(i1: bv5, i2: bv5) returns (bv5) { (if $ult.bv5.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv6(i1: bv6, i2: bv6) returns (bv6) { (if $ult.bv6.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv8(i1: bv8, i2: bv8) returns (bv8) { (if $ult.bv8.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv16(i1: bv16, i2: bv16) returns (bv16) { (if $ult.bv16.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv24(i1: bv24, i2: bv24) returns (bv24) { (if $ult.bv24.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv32(i1: bv32, i2: bv32) returns (bv32) { (if $ult.bv32.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv33(i1: bv33, i2: bv33) returns (bv33) { (if $ult.bv33.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv40(i1: bv40, i2: bv40) returns (bv40) { (if $ult.bv40.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv48(i1: bv48, i2: bv48) returns (bv48) { (if $ult.bv48.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv56(i1: bv56, i2: bv56) returns (bv56) { (if $ult.bv56.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv64(i1: bv64, i2: bv64) returns (bv64) { (if $ult.bv64.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv80(i1: bv80, i2: bv80) returns (bv80) { (if $ult.bv80.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv88(i1: bv88, i2: bv88) returns (bv88) { (if $ult.bv88.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv96(i1: bv96, i2: bv96) returns (bv96) { (if $ult.bv96.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv128(i1: bv128, i2: bv128) returns (bv128) { (if $ult.bv128.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv160(i1: bv160, i2: bv160) returns (bv160) { (if $ult.bv160.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.bv256(i1: bv256, i2: bv256) returns (bv256) { (if $ult.bv256.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ugt.bv1.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv5(i1: bv5, i2: bv5) returns (bv5) { (if $ugt.bv5.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv6(i1: bv6, i2: bv6) returns (bv6) { (if $ugt.bv6.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv8(i1: bv8, i2: bv8) returns (bv8) { (if $ugt.bv8.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv16(i1: bv16, i2: bv16) returns (bv16) { (if $ugt.bv16.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv24(i1: bv24, i2: bv24) returns (bv24) { (if $ugt.bv24.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv32(i1: bv32, i2: bv32) returns (bv32) { (if $ugt.bv32.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv33(i1: bv33, i2: bv33) returns (bv33) { (if $ugt.bv33.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv40(i1: bv40, i2: bv40) returns (bv40) { (if $ugt.bv40.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv48(i1: bv48, i2: bv48) returns (bv48) { (if $ugt.bv48.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv56(i1: bv56, i2: bv56) returns (bv56) { (if $ugt.bv56.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv64(i1: bv64, i2: bv64) returns (bv64) { (if $ugt.bv64.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv80(i1: bv80, i2: bv80) returns (bv80) { (if $ugt.bv80.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv88(i1: bv88, i2: bv88) returns (bv88) { (if $ugt.bv88.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv96(i1: bv96, i2: bv96) returns (bv96) { (if $ugt.bv96.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv128(i1: bv128, i2: bv128) returns (bv128) { (if $ugt.bv128.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv160(i1: bv160, i2: bv160) returns (bv160) { (if $ugt.bv160.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.bv256(i1: bv256, i2: bv256) returns (bv256) { (if $ugt.bv256.bool(i1, i2) then i1 else i2) }
// Integer predicates
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) { (if $ule.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ule.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i5(i1: i5, i2: i5) returns (i1) { (if $ule.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $ule.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i6(i1: i6, i2: i6) returns (i1) { (if $ule.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $ule.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) { (if $ule.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ule.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) { (if $ule.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ule.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) { (if $ule.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ule.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { (if $ule.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ule.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i33(i1: i33, i2: i33) returns (i1) { (if $ule.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $ule.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $ule.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) { (if $ule.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ule.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) { (if $ule.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ule.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) { (if $ule.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ule.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { (if $ule.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ule.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) { (if $ule.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ule.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) { (if $ule.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ule.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) { (if $ule.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ule.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) { (if $ule.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ule.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i160(i1: i160, i2: i160) returns (i1) { (if $ule.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $ule.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ule.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i256(i1: i256, i2: i256) returns (i1) { (if $ule.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $ule.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ult.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $ult.i5(i1: i5, i2: i5) returns (i1) { (if $ult.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $ult.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $ult.i6(i1: i6, i2: i6) returns (i1) { (if $ult.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $ult.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) { (if $ult.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ult.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) { (if $ult.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ult.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) { (if $ult.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ult.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { (if $ult.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ult.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 < i2) }
function {:inline} $ult.i33(i1: i33, i2: i33) returns (i1) { (if $ult.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $ult.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $ult.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) { (if $ult.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ult.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) { (if $ult.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ult.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) { (if $ult.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ult.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) { (if $ult.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ult.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) { (if $ult.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ult.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) { (if $ult.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ult.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) { (if $ult.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ult.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) { (if $ult.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ult.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $ult.i160(i1: i160, i2: i160) returns (i1) { (if $ult.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $ult.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ult.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $ult.i256(i1: i256, i2: i256) returns (i1) { (if $ult.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $ult.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) { (if $uge.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $uge.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i5(i1: i5, i2: i5) returns (i1) { (if $uge.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $uge.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i6(i1: i6, i2: i6) returns (i1) { (if $uge.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $uge.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) { (if $uge.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $uge.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) { (if $uge.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $uge.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) { (if $uge.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $uge.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { (if $uge.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $uge.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i33(i1: i33, i2: i33) returns (i1) { (if $uge.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $uge.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $uge.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) { (if $uge.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $uge.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) { (if $uge.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $uge.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) { (if $uge.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $uge.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) { (if $uge.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $uge.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) { (if $uge.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $uge.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) { (if $uge.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $uge.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) { (if $uge.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $uge.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) { (if $uge.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $uge.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i160(i1: i160, i2: i160) returns (i1) { (if $uge.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $uge.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $uge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i256(i1: i256, i2: i256) returns (i1) { (if $uge.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $uge.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $ugt.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i5(i1: i5, i2: i5) returns (i1) { (if $ugt.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $ugt.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i6(i1: i6, i2: i6) returns (i1) { (if $ugt.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $ugt.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) { (if $ugt.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $ugt.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) { (if $ugt.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $ugt.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) { (if $ugt.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $ugt.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { (if $ugt.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $ugt.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i33(i1: i33, i2: i33) returns (i1) { (if $ugt.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $ugt.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $ugt.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) { (if $ugt.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $ugt.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) { (if $ugt.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $ugt.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) { (if $ugt.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $ugt.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) { (if $ugt.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $ugt.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) { (if $ugt.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $ugt.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) { (if $ugt.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $ugt.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) { (if $ugt.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $ugt.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) { (if $ugt.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $ugt.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i160(i1: i160, i2: i160) returns (i1) { (if $ugt.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $ugt.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ugt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i256(i1: i256, i2: i256) returns (i1) { (if $ugt.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $ugt.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) { (if $sle.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sle.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i5(i1: i5, i2: i5) returns (i1) { (if $sle.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $sle.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i6(i1: i6, i2: i6) returns (i1) { (if $sle.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $sle.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) { (if $sle.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sle.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) { (if $sle.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sle.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) { (if $sle.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sle.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { (if $sle.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sle.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i33(i1: i33, i2: i33) returns (i1) { (if $sle.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $sle.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $sle.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) { (if $sle.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sle.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) { (if $sle.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sle.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) { (if $sle.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sle.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) { (if $sle.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sle.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) { (if $sle.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sle.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) { (if $sle.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sle.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) { (if $sle.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sle.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) { (if $sle.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sle.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i160(i1: i160, i2: i160) returns (i1) { (if $sle.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $sle.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sle.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i256(i1: i256, i2: i256) returns (i1) { (if $sle.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $sle.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $slt.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $slt.i5(i1: i5, i2: i5) returns (i1) { (if $slt.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $slt.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $slt.i6(i1: i6, i2: i6) returns (i1) { (if $slt.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $slt.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) { (if $slt.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $slt.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) { (if $slt.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $slt.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) { (if $slt.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $slt.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { (if $slt.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $slt.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 < i2) }
function {:inline} $slt.i33(i1: i33, i2: i33) returns (i1) { (if $slt.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $slt.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $slt.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) { (if $slt.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $slt.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) { (if $slt.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $slt.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) { (if $slt.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $slt.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) { (if $slt.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $slt.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) { (if $slt.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $slt.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) { (if $slt.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $slt.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) { (if $slt.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $slt.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) { (if $slt.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $slt.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $slt.i160(i1: i160, i2: i160) returns (i1) { (if $slt.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $slt.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $slt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $slt.i256(i1: i256, i2: i256) returns (i1) { (if $slt.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $slt.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) { (if $sge.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sge.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i5(i1: i5, i2: i5) returns (i1) { (if $sge.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $sge.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i6(i1: i6, i2: i6) returns (i1) { (if $sge.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $sge.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) { (if $sge.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sge.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) { (if $sge.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sge.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) { (if $sge.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sge.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { (if $sge.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sge.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i33(i1: i33, i2: i33) returns (i1) { (if $sge.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $sge.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $sge.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) { (if $sge.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sge.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) { (if $sge.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sge.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) { (if $sge.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sge.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) { (if $sge.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sge.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) { (if $sge.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sge.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) { (if $sge.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sge.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) { (if $sge.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sge.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) { (if $sge.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sge.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i160(i1: i160, i2: i160) returns (i1) { (if $sge.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $sge.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i256(i1: i256, i2: i256) returns (i1) { (if $sge.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $sge.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) returns (bool);
function {:inline} $sgt.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i5(i1: i5, i2: i5) returns (i1) { (if $sgt.i5.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) returns (bool);
function {:inline} $sgt.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i6(i1: i6, i2: i6) returns (i1) { (if $sgt.i6.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) returns (bool);
function {:inline} $sgt.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) { (if $sgt.i8.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) returns (bool);
function {:inline} $sgt.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) { (if $sgt.i16.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) returns (bool);
function {:inline} $sgt.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) { (if $sgt.i24.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) returns (bool);
function {:inline} $sgt.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { (if $sgt.i32.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) returns (bool);
function {:inline} $sgt.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i33(i1: i33, i2: i33) returns (i1) { (if $sgt.i33.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv33.bool(i1: bv33, i2: bv33) returns (bool);
function {:inline} $sgt.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $sgt.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) { (if $sgt.i40.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) returns (bool);
function {:inline} $sgt.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) { (if $sgt.i48.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) returns (bool);
function {:inline} $sgt.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) { (if $sgt.i56.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) returns (bool);
function {:inline} $sgt.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) { (if $sgt.i64.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) returns (bool);
function {:inline} $sgt.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) { (if $sgt.i80.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) returns (bool);
function {:inline} $sgt.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) { (if $sgt.i88.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) returns (bool);
function {:inline} $sgt.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) { (if $sgt.i96.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) returns (bool);
function {:inline} $sgt.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) { (if $sgt.i128.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) returns (bool);
function {:inline} $sgt.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i160(i1: i160, i2: i160) returns (i1) { (if $sgt.i160.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) returns (bool);
function {:inline} $sgt.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $sgt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i256(i1: i256, i2: i256) returns (i1) { (if $sgt.i256.bool(i1, i2) then 1 else 0) }
function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) returns (bool);
function {:inline} $sgt.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 == i2) }
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) { (if $eq.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 == i2) }
function {:inline} $eq.i5(i1: i5, i2: i5) returns (i1) { (if $eq.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 == i2) }
function {:inline} $eq.i6(i1: i6, i2: i6) returns (i1) { (if $eq.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 == i2) }
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) { (if $eq.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 == i2) }
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) { (if $eq.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 == i2) }
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) { (if $eq.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 == i2) }
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { (if $eq.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 == i2) }
function {:inline} $eq.i33(i1: i33, i2: i33) returns (i1) { (if $eq.i33.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv33.bool(i1: bv33, i2: bv33) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $eq.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 == i2) }
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) { (if $eq.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 == i2) }
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) { (if $eq.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 == i2) }
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) { (if $eq.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 == i2) }
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) { (if $eq.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 == i2) }
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) { (if $eq.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 == i2) }
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) { (if $eq.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 == i2) }
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) { (if $eq.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 == i2) }
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) { (if $eq.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 == i2) }
function {:inline} $eq.i160(i1: i160, i2: i160) returns (i1) { (if $eq.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $eq.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 == i2) }
function {:inline} $eq.i256(i1: i256, i2: i256) returns (i1) { (if $eq.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) returns (bool) { (i1 == i2) }
function {:inline} $eq.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 != i2) }
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) { (if $ne.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv1(i1: bv1, i2: bv1) returns (bv1) { (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 != i2) }
function {:inline} $ne.i5(i1: i5, i2: i5) returns (i1) { (if $ne.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv5(i1: bv5, i2: bv5) returns (bv1) { (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 != i2) }
function {:inline} $ne.i6(i1: i6, i2: i6) returns (i1) { (if $ne.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv6(i1: bv6, i2: bv6) returns (bv1) { (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 != i2) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { (if $ne.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv8(i1: bv8, i2: bv8) returns (bv1) { (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 != i2) }
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) { (if $ne.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv16(i1: bv16, i2: bv16) returns (bv1) { (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 != i2) }
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) { (if $ne.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv24(i1: bv24, i2: bv24) returns (bv1) { (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 != i2) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { (if $ne.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv32(i1: bv32, i2: bv32) returns (bv1) { (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 != i2) }
function {:inline} $ne.i33(i1: i33, i2: i33) returns (i1) { (if $ne.i33.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv33.bool(i1: bv33, i2: bv33) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv33(i1: bv33, i2: bv33) returns (bv1) { (if $ne.bv33.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 != i2) }
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) { (if $ne.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv40(i1: bv40, i2: bv40) returns (bv1) { (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 != i2) }
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) { (if $ne.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv48(i1: bv48, i2: bv48) returns (bv1) { (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 != i2) }
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) { (if $ne.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv56(i1: bv56, i2: bv56) returns (bv1) { (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 != i2) }
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) { (if $ne.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv64(i1: bv64, i2: bv64) returns (bv1) { (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 != i2) }
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) { (if $ne.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv80(i1: bv80, i2: bv80) returns (bv1) { (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 != i2) }
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) { (if $ne.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv88(i1: bv88, i2: bv88) returns (bv1) { (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 != i2) }
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) { (if $ne.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv96(i1: bv96, i2: bv96) returns (bv1) { (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 != i2) }
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) { (if $ne.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv128(i1: bv128, i2: bv128) returns (bv1) { (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 != i2) }
function {:inline} $ne.i160(i1: i160, i2: i160) returns (i1) { (if $ne.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv160(i1: bv160, i2: bv160) returns (bv1) { (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1) }
function {:inline} $ne.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 != i2) }
function {:inline} $ne.i256(i1: i256, i2: i256) returns (i1) { (if $ne.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) returns (bool) { (i1 != i2) }
function {:inline} $ne.bv256(i1: bv256, i2: bv256) returns (bv1) { (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1) }
// Integer load/store operations
function {:inline} $load.bv1(M: [ref] bv1, p: ref) returns (bv1) { M[p] }
function {:inline} $store.bv1(M: [ref] bv1, p: ref, i: bv1) returns ([ref] bv1) { M[p := i] }
function {:inline} $load.bytes.bv1(M: [ref] bv8, p: ref) returns (bv1) { $trunc.bv8.bv1(M[p]) }
function {:inline} $store.bytes.bv1(M: [ref] bv8, p: ref, i: bv1) returns ([ref] bv8) { M[p := $zext.bv1.bv8(i)] }
function {:inline} $load.bv5(M: [ref] bv5, p: ref) returns (bv5) { M[p] }
function {:inline} $store.bv5(M: [ref] bv5, p: ref, i: bv5) returns ([ref] bv5) { M[p := i] }
function {:inline} $load.bytes.bv5(M: [ref] bv8, p: ref) returns (bv5) { $trunc.bv8.bv5(M[p]) }
function {:inline} $store.bytes.bv5(M: [ref] bv8, p: ref, i: bv5) returns ([ref] bv8) { M[p := $zext.bv5.bv8(i)] }
function {:inline} $load.bv6(M: [ref] bv6, p: ref) returns (bv6) { M[p] }
function {:inline} $store.bv6(M: [ref] bv6, p: ref, i: bv6) returns ([ref] bv6) { M[p := i] }
function {:inline} $load.bytes.bv6(M: [ref] bv8, p: ref) returns (bv6) { $trunc.bv8.bv6(M[p]) }
function {:inline} $store.bytes.bv6(M: [ref] bv8, p: ref, i: bv6) returns ([ref] bv8) { M[p := $zext.bv6.bv8(i)] }
function {:inline} $load.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.bv8(M: [ref] bv8, p: ref, i: bv8) returns ([ref] bv8) { M[p := i] }
function {:inline} $load.bytes.bv8(M: [ref] bv8, p: ref) returns (bv8) { M[p] }
function {:inline} $store.bytes.bv8(M: [ref] bv8, p: ref, i: bv8) returns ([ref] bv8) { M[p := i] }
function {:inline} $load.bv16(M: [ref] bv16, p: ref) returns (bv16) { M[p] }
function {:inline} $store.bv16(M: [ref] bv16, p: ref, i: bv16) returns ([ref] bv16) { M[p := i] }
function {:inline} $load.bytes.bv16(M: [ref] bv8, p: ref) returns (bv16) { (M[$add.ref(p, 1)]++M[p]) }
function {:inline} $store.bytes.bv16(M: [ref] bv8, p: ref, i: bv16) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]] }
function {:inline} $load.bv24(M: [ref] bv24, p: ref) returns (bv24) { M[p] }
function {:inline} $store.bv24(M: [ref] bv24, p: ref, i: bv24) returns ([ref] bv24) { M[p := i] }
function {:inline} $load.bytes.bv24(M: [ref] bv8, p: ref) returns (bv24) { (M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p])) }
function {:inline} $store.bytes.bv24(M: [ref] bv8, p: ref, i: bv24) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]] }
function {:inline} $load.bv32(M: [ref] bv32, p: ref) returns (bv32) { M[p] }
function {:inline} $store.bv32(M: [ref] bv32, p: ref, i: bv32) returns ([ref] bv32) { M[p := i] }
function {:inline} $load.bytes.bv32(M: [ref] bv8, p: ref) returns (bv32) { (M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))) }
function {:inline} $store.bytes.bv32(M: [ref] bv8, p: ref, i: bv32) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]] }
function {:inline} $load.bv33(M: [ref] bv33, p: ref) returns (bv33) { M[p] }
function {:inline} $store.bv33(M: [ref] bv33, p: ref, i: bv33) returns ([ref] bv33) { M[p := i] }
function {:inline} $load.bytes.bv33(M: [ref] bv8, p: ref) returns (bv33) { (M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))) }
function {:inline} $store.bytes.bv33(M: [ref] bv8, p: ref, i: bv33) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]] }
function {:inline} $load.bv40(M: [ref] bv40, p: ref) returns (bv40) { M[p] }
function {:inline} $store.bv40(M: [ref] bv40, p: ref, i: bv40) returns ([ref] bv40) { M[p := i] }
function {:inline} $load.bytes.bv40(M: [ref] bv8, p: ref) returns (bv40) { (M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p])))) }
function {:inline} $store.bytes.bv40(M: [ref] bv8, p: ref, i: bv40) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]] }
function {:inline} $load.bv48(M: [ref] bv48, p: ref) returns (bv48) { M[p] }
function {:inline} $store.bv48(M: [ref] bv48, p: ref, i: bv48) returns ([ref] bv48) { M[p := i] }
function {:inline} $load.bytes.bv48(M: [ref] bv8, p: ref) returns (bv48) { (M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))) }
function {:inline} $store.bytes.bv48(M: [ref] bv8, p: ref, i: bv48) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]] }
function {:inline} $load.bv56(M: [ref] bv56, p: ref) returns (bv56) { M[p] }
function {:inline} $store.bv56(M: [ref] bv56, p: ref, i: bv56) returns ([ref] bv56) { M[p := i] }
function {:inline} $load.bytes.bv56(M: [ref] bv8, p: ref) returns (bv56) { (M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p])))))) }
function {:inline} $store.bytes.bv56(M: [ref] bv8, p: ref, i: bv56) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]] }
function {:inline} $load.bv64(M: [ref] bv64, p: ref) returns (bv64) { M[p] }
function {:inline} $store.bv64(M: [ref] bv64, p: ref, i: bv64) returns ([ref] bv64) { M[p := i] }
function {:inline} $load.bytes.bv64(M: [ref] bv8, p: ref) returns (bv64) { (M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))) }
function {:inline} $store.bytes.bv64(M: [ref] bv8, p: ref, i: bv64) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]] }
function {:inline} $load.bv80(M: [ref] bv80, p: ref) returns (bv80) { M[p] }
function {:inline} $store.bv80(M: [ref] bv80, p: ref, i: bv80) returns ([ref] bv80) { M[p := i] }
function {:inline} $load.bytes.bv80(M: [ref] bv8, p: ref) returns (bv80) { (M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))) }
function {:inline} $store.bytes.bv80(M: [ref] bv8, p: ref, i: bv80) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]] }
function {:inline} $load.bv88(M: [ref] bv88, p: ref) returns (bv88) { M[p] }
function {:inline} $store.bv88(M: [ref] bv88, p: ref, i: bv88) returns ([ref] bv88) { M[p := i] }
function {:inline} $load.bytes.bv88(M: [ref] bv8, p: ref) returns (bv88) { (M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p])))))))))) }
function {:inline} $store.bytes.bv88(M: [ref] bv8, p: ref, i: bv88) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]] }
function {:inline} $load.bv96(M: [ref] bv96, p: ref) returns (bv96) { M[p] }
function {:inline} $store.bv96(M: [ref] bv96, p: ref, i: bv96) returns ([ref] bv96) { M[p := i] }
function {:inline} $load.bytes.bv96(M: [ref] bv8, p: ref) returns (bv96) { (M[$add.ref(p, 11)]++(M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))))) }
function {:inline} $store.bytes.bv96(M: [ref] bv8, p: ref, i: bv96) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]][$add.ref(p, 11) := i[96:88]] }
function {:inline} $load.bv128(M: [ref] bv128, p: ref) returns (bv128) { M[p] }
function {:inline} $store.bv128(M: [ref] bv128, p: ref, i: bv128) returns ([ref] bv128) { M[p := i] }
function {:inline} $load.bytes.bv128(M: [ref] bv8, p: ref) returns (bv128) { (M[$add.ref(p, 15)]++(M[$add.ref(p, 14)]++(M[$add.ref(p, 13)]++(M[$add.ref(p, 12)]++(M[$add.ref(p, 11)]++(M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))))))))) }
function {:inline} $store.bytes.bv128(M: [ref] bv8, p: ref, i: bv128) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]][$add.ref(p, 11) := i[96:88]][$add.ref(p, 12) := i[104:96]][$add.ref(p, 13) := i[112:104]][$add.ref(p, 14) := i[120:112]][$add.ref(p, 15) := i[128:120]] }
function {:inline} $load.bv160(M: [ref] bv160, p: ref) returns (bv160) { M[p] }
function {:inline} $store.bv160(M: [ref] bv160, p: ref, i: bv160) returns ([ref] bv160) { M[p := i] }
function {:inline} $load.bytes.bv160(M: [ref] bv8, p: ref) returns (bv160) { (M[$add.ref(p, 19)]++(M[$add.ref(p, 18)]++(M[$add.ref(p, 17)]++(M[$add.ref(p, 16)]++(M[$add.ref(p, 15)]++(M[$add.ref(p, 14)]++(M[$add.ref(p, 13)]++(M[$add.ref(p, 12)]++(M[$add.ref(p, 11)]++(M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))))))))))))) }
function {:inline} $store.bytes.bv160(M: [ref] bv8, p: ref, i: bv160) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]][$add.ref(p, 11) := i[96:88]][$add.ref(p, 12) := i[104:96]][$add.ref(p, 13) := i[112:104]][$add.ref(p, 14) := i[120:112]][$add.ref(p, 15) := i[128:120]][$add.ref(p, 16) := i[136:128]][$add.ref(p, 17) := i[144:136]][$add.ref(p, 18) := i[152:144]][$add.ref(p, 19) := i[160:152]] }
function {:inline} $load.bv256(M: [ref] bv256, p: ref) returns (bv256) { M[p] }
function {:inline} $store.bv256(M: [ref] bv256, p: ref, i: bv256) returns ([ref] bv256) { M[p := i] }
function {:inline} $load.bytes.bv256(M: [ref] bv8, p: ref) returns (bv256) { (M[$add.ref(p, 31)]++(M[$add.ref(p, 30)]++(M[$add.ref(p, 29)]++(M[$add.ref(p, 28)]++(M[$add.ref(p, 27)]++(M[$add.ref(p, 26)]++(M[$add.ref(p, 25)]++(M[$add.ref(p, 24)]++(M[$add.ref(p, 23)]++(M[$add.ref(p, 22)]++(M[$add.ref(p, 21)]++(M[$add.ref(p, 20)]++(M[$add.ref(p, 19)]++(M[$add.ref(p, 18)]++(M[$add.ref(p, 17)]++(M[$add.ref(p, 16)]++(M[$add.ref(p, 15)]++(M[$add.ref(p, 14)]++(M[$add.ref(p, 13)]++(M[$add.ref(p, 12)]++(M[$add.ref(p, 11)]++(M[$add.ref(p, 10)]++(M[$add.ref(p, 9)]++(M[$add.ref(p, 8)]++(M[$add.ref(p, 7)]++(M[$add.ref(p, 6)]++(M[$add.ref(p, 5)]++(M[$add.ref(p, 4)]++(M[$add.ref(p, 3)]++(M[$add.ref(p, 2)]++(M[$add.ref(p, 1)]++M[p]))))))))))))))))))))))))))))))) }
function {:inline} $store.bytes.bv256(M: [ref] bv8, p: ref, i: bv256) returns ([ref] bv8) { M[p := i[8:0]][$add.ref(p, 1) := i[16:8]][$add.ref(p, 2) := i[24:16]][$add.ref(p, 3) := i[32:24]][$add.ref(p, 4) := i[40:32]][$add.ref(p, 5) := i[48:40]][$add.ref(p, 6) := i[56:48]][$add.ref(p, 7) := i[64:56]][$add.ref(p, 8) := i[72:64]][$add.ref(p, 9) := i[80:72]][$add.ref(p, 10) := i[88:80]][$add.ref(p, 11) := i[96:88]][$add.ref(p, 12) := i[104:96]][$add.ref(p, 13) := i[112:104]][$add.ref(p, 14) := i[120:112]][$add.ref(p, 15) := i[128:120]][$add.ref(p, 16) := i[136:128]][$add.ref(p, 17) := i[144:136]][$add.ref(p, 18) := i[152:144]][$add.ref(p, 19) := i[160:152]][$add.ref(p, 20) := i[168:160]][$add.ref(p, 21) := i[176:168]][$add.ref(p, 22) := i[184:176]][$add.ref(p, 23) := i[192:184]][$add.ref(p, 24) := i[200:192]][$add.ref(p, 25) := i[208:200]][$add.ref(p, 26) := i[216:208]][$add.ref(p, 27) := i[224:216]][$add.ref(p, 28) := i[232:224]][$add.ref(p, 29) := i[240:232]][$add.ref(p, 30) := i[248:240]][$add.ref(p, 31) := i[256:248]] }
// Conversion between integer types
function {:inline} $trunc.bv5.bv1(i: bv5) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv6.bv1(i: bv6) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv8.bv1(i: bv8) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv16.bv1(i: bv16) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv24.bv1(i: bv24) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv32.bv1(i: bv32) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv33.bv1(i: bv33) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv40.bv1(i: bv40) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv48.bv1(i: bv48) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv56.bv1(i: bv56) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv64.bv1(i: bv64) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv80.bv1(i: bv80) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv88.bv1(i: bv88) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv96.bv1(i: bv96) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv128.bv1(i: bv128) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv160.bv1(i: bv160) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv256.bv1(i: bv256) returns (bv1) { i[1:0] }
function {:inline} $trunc.bv6.bv5(i: bv6) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv8.bv5(i: bv8) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv16.bv5(i: bv16) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv24.bv5(i: bv24) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv32.bv5(i: bv32) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv33.bv5(i: bv33) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv40.bv5(i: bv40) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv48.bv5(i: bv48) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv56.bv5(i: bv56) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv64.bv5(i: bv64) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv80.bv5(i: bv80) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv88.bv5(i: bv88) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv96.bv5(i: bv96) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv128.bv5(i: bv128) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv160.bv5(i: bv160) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv256.bv5(i: bv256) returns (bv5) { i[5:0] }
function {:inline} $trunc.bv8.bv6(i: bv8) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv16.bv6(i: bv16) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv24.bv6(i: bv24) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv32.bv6(i: bv32) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv33.bv6(i: bv33) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv40.bv6(i: bv40) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv48.bv6(i: bv48) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv56.bv6(i: bv56) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv64.bv6(i: bv64) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv80.bv6(i: bv80) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv88.bv6(i: bv88) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv96.bv6(i: bv96) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv128.bv6(i: bv128) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv160.bv6(i: bv160) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv256.bv6(i: bv256) returns (bv6) { i[6:0] }
function {:inline} $trunc.bv16.bv8(i: bv16) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv24.bv8(i: bv24) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv32.bv8(i: bv32) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv33.bv8(i: bv33) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv40.bv8(i: bv40) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv48.bv8(i: bv48) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv56.bv8(i: bv56) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv64.bv8(i: bv64) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv80.bv8(i: bv80) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv88.bv8(i: bv88) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv96.bv8(i: bv96) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv128.bv8(i: bv128) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv160.bv8(i: bv160) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv256.bv8(i: bv256) returns (bv8) { i[8:0] }
function {:inline} $trunc.bv24.bv16(i: bv24) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv32.bv16(i: bv32) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv33.bv16(i: bv33) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv40.bv16(i: bv40) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv48.bv16(i: bv48) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv56.bv16(i: bv56) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv64.bv16(i: bv64) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv80.bv16(i: bv80) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv88.bv16(i: bv88) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv96.bv16(i: bv96) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv128.bv16(i: bv128) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv160.bv16(i: bv160) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv256.bv16(i: bv256) returns (bv16) { i[16:0] }
function {:inline} $trunc.bv32.bv24(i: bv32) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv33.bv24(i: bv33) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv40.bv24(i: bv40) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv48.bv24(i: bv48) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv56.bv24(i: bv56) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv64.bv24(i: bv64) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv80.bv24(i: bv80) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv88.bv24(i: bv88) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv96.bv24(i: bv96) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv128.bv24(i: bv128) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv160.bv24(i: bv160) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv256.bv24(i: bv256) returns (bv24) { i[24:0] }
function {:inline} $trunc.bv33.bv32(i: bv33) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv40.bv32(i: bv40) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv48.bv32(i: bv48) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv56.bv32(i: bv56) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv64.bv32(i: bv64) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv80.bv32(i: bv80) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv88.bv32(i: bv88) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv96.bv32(i: bv96) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv128.bv32(i: bv128) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv160.bv32(i: bv160) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv256.bv32(i: bv256) returns (bv32) { i[32:0] }
function {:inline} $trunc.bv40.bv33(i: bv40) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv48.bv33(i: bv48) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv56.bv33(i: bv56) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv64.bv33(i: bv64) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv80.bv33(i: bv80) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv88.bv33(i: bv88) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv96.bv33(i: bv96) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv128.bv33(i: bv128) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv160.bv33(i: bv160) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv256.bv33(i: bv256) returns (bv33) { i[33:0] }
function {:inline} $trunc.bv48.bv40(i: bv48) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv56.bv40(i: bv56) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv64.bv40(i: bv64) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv80.bv40(i: bv80) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv88.bv40(i: bv88) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv96.bv40(i: bv96) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv128.bv40(i: bv128) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv160.bv40(i: bv160) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv256.bv40(i: bv256) returns (bv40) { i[40:0] }
function {:inline} $trunc.bv56.bv48(i: bv56) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv64.bv48(i: bv64) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv80.bv48(i: bv80) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv88.bv48(i: bv88) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv96.bv48(i: bv96) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv128.bv48(i: bv128) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv160.bv48(i: bv160) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv256.bv48(i: bv256) returns (bv48) { i[48:0] }
function {:inline} $trunc.bv64.bv56(i: bv64) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv80.bv56(i: bv80) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv88.bv56(i: bv88) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv96.bv56(i: bv96) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv128.bv56(i: bv128) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv160.bv56(i: bv160) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv256.bv56(i: bv256) returns (bv56) { i[56:0] }
function {:inline} $trunc.bv80.bv64(i: bv80) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv88.bv64(i: bv88) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv96.bv64(i: bv96) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv128.bv64(i: bv128) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv160.bv64(i: bv160) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv256.bv64(i: bv256) returns (bv64) { i[64:0] }
function {:inline} $trunc.bv88.bv80(i: bv88) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv96.bv80(i: bv96) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv128.bv80(i: bv128) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv160.bv80(i: bv160) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv256.bv80(i: bv256) returns (bv80) { i[80:0] }
function {:inline} $trunc.bv96.bv88(i: bv96) returns (bv88) { i[88:0] }
function {:inline} $trunc.bv128.bv88(i: bv128) returns (bv88) { i[88:0] }
function {:inline} $trunc.bv160.bv88(i: bv160) returns (bv88) { i[88:0] }
function {:inline} $trunc.bv256.bv88(i: bv256) returns (bv88) { i[88:0] }
function {:inline} $trunc.bv128.bv96(i: bv128) returns (bv96) { i[96:0] }
function {:inline} $trunc.bv160.bv96(i: bv160) returns (bv96) { i[96:0] }
function {:inline} $trunc.bv256.bv96(i: bv256) returns (bv96) { i[96:0] }
function {:inline} $trunc.bv160.bv128(i: bv160) returns (bv128) { i[128:0] }
function {:inline} $trunc.bv256.bv128(i: bv256) returns (bv128) { i[128:0] }
function {:inline} $trunc.bv256.bv160(i: bv256) returns (bv160) { i[160:0] }
function {:bvbuiltin "(_ sign_extend 4)"} $sext.bv1.bv5(i: bv1) returns (bv5);
function {:bvbuiltin "(_ sign_extend 5)"} $sext.bv1.bv6(i: bv1) returns (bv6);
function {:bvbuiltin "(_ sign_extend 7)"} $sext.bv1.bv8(i: bv1) returns (bv8);
function {:bvbuiltin "(_ sign_extend 15)"} $sext.bv1.bv16(i: bv1) returns (bv16);
function {:bvbuiltin "(_ sign_extend 23)"} $sext.bv1.bv24(i: bv1) returns (bv24);
function {:bvbuiltin "(_ sign_extend 31)"} $sext.bv1.bv32(i: bv1) returns (bv32);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv1.bv33(i: bv1) returns (bv33);
function {:bvbuiltin "(_ sign_extend 39)"} $sext.bv1.bv40(i: bv1) returns (bv40);
function {:bvbuiltin "(_ sign_extend 47)"} $sext.bv1.bv48(i: bv1) returns (bv48);
function {:bvbuiltin "(_ sign_extend 55)"} $sext.bv1.bv56(i: bv1) returns (bv56);
function {:bvbuiltin "(_ sign_extend 63)"} $sext.bv1.bv64(i: bv1) returns (bv64);
function {:bvbuiltin "(_ sign_extend 79)"} $sext.bv1.bv80(i: bv1) returns (bv80);
function {:bvbuiltin "(_ sign_extend 87)"} $sext.bv1.bv88(i: bv1) returns (bv88);
function {:bvbuiltin "(_ sign_extend 95)"} $sext.bv1.bv96(i: bv1) returns (bv96);
function {:bvbuiltin "(_ sign_extend 127)"} $sext.bv1.bv128(i: bv1) returns (bv128);
function {:bvbuiltin "(_ sign_extend 159)"} $sext.bv1.bv160(i: bv1) returns (bv160);
function {:bvbuiltin "(_ sign_extend 255)"} $sext.bv1.bv256(i: bv1) returns (bv256);
function {:bvbuiltin "(_ sign_extend 1)"} $sext.bv5.bv6(i: bv5) returns (bv6);
function {:bvbuiltin "(_ sign_extend 3)"} $sext.bv5.bv8(i: bv5) returns (bv8);
function {:bvbuiltin "(_ sign_extend 11)"} $sext.bv5.bv16(i: bv5) returns (bv16);
function {:bvbuiltin "(_ sign_extend 19)"} $sext.bv5.bv24(i: bv5) returns (bv24);
function {:bvbuiltin "(_ sign_extend 27)"} $sext.bv5.bv32(i: bv5) returns (bv32);
function {:bvbuiltin "(_ sign_extend 28)"} $sext.bv5.bv33(i: bv5) returns (bv33);
function {:bvbuiltin "(_ sign_extend 35)"} $sext.bv5.bv40(i: bv5) returns (bv40);
function {:bvbuiltin "(_ sign_extend 43)"} $sext.bv5.bv48(i: bv5) returns (bv48);
function {:bvbuiltin "(_ sign_extend 51)"} $sext.bv5.bv56(i: bv5) returns (bv56);
function {:bvbuiltin "(_ sign_extend 59)"} $sext.bv5.bv64(i: bv5) returns (bv64);
function {:bvbuiltin "(_ sign_extend 75)"} $sext.bv5.bv80(i: bv5) returns (bv80);
function {:bvbuiltin "(_ sign_extend 83)"} $sext.bv5.bv88(i: bv5) returns (bv88);
function {:bvbuiltin "(_ sign_extend 91)"} $sext.bv5.bv96(i: bv5) returns (bv96);
function {:bvbuiltin "(_ sign_extend 123)"} $sext.bv5.bv128(i: bv5) returns (bv128);
function {:bvbuiltin "(_ sign_extend 155)"} $sext.bv5.bv160(i: bv5) returns (bv160);
function {:bvbuiltin "(_ sign_extend 251)"} $sext.bv5.bv256(i: bv5) returns (bv256);
function {:bvbuiltin "(_ sign_extend 2)"} $sext.bv6.bv8(i: bv6) returns (bv8);
function {:bvbuiltin "(_ sign_extend 10)"} $sext.bv6.bv16(i: bv6) returns (bv16);
function {:bvbuiltin "(_ sign_extend 18)"} $sext.bv6.bv24(i: bv6) returns (bv24);
function {:bvbuiltin "(_ sign_extend 26)"} $sext.bv6.bv32(i: bv6) returns (bv32);
function {:bvbuiltin "(_ sign_extend 27)"} $sext.bv6.bv33(i: bv6) returns (bv33);
function {:bvbuiltin "(_ sign_extend 34)"} $sext.bv6.bv40(i: bv6) returns (bv40);
function {:bvbuiltin "(_ sign_extend 42)"} $sext.bv6.bv48(i: bv6) returns (bv48);
function {:bvbuiltin "(_ sign_extend 50)"} $sext.bv6.bv56(i: bv6) returns (bv56);
function {:bvbuiltin "(_ sign_extend 58)"} $sext.bv6.bv64(i: bv6) returns (bv64);
function {:bvbuiltin "(_ sign_extend 74)"} $sext.bv6.bv80(i: bv6) returns (bv80);
function {:bvbuiltin "(_ sign_extend 82)"} $sext.bv6.bv88(i: bv6) returns (bv88);
function {:bvbuiltin "(_ sign_extend 90)"} $sext.bv6.bv96(i: bv6) returns (bv96);
function {:bvbuiltin "(_ sign_extend 122)"} $sext.bv6.bv128(i: bv6) returns (bv128);
function {:bvbuiltin "(_ sign_extend 154)"} $sext.bv6.bv160(i: bv6) returns (bv160);
function {:bvbuiltin "(_ sign_extend 250)"} $sext.bv6.bv256(i: bv6) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ sign_extend 25)"} $sext.bv8.bv33(i: bv8) returns (bv33);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) returns (bv80);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ sign_extend 152)"} $sext.bv8.bv160(i: bv8) returns (bv160);
function {:bvbuiltin "(_ sign_extend 248)"} $sext.bv8.bv256(i: bv8) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ sign_extend 17)"} $sext.bv16.bv33(i: bv16) returns (bv33);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) returns (bv80);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ sign_extend 144)"} $sext.bv16.bv160(i: bv16) returns (bv160);
function {:bvbuiltin "(_ sign_extend 240)"} $sext.bv16.bv256(i: bv16) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ sign_extend 9)"} $sext.bv24.bv33(i: bv24) returns (bv33);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) returns (bv80);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ sign_extend 136)"} $sext.bv24.bv160(i: bv24) returns (bv160);
function {:bvbuiltin "(_ sign_extend 232)"} $sext.bv24.bv256(i: bv24) returns (bv256);
function {:bvbuiltin "(_ sign_extend 1)"} $sext.bv32.bv33(i: bv32) returns (bv33);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) returns (bv80);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ sign_extend 128)"} $sext.bv32.bv160(i: bv32) returns (bv160);
function {:bvbuiltin "(_ sign_extend 224)"} $sext.bv32.bv256(i: bv32) returns (bv256);
function {:bvbuiltin "(_ sign_extend 7)"} $sext.bv33.bv40(i: bv33) returns (bv40);
function {:bvbuiltin "(_ sign_extend 15)"} $sext.bv33.bv48(i: bv33) returns (bv48);
function {:bvbuiltin "(_ sign_extend 23)"} $sext.bv33.bv56(i: bv33) returns (bv56);
function {:bvbuiltin "(_ sign_extend 31)"} $sext.bv33.bv64(i: bv33) returns (bv64);
function {:bvbuiltin "(_ sign_extend 47)"} $sext.bv33.bv80(i: bv33) returns (bv80);
function {:bvbuiltin "(_ sign_extend 55)"} $sext.bv33.bv88(i: bv33) returns (bv88);
function {:bvbuiltin "(_ sign_extend 63)"} $sext.bv33.bv96(i: bv33) returns (bv96);
function {:bvbuiltin "(_ sign_extend 95)"} $sext.bv33.bv128(i: bv33) returns (bv128);
function {:bvbuiltin "(_ sign_extend 127)"} $sext.bv33.bv160(i: bv33) returns (bv160);
function {:bvbuiltin "(_ sign_extend 223)"} $sext.bv33.bv256(i: bv33) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) returns (bv80);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv40.bv160(i: bv40) returns (bv160);
function {:bvbuiltin "(_ sign_extend 216)"} $sext.bv40.bv256(i: bv40) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) returns (bv80);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv48.bv160(i: bv48) returns (bv160);
function {:bvbuiltin "(_ sign_extend 208)"} $sext.bv48.bv256(i: bv48) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) returns (bv80);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv56.bv160(i: bv56) returns (bv160);
function {:bvbuiltin "(_ sign_extend 200)"} $sext.bv56.bv256(i: bv56) returns (bv256);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) returns (bv80);
function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv64.bv160(i: bv64) returns (bv160);
function {:bvbuiltin "(_ sign_extend 192)"} $sext.bv64.bv256(i: bv64) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) returns (bv88);
function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) returns (bv96);
function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) returns (bv128);
function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv80.bv160(i: bv80) returns (bv160);
function {:bvbuiltin "(_ sign_extend 176)"} $sext.bv80.bv256(i: bv80) returns (bv256);
function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv88.bv160(i: bv88) returns (bv160);
function {:bvbuiltin "(_ sign_extend 168)"} $sext.bv88.bv256(i: bv88) returns (bv256);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) returns (bv128);
function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv96.bv160(i: bv96) returns (bv160);
function {:bvbuiltin "(_ sign_extend 160)"} $sext.bv96.bv256(i: bv96) returns (bv256);
function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv128.bv160(i: bv128) returns (bv160);
function {:bvbuiltin "(_ sign_extend 128)"} $sext.bv128.bv256(i: bv128) returns (bv256);
function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv160.bv256(i: bv160) returns (bv256);
function {:bvbuiltin "(_ zero_extend 4)"} $zext.bv1.bv5(i: bv1) returns (bv5);
function {:bvbuiltin "(_ zero_extend 5)"} $zext.bv1.bv6(i: bv1) returns (bv6);
function {:bvbuiltin "(_ zero_extend 7)"} $zext.bv1.bv8(i: bv1) returns (bv8);
function {:bvbuiltin "(_ zero_extend 15)"} $zext.bv1.bv16(i: bv1) returns (bv16);
function {:bvbuiltin "(_ zero_extend 23)"} $zext.bv1.bv24(i: bv1) returns (bv24);
function {:bvbuiltin "(_ zero_extend 31)"} $zext.bv1.bv32(i: bv1) returns (bv32);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv1.bv33(i: bv1) returns (bv33);
function {:bvbuiltin "(_ zero_extend 39)"} $zext.bv1.bv40(i: bv1) returns (bv40);
function {:bvbuiltin "(_ zero_extend 47)"} $zext.bv1.bv48(i: bv1) returns (bv48);
function {:bvbuiltin "(_ zero_extend 55)"} $zext.bv1.bv56(i: bv1) returns (bv56);
function {:bvbuiltin "(_ zero_extend 63)"} $zext.bv1.bv64(i: bv1) returns (bv64);
function {:bvbuiltin "(_ zero_extend 79)"} $zext.bv1.bv80(i: bv1) returns (bv80);
function {:bvbuiltin "(_ zero_extend 87)"} $zext.bv1.bv88(i: bv1) returns (bv88);
function {:bvbuiltin "(_ zero_extend 95)"} $zext.bv1.bv96(i: bv1) returns (bv96);
function {:bvbuiltin "(_ zero_extend 127)"} $zext.bv1.bv128(i: bv1) returns (bv128);
function {:bvbuiltin "(_ zero_extend 159)"} $zext.bv1.bv160(i: bv1) returns (bv160);
function {:bvbuiltin "(_ zero_extend 255)"} $zext.bv1.bv256(i: bv1) returns (bv256);
function {:bvbuiltin "(_ zero_extend 1)"} $zext.bv5.bv6(i: bv5) returns (bv6);
function {:bvbuiltin "(_ zero_extend 3)"} $zext.bv5.bv8(i: bv5) returns (bv8);
function {:bvbuiltin "(_ zero_extend 11)"} $zext.bv5.bv16(i: bv5) returns (bv16);
function {:bvbuiltin "(_ zero_extend 19)"} $zext.bv5.bv24(i: bv5) returns (bv24);
function {:bvbuiltin "(_ zero_extend 27)"} $zext.bv5.bv32(i: bv5) returns (bv32);
function {:bvbuiltin "(_ zero_extend 28)"} $zext.bv5.bv33(i: bv5) returns (bv33);
function {:bvbuiltin "(_ zero_extend 35)"} $zext.bv5.bv40(i: bv5) returns (bv40);
function {:bvbuiltin "(_ zero_extend 43)"} $zext.bv5.bv48(i: bv5) returns (bv48);
function {:bvbuiltin "(_ zero_extend 51)"} $zext.bv5.bv56(i: bv5) returns (bv56);
function {:bvbuiltin "(_ zero_extend 59)"} $zext.bv5.bv64(i: bv5) returns (bv64);
function {:bvbuiltin "(_ zero_extend 75)"} $zext.bv5.bv80(i: bv5) returns (bv80);
function {:bvbuiltin "(_ zero_extend 83)"} $zext.bv5.bv88(i: bv5) returns (bv88);
function {:bvbuiltin "(_ zero_extend 91)"} $zext.bv5.bv96(i: bv5) returns (bv96);
function {:bvbuiltin "(_ zero_extend 123)"} $zext.bv5.bv128(i: bv5) returns (bv128);
function {:bvbuiltin "(_ zero_extend 155)"} $zext.bv5.bv160(i: bv5) returns (bv160);
function {:bvbuiltin "(_ zero_extend 251)"} $zext.bv5.bv256(i: bv5) returns (bv256);
function {:bvbuiltin "(_ zero_extend 2)"} $zext.bv6.bv8(i: bv6) returns (bv8);
function {:bvbuiltin "(_ zero_extend 10)"} $zext.bv6.bv16(i: bv6) returns (bv16);
function {:bvbuiltin "(_ zero_extend 18)"} $zext.bv6.bv24(i: bv6) returns (bv24);
function {:bvbuiltin "(_ zero_extend 26)"} $zext.bv6.bv32(i: bv6) returns (bv32);
function {:bvbuiltin "(_ zero_extend 27)"} $zext.bv6.bv33(i: bv6) returns (bv33);
function {:bvbuiltin "(_ zero_extend 34)"} $zext.bv6.bv40(i: bv6) returns (bv40);
function {:bvbuiltin "(_ zero_extend 42)"} $zext.bv6.bv48(i: bv6) returns (bv48);
function {:bvbuiltin "(_ zero_extend 50)"} $zext.bv6.bv56(i: bv6) returns (bv56);
function {:bvbuiltin "(_ zero_extend 58)"} $zext.bv6.bv64(i: bv6) returns (bv64);
function {:bvbuiltin "(_ zero_extend 74)"} $zext.bv6.bv80(i: bv6) returns (bv80);
function {:bvbuiltin "(_ zero_extend 82)"} $zext.bv6.bv88(i: bv6) returns (bv88);
function {:bvbuiltin "(_ zero_extend 90)"} $zext.bv6.bv96(i: bv6) returns (bv96);
function {:bvbuiltin "(_ zero_extend 122)"} $zext.bv6.bv128(i: bv6) returns (bv128);
function {:bvbuiltin "(_ zero_extend 154)"} $zext.bv6.bv160(i: bv6) returns (bv160);
function {:bvbuiltin "(_ zero_extend 250)"} $zext.bv6.bv256(i: bv6) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) returns (bv16);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) returns (bv24);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) returns (bv32);
function {:bvbuiltin "(_ zero_extend 25)"} $zext.bv8.bv33(i: bv8) returns (bv33);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) returns (bv40);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) returns (bv48);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) returns (bv56);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) returns (bv64);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) returns (bv80);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) returns (bv88);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) returns (bv96);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) returns (bv128);
function {:bvbuiltin "(_ zero_extend 152)"} $zext.bv8.bv160(i: bv8) returns (bv160);
function {:bvbuiltin "(_ zero_extend 248)"} $zext.bv8.bv256(i: bv8) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) returns (bv24);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) returns (bv32);
function {:bvbuiltin "(_ zero_extend 17)"} $zext.bv16.bv33(i: bv16) returns (bv33);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) returns (bv40);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) returns (bv48);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) returns (bv56);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) returns (bv64);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) returns (bv80);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) returns (bv88);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) returns (bv96);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) returns (bv128);
function {:bvbuiltin "(_ zero_extend 144)"} $zext.bv16.bv160(i: bv16) returns (bv160);
function {:bvbuiltin "(_ zero_extend 240)"} $zext.bv16.bv256(i: bv16) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) returns (bv32);
function {:bvbuiltin "(_ zero_extend 9)"} $zext.bv24.bv33(i: bv24) returns (bv33);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) returns (bv40);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) returns (bv48);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) returns (bv56);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) returns (bv64);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) returns (bv80);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) returns (bv88);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) returns (bv96);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) returns (bv128);
function {:bvbuiltin "(_ zero_extend 136)"} $zext.bv24.bv160(i: bv24) returns (bv160);
function {:bvbuiltin "(_ zero_extend 232)"} $zext.bv24.bv256(i: bv24) returns (bv256);
function {:bvbuiltin "(_ zero_extend 1)"} $zext.bv32.bv33(i: bv32) returns (bv33);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) returns (bv40);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) returns (bv48);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) returns (bv56);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) returns (bv64);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) returns (bv80);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) returns (bv88);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) returns (bv96);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) returns (bv128);
function {:bvbuiltin "(_ zero_extend 128)"} $zext.bv32.bv160(i: bv32) returns (bv160);
function {:bvbuiltin "(_ zero_extend 224)"} $zext.bv32.bv256(i: bv32) returns (bv256);
function {:bvbuiltin "(_ zero_extend 7)"} $zext.bv33.bv40(i: bv33) returns (bv40);
function {:bvbuiltin "(_ zero_extend 15)"} $zext.bv33.bv48(i: bv33) returns (bv48);
function {:bvbuiltin "(_ zero_extend 23)"} $zext.bv33.bv56(i: bv33) returns (bv56);
function {:bvbuiltin "(_ zero_extend 31)"} $zext.bv33.bv64(i: bv33) returns (bv64);
function {:bvbuiltin "(_ zero_extend 47)"} $zext.bv33.bv80(i: bv33) returns (bv80);
function {:bvbuiltin "(_ zero_extend 55)"} $zext.bv33.bv88(i: bv33) returns (bv88);
function {:bvbuiltin "(_ zero_extend 63)"} $zext.bv33.bv96(i: bv33) returns (bv96);
function {:bvbuiltin "(_ zero_extend 95)"} $zext.bv33.bv128(i: bv33) returns (bv128);
function {:bvbuiltin "(_ zero_extend 127)"} $zext.bv33.bv160(i: bv33) returns (bv160);
function {:bvbuiltin "(_ zero_extend 223)"} $zext.bv33.bv256(i: bv33) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) returns (bv48);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) returns (bv56);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) returns (bv64);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) returns (bv80);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) returns (bv88);
function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) returns (bv96);
function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) returns (bv128);
function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv40.bv160(i: bv40) returns (bv160);
function {:bvbuiltin "(_ zero_extend 216)"} $zext.bv40.bv256(i: bv40) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv48.bv56(i: bv48) returns (bv56);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) returns (bv64);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) returns (bv80);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) returns (bv88);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) returns (bv96);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) returns (bv128);
function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv48.bv160(i: bv48) returns (bv160);
function {:bvbuiltin "(_ zero_extend 208)"} $zext.bv48.bv256(i: bv48) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) returns (bv64);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) returns (bv80);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) returns (bv88);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) returns (bv96);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) returns (bv128);
function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv56.bv160(i: bv56) returns (bv160);
function {:bvbuiltin "(_ zero_extend 200)"} $zext.bv56.bv256(i: bv56) returns (bv256);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) returns (bv80);
function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) returns (bv88);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) returns (bv96);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) returns (bv128);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv64.bv160(i: bv64) returns (bv160);
function {:bvbuiltin "(_ zero_extend 192)"} $zext.bv64.bv256(i: bv64) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) returns (bv88);
function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) returns (bv96);
function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) returns (bv128);
function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv80.bv160(i: bv80) returns (bv160);
function {:bvbuiltin "(_ zero_extend 176)"} $zext.bv80.bv256(i: bv80) returns (bv256);
function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) returns (bv96);
function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) returns (bv128);
function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv88.bv160(i: bv88) returns (bv160);
function {:bvbuiltin "(_ zero_extend 168)"} $zext.bv88.bv256(i: bv88) returns (bv256);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) returns (bv128);
function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv96.bv160(i: bv96) returns (bv160);
function {:bvbuiltin "(_ zero_extend 160)"} $zext.bv96.bv256(i: bv96) returns (bv256);
function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv128.bv160(i: bv128) returns (bv160);
function {:bvbuiltin "(_ zero_extend 128)"} $zext.bv128.bv256(i: bv128) returns (bv256);
function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv160.bv256(i: bv160) returns (bv256);
function $extractvalue.bv1(p: ref, i: int) returns (bv1);
function $extractvalue.bv5(p: ref, i: int) returns (bv5);
function $extractvalue.bv6(p: ref, i: int) returns (bv6);
function $extractvalue.bv8(p: ref, i: int) returns (bv8);
function $extractvalue.bv16(p: ref, i: int) returns (bv16);
function $extractvalue.bv24(p: ref, i: int) returns (bv24);
function $extractvalue.bv32(p: ref, i: int) returns (bv32);
function $extractvalue.bv33(p: ref, i: int) returns (bv33);
function $extractvalue.bv40(p: ref, i: int) returns (bv40);
function $extractvalue.bv48(p: ref, i: int) returns (bv48);
function $extractvalue.bv56(p: ref, i: int) returns (bv56);
function $extractvalue.bv64(p: ref, i: int) returns (bv64);
function $extractvalue.bv80(p: ref, i: int) returns (bv80);
function $extractvalue.bv88(p: ref, i: int) returns (bv88);
function $extractvalue.bv96(p: ref, i: int) returns (bv96);
function $extractvalue.bv128(p: ref, i: int) returns (bv128);
function $extractvalue.bv160(p: ref, i: int) returns (bv160);
function $extractvalue.bv256(p: ref, i: int) returns (bv256);
// Pointer arithmetic operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

// Pointer predicates
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 == p2) }
function {:inline} $eq.ref(p1: ref, p2: ref) returns (bv1) { (if $eq.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 != p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (bv1) { (if $ne.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 > p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (bv1) { (if $ugt.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 >= p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (bv1) { (if $uge.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 < p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (bv1) { (if $ult.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 <= p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (bv1) { (if $ule.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 > p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (bv1) { (if $sgt.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 >= p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (bv1) { (if $sge.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 < p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (bv1) { (if $slt.ref.bool(p1, p2) then 1bv1 else 0bv1) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 <= p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (bv1) { (if $sle.ref.bool(p1, p2) then 1bv1 else 0bv1) }

// Pointer load/store operations
// Bytewise pointer storage
function {:inline} $load.bytes.ref(M: [ref] bv8, p: ref) returns (ref) { $i2p.bv64.ref($load.bytes.bv64(M, p)) }
function {:inline} $store.bytes.ref(M: [ref] bv8, p: ref, p1: ref) returns ([ref] bv8) { $store.bytes.bv64(M, p, $p2i.ref.bv64(p1)) }
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, i: ref) returns ([ref] ref) { M[p := i] }

// Pointer conversion
function {:inline} $bitcast.ref.ref(p: ref) returns (ref) { p }
function $extractvalue.ref(p: ref, i: int) returns (ref);
// Pointer-number conversion
function {:inline} $p2i.ref.bv8(p: ref) returns (bv8) { $trunc.bv64.bv8($int2bv.64(p)) }
function {:inline} $i2p.bv8.ref(i: bv8) returns (ref) { $bv2int.64($zext.bv8.bv64(i)) }
function {:inline} $p2i.ref.bv16(p: ref) returns (bv16) { $trunc.bv64.bv16($int2bv.64(p)) }
function {:inline} $i2p.bv16.ref(i: bv16) returns (ref) { $bv2int.64($zext.bv16.bv64(i)) }
function {:inline} $p2i.ref.bv32(p: ref) returns (bv32) { $trunc.bv64.bv32($int2bv.64(p)) }
function {:inline} $i2p.bv32.ref(i: bv32) returns (ref) { $bv2int.64($zext.bv32.bv64(i)) }
function {:inline} $p2i.ref.bv64(p: ref) returns (bv64) { $int2bv.64(p) }
function {:inline} $i2p.bv64.ref(i: bv64) returns (ref) { $bv2int.64(i) }

var $rmode: rmode;// Floating-point arithmetic operations
function {:builtin "fp.abs"} $abs.bvhalf(f: bvhalf) returns (bvhalf);
function {:builtin "fp.abs"} $abs.bvfloat(f: bvfloat) returns (bvfloat);
function {:builtin "fp.abs"} $abs.bvdouble(f: bvdouble) returns (bvdouble);
function {:builtin "fp.abs"} $abs.bvlongdouble(f: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.roundToIntegral"} $round.bvhalf(rm: rmode, f: bvhalf) returns (bvhalf);
function {:builtin "fp.roundToIntegral"} $round.bvfloat(rm: rmode, f: bvfloat) returns (bvfloat);
function {:builtin "fp.roundToIntegral"} $round.bvdouble(rm: rmode, f: bvdouble) returns (bvdouble);
function {:builtin "fp.roundToIntegral"} $round.bvlongdouble(rm: rmode, f: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.sqrt"} $sqrt.bvhalf(rm: rmode, f: bvhalf) returns (bvhalf);
function {:builtin "fp.sqrt"} $sqrt.bvfloat(rm: rmode, f: bvfloat) returns (bvfloat);
function {:builtin "fp.sqrt"} $sqrt.bvdouble(rm: rmode, f: bvdouble) returns (bvdouble);
function {:builtin "fp.sqrt"} $sqrt.bvlongdouble(rm: rmode, f: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.add"} $fadd.bvhalf(rm: rmode, f1: bvhalf, f2: bvhalf) returns (bvhalf);
function {:builtin "fp.add"} $fadd.bvfloat(rm: rmode, f1: bvfloat, f2: bvfloat) returns (bvfloat);
function {:builtin "fp.add"} $fadd.bvdouble(rm: rmode, f1: bvdouble, f2: bvdouble) returns (bvdouble);
function {:builtin "fp.add"} $fadd.bvlongdouble(rm: rmode, f1: bvlongdouble, f2: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.sub"} $fsub.bvhalf(rm: rmode, f1: bvhalf, f2: bvhalf) returns (bvhalf);
function {:builtin "fp.sub"} $fsub.bvfloat(rm: rmode, f1: bvfloat, f2: bvfloat) returns (bvfloat);
function {:builtin "fp.sub"} $fsub.bvdouble(rm: rmode, f1: bvdouble, f2: bvdouble) returns (bvdouble);
function {:builtin "fp.sub"} $fsub.bvlongdouble(rm: rmode, f1: bvlongdouble, f2: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.mul"} $fmul.bvhalf(rm: rmode, f1: bvhalf, f2: bvhalf) returns (bvhalf);
function {:builtin "fp.mul"} $fmul.bvfloat(rm: rmode, f1: bvfloat, f2: bvfloat) returns (bvfloat);
function {:builtin "fp.mul"} $fmul.bvdouble(rm: rmode, f1: bvdouble, f2: bvdouble) returns (bvdouble);
function {:builtin "fp.mul"} $fmul.bvlongdouble(rm: rmode, f1: bvlongdouble, f2: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.div"} $fdiv.bvhalf(rm: rmode, f1: bvhalf, f2: bvhalf) returns (bvhalf);
function {:builtin "fp.div"} $fdiv.bvfloat(rm: rmode, f1: bvfloat, f2: bvfloat) returns (bvfloat);
function {:builtin "fp.div"} $fdiv.bvdouble(rm: rmode, f1: bvdouble, f2: bvdouble) returns (bvdouble);
function {:builtin "fp.div"} $fdiv.bvlongdouble(rm: rmode, f1: bvlongdouble, f2: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.rem"} $frem.bvhalf(f1: bvhalf, f2: bvhalf) returns (bvhalf);
function {:builtin "fp.rem"} $frem.bvfloat(f1: bvfloat, f2: bvfloat) returns (bvfloat);
function {:builtin "fp.rem"} $frem.bvdouble(f1: bvdouble, f2: bvdouble) returns (bvdouble);
function {:builtin "fp.rem"} $frem.bvlongdouble(f1: bvlongdouble, f2: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.min"} $min.bvhalf(f1: bvhalf, f2: bvhalf) returns (bvhalf);
function {:builtin "fp.min"} $min.bvfloat(f1: bvfloat, f2: bvfloat) returns (bvfloat);
function {:builtin "fp.min"} $min.bvdouble(f1: bvdouble, f2: bvdouble) returns (bvdouble);
function {:builtin "fp.min"} $min.bvlongdouble(f1: bvlongdouble, f2: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.max"} $max.bvhalf(f1: bvhalf, f2: bvhalf) returns (bvhalf);
function {:builtin "fp.max"} $max.bvfloat(f1: bvfloat, f2: bvfloat) returns (bvfloat);
function {:builtin "fp.max"} $max.bvdouble(f1: bvdouble, f2: bvdouble) returns (bvdouble);
function {:builtin "fp.max"} $max.bvlongdouble(f1: bvlongdouble, f2: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.fma"} $fma.bvhalf(rm: rmode, f1: bvhalf, f2: bvhalf, f3: bvhalf) returns (bvhalf);
function {:builtin "fp.fma"} $fma.bvfloat(rm: rmode, f1: bvfloat, f2: bvfloat, f3: bvfloat) returns (bvfloat);
function {:builtin "fp.fma"} $fma.bvdouble(rm: rmode, f1: bvdouble, f2: bvdouble, f3: bvdouble) returns (bvdouble);
function {:builtin "fp.fma"} $fma.bvlongdouble(rm: rmode, f1: bvlongdouble, f2: bvlongdouble, f3: bvlongdouble) returns (bvlongdouble);
function {:builtin "fp.neg"} $fneg.bvhalf(f: bvhalf) returns (bvhalf);
function {:builtin "fp.neg"} $fneg.bvfloat(f: bvfloat) returns (bvfloat);
function {:builtin "fp.neg"} $fneg.bvdouble(f: bvdouble) returns (bvdouble);
function {:builtin "fp.neg"} $fneg.bvlongdouble(f: bvlongdouble) returns (bvlongdouble);
// Floating-point predicates
function {:builtin "fp.isNormal"} $isnormal.bvhalf.bool(f: bvhalf) returns (bool);
function {:builtin "fp.isNormal"} $isnormal.bvfloat.bool(f: bvfloat) returns (bool);
function {:builtin "fp.isNormal"} $isnormal.bvdouble.bool(f: bvdouble) returns (bool);
function {:builtin "fp.isNormal"} $isnormal.bvlongdouble.bool(f: bvlongdouble) returns (bool);
function {:builtin "fp.isSubnormal"} $issubnormal.bvhalf.bool(f: bvhalf) returns (bool);
function {:builtin "fp.isSubnormal"} $issubnormal.bvfloat.bool(f: bvfloat) returns (bool);
function {:builtin "fp.isSubnormal"} $issubnormal.bvdouble.bool(f: bvdouble) returns (bool);
function {:builtin "fp.isSubnormal"} $issubnormal.bvlongdouble.bool(f: bvlongdouble) returns (bool);
function {:builtin "fp.isZero"} $iszero.bvhalf.bool(f: bvhalf) returns (bool);
function {:builtin "fp.isZero"} $iszero.bvfloat.bool(f: bvfloat) returns (bool);
function {:builtin "fp.isZero"} $iszero.bvdouble.bool(f: bvdouble) returns (bool);
function {:builtin "fp.isZero"} $iszero.bvlongdouble.bool(f: bvlongdouble) returns (bool);
function {:builtin "fp.isInfinite"} $isinfinite.bvhalf.bool(f: bvhalf) returns (bool);
function {:builtin "fp.isInfinite"} $isinfinite.bvfloat.bool(f: bvfloat) returns (bool);
function {:builtin "fp.isInfinite"} $isinfinite.bvdouble.bool(f: bvdouble) returns (bool);
function {:builtin "fp.isInfinite"} $isinfinite.bvlongdouble.bool(f: bvlongdouble) returns (bool);
function {:builtin "fp.isNaN"} $isnan.bvhalf.bool(f: bvhalf) returns (bool);
function {:builtin "fp.isNaN"} $isnan.bvfloat.bool(f: bvfloat) returns (bool);
function {:builtin "fp.isNaN"} $isnan.bvdouble.bool(f: bvdouble) returns (bool);
function {:builtin "fp.isNaN"} $isnan.bvlongdouble.bool(f: bvlongdouble) returns (bool);
function {:builtin "fp.isNegative"} $isnegative.bvhalf.bool(f: bvhalf) returns (bool);
function {:builtin "fp.isNegative"} $isnegative.bvfloat.bool(f: bvfloat) returns (bool);
function {:builtin "fp.isNegative"} $isnegative.bvdouble.bool(f: bvdouble) returns (bool);
function {:builtin "fp.isNegative"} $isnegative.bvlongdouble.bool(f: bvlongdouble) returns (bool);
function {:builtin "fp.isPositive"} $ispositive.bvhalf.bool(f: bvhalf) returns (bool);
function {:builtin "fp.isPositive"} $ispositive.bvfloat.bool(f: bvfloat) returns (bool);
function {:builtin "fp.isPositive"} $ispositive.bvdouble.bool(f: bvdouble) returns (bool);
function {:builtin "fp.isPositive"} $ispositive.bvlongdouble.bool(f: bvlongdouble) returns (bool);
function {:builtin "fp.eq"} $foeq.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool);
function {:builtin "fp.eq"} $foeq.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool);
function {:builtin "fp.eq"} $foeq.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool);
function {:builtin "fp.eq"} $foeq.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool);
function {:builtin "fp.leq"} $fole.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool);
function {:builtin "fp.leq"} $fole.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool);
function {:builtin "fp.leq"} $fole.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool);
function {:builtin "fp.leq"} $fole.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool);
function {:builtin "fp.lt"} $folt.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool);
function {:builtin "fp.lt"} $folt.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool);
function {:builtin "fp.lt"} $folt.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool);
function {:builtin "fp.lt"} $folt.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool);
function {:builtin "fp.geq"} $foge.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool);
function {:builtin "fp.geq"} $foge.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool);
function {:builtin "fp.geq"} $foge.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool);
function {:builtin "fp.geq"} $foge.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool);
function {:builtin "fp.gt"} $fogt.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool);
function {:builtin "fp.gt"} $fogt.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool);
function {:builtin "fp.gt"} $fogt.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool);
function {:builtin "fp.gt"} $fogt.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool);
function {:inline} $fone.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { !($fueq.bvhalf.bool(f1, f2)) }
function {:inline} $fone.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { !($fueq.bvfloat.bool(f1, f2)) }
function {:inline} $fone.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { !($fueq.bvdouble.bool(f1, f2)) }
function {:inline} $fone.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { !($fueq.bvlongdouble.bool(f1, f2)) }
function {:inline} $ford.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { !($funo.bvhalf.bool(f1, f2)) }
function {:inline} $ford.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { !($funo.bvfloat.bool(f1, f2)) }
function {:inline} $ford.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { !($funo.bvdouble.bool(f1, f2)) }
function {:inline} $ford.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { !($funo.bvlongdouble.bool(f1, f2)) }
function {:inline} $fueq.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { (($isnan.bvhalf.bool(f1) || $isnan.bvhalf.bool(f2)) || $foeq.bvhalf.bool(f1, f2)) }
function {:inline} $fueq.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { (($isnan.bvfloat.bool(f1) || $isnan.bvfloat.bool(f2)) || $foeq.bvfloat.bool(f1, f2)) }
function {:inline} $fueq.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { (($isnan.bvdouble.bool(f1) || $isnan.bvdouble.bool(f2)) || $foeq.bvdouble.bool(f1, f2)) }
function {:inline} $fueq.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { (($isnan.bvlongdouble.bool(f1) || $isnan.bvlongdouble.bool(f2)) || $foeq.bvlongdouble.bool(f1, f2)) }
function {:inline} $fugt.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { (($isnan.bvhalf.bool(f1) || $isnan.bvhalf.bool(f2)) || $fogt.bvhalf.bool(f1, f2)) }
function {:inline} $fugt.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { (($isnan.bvfloat.bool(f1) || $isnan.bvfloat.bool(f2)) || $fogt.bvfloat.bool(f1, f2)) }
function {:inline} $fugt.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { (($isnan.bvdouble.bool(f1) || $isnan.bvdouble.bool(f2)) || $fogt.bvdouble.bool(f1, f2)) }
function {:inline} $fugt.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { (($isnan.bvlongdouble.bool(f1) || $isnan.bvlongdouble.bool(f2)) || $fogt.bvlongdouble.bool(f1, f2)) }
function {:inline} $fuge.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { (($isnan.bvhalf.bool(f1) || $isnan.bvhalf.bool(f2)) || $foge.bvhalf.bool(f1, f2)) }
function {:inline} $fuge.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { (($isnan.bvfloat.bool(f1) || $isnan.bvfloat.bool(f2)) || $foge.bvfloat.bool(f1, f2)) }
function {:inline} $fuge.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { (($isnan.bvdouble.bool(f1) || $isnan.bvdouble.bool(f2)) || $foge.bvdouble.bool(f1, f2)) }
function {:inline} $fuge.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { (($isnan.bvlongdouble.bool(f1) || $isnan.bvlongdouble.bool(f2)) || $foge.bvlongdouble.bool(f1, f2)) }
function {:inline} $fult.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { (($isnan.bvhalf.bool(f1) || $isnan.bvhalf.bool(f2)) || $folt.bvhalf.bool(f1, f2)) }
function {:inline} $fult.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { (($isnan.bvfloat.bool(f1) || $isnan.bvfloat.bool(f2)) || $folt.bvfloat.bool(f1, f2)) }
function {:inline} $fult.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { (($isnan.bvdouble.bool(f1) || $isnan.bvdouble.bool(f2)) || $folt.bvdouble.bool(f1, f2)) }
function {:inline} $fult.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { (($isnan.bvlongdouble.bool(f1) || $isnan.bvlongdouble.bool(f2)) || $folt.bvlongdouble.bool(f1, f2)) }
function {:inline} $fule.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { (($isnan.bvhalf.bool(f1) || $isnan.bvhalf.bool(f2)) || $fole.bvhalf.bool(f1, f2)) }
function {:inline} $fule.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { (($isnan.bvfloat.bool(f1) || $isnan.bvfloat.bool(f2)) || $fole.bvfloat.bool(f1, f2)) }
function {:inline} $fule.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { (($isnan.bvdouble.bool(f1) || $isnan.bvdouble.bool(f2)) || $fole.bvdouble.bool(f1, f2)) }
function {:inline} $fule.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { (($isnan.bvlongdouble.bool(f1) || $isnan.bvlongdouble.bool(f2)) || $fole.bvlongdouble.bool(f1, f2)) }
function {:inline} $fune.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { (($isnan.bvhalf.bool(f1) || $isnan.bvhalf.bool(f2)) || $fone.bvhalf.bool(f1, f2)) }
function {:inline} $fune.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { (($isnan.bvfloat.bool(f1) || $isnan.bvfloat.bool(f2)) || $fone.bvfloat.bool(f1, f2)) }
function {:inline} $fune.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { (($isnan.bvdouble.bool(f1) || $isnan.bvdouble.bool(f2)) || $fone.bvdouble.bool(f1, f2)) }
function {:inline} $fune.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { (($isnan.bvlongdouble.bool(f1) || $isnan.bvlongdouble.bool(f2)) || $fone.bvlongdouble.bool(f1, f2)) }
function {:inline} $funo.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { ($isnan.bvhalf.bool(f1) || $isnan.bvhalf.bool(f2)) }
function {:inline} $funo.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { ($isnan.bvfloat.bool(f1) || $isnan.bvfloat.bool(f2)) }
function {:inline} $funo.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { ($isnan.bvdouble.bool(f1) || $isnan.bvdouble.bool(f2)) }
function {:inline} $funo.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { ($isnan.bvlongdouble.bool(f1) || $isnan.bvlongdouble.bool(f2)) }
function {:inline} $ffalse.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { false }
function {:inline} $ffalse.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { false }
function {:inline} $ffalse.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { false }
function {:inline} $ffalse.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { false }
function {:inline} $ftrue.bvhalf.bool(f1: bvhalf, f2: bvhalf) returns (bool) { true }
function {:inline} $ftrue.bvfloat.bool(f1: bvfloat, f2: bvfloat) returns (bool) { true }
function {:inline} $ftrue.bvdouble.bool(f1: bvdouble, f2: bvdouble) returns (bool) { true }
function {:inline} $ftrue.bvlongdouble.bool(f1: bvlongdouble, f2: bvlongdouble) returns (bool) { true }
// Floating-point/integer conversion
function $bitcast.bvhalf.bv16(f: bvhalf) returns (bv16);
function $bitcast.bvfloat.bv32(f: bvfloat) returns (bv32);
function $bitcast.bvdouble.bv64(f: bvdouble) returns (bv64);
function $bitcast.bvlongdouble.bv80(f: bvlongdouble) returns (bv80);
function {:builtin "(_ to_fp 5 11)"} $bitcast.bv16.bvhalf(i: bv16) returns (bvhalf);
function {:builtin "(_ to_fp 8 24)"} $bitcast.bv32.bvfloat(i: bv32) returns (bvfloat);
function {:builtin "(_ to_fp 11 53)"} $bitcast.bv64.bvdouble(i: bv64) returns (bvdouble);
function {:builtin "(_ to_fp 15 65)"} $bitcast.bv80.bvlongdouble(i: bv80) returns (bvlongdouble);
function {:builtin "(_ fp.to_sbv 1)"} $fp2si.bvhalf.bv1(rm: rmode, f: bvhalf) returns (bv1);
function {:builtin "(_ fp.to_sbv 5)"} $fp2si.bvhalf.bv5(rm: rmode, f: bvhalf) returns (bv5);
function {:builtin "(_ fp.to_sbv 6)"} $fp2si.bvhalf.bv6(rm: rmode, f: bvhalf) returns (bv6);
function {:builtin "(_ fp.to_sbv 8)"} $fp2si.bvhalf.bv8(rm: rmode, f: bvhalf) returns (bv8);
function {:builtin "(_ fp.to_sbv 16)"} $fp2si.bvhalf.bv16(rm: rmode, f: bvhalf) returns (bv16);
function {:builtin "(_ fp.to_sbv 24)"} $fp2si.bvhalf.bv24(rm: rmode, f: bvhalf) returns (bv24);
function {:builtin "(_ fp.to_sbv 32)"} $fp2si.bvhalf.bv32(rm: rmode, f: bvhalf) returns (bv32);
function {:builtin "(_ fp.to_sbv 33)"} $fp2si.bvhalf.bv33(rm: rmode, f: bvhalf) returns (bv33);
function {:builtin "(_ fp.to_sbv 40)"} $fp2si.bvhalf.bv40(rm: rmode, f: bvhalf) returns (bv40);
function {:builtin "(_ fp.to_sbv 48)"} $fp2si.bvhalf.bv48(rm: rmode, f: bvhalf) returns (bv48);
function {:builtin "(_ fp.to_sbv 56)"} $fp2si.bvhalf.bv56(rm: rmode, f: bvhalf) returns (bv56);
function {:builtin "(_ fp.to_sbv 64)"} $fp2si.bvhalf.bv64(rm: rmode, f: bvhalf) returns (bv64);
function {:builtin "(_ fp.to_sbv 80)"} $fp2si.bvhalf.bv80(rm: rmode, f: bvhalf) returns (bv80);
function {:builtin "(_ fp.to_sbv 88)"} $fp2si.bvhalf.bv88(rm: rmode, f: bvhalf) returns (bv88);
function {:builtin "(_ fp.to_sbv 96)"} $fp2si.bvhalf.bv96(rm: rmode, f: bvhalf) returns (bv96);
function {:builtin "(_ fp.to_sbv 128)"} $fp2si.bvhalf.bv128(rm: rmode, f: bvhalf) returns (bv128);
function {:builtin "(_ fp.to_sbv 160)"} $fp2si.bvhalf.bv160(rm: rmode, f: bvhalf) returns (bv160);
function {:builtin "(_ fp.to_sbv 256)"} $fp2si.bvhalf.bv256(rm: rmode, f: bvhalf) returns (bv256);
function {:builtin "(_ fp.to_sbv 1)"} $fp2si.bvfloat.bv1(rm: rmode, f: bvfloat) returns (bv1);
function {:builtin "(_ fp.to_sbv 5)"} $fp2si.bvfloat.bv5(rm: rmode, f: bvfloat) returns (bv5);
function {:builtin "(_ fp.to_sbv 6)"} $fp2si.bvfloat.bv6(rm: rmode, f: bvfloat) returns (bv6);
function {:builtin "(_ fp.to_sbv 8)"} $fp2si.bvfloat.bv8(rm: rmode, f: bvfloat) returns (bv8);
function {:builtin "(_ fp.to_sbv 16)"} $fp2si.bvfloat.bv16(rm: rmode, f: bvfloat) returns (bv16);
function {:builtin "(_ fp.to_sbv 24)"} $fp2si.bvfloat.bv24(rm: rmode, f: bvfloat) returns (bv24);
function {:builtin "(_ fp.to_sbv 32)"} $fp2si.bvfloat.bv32(rm: rmode, f: bvfloat) returns (bv32);
function {:builtin "(_ fp.to_sbv 33)"} $fp2si.bvfloat.bv33(rm: rmode, f: bvfloat) returns (bv33);
function {:builtin "(_ fp.to_sbv 40)"} $fp2si.bvfloat.bv40(rm: rmode, f: bvfloat) returns (bv40);
function {:builtin "(_ fp.to_sbv 48)"} $fp2si.bvfloat.bv48(rm: rmode, f: bvfloat) returns (bv48);
function {:builtin "(_ fp.to_sbv 56)"} $fp2si.bvfloat.bv56(rm: rmode, f: bvfloat) returns (bv56);
function {:builtin "(_ fp.to_sbv 64)"} $fp2si.bvfloat.bv64(rm: rmode, f: bvfloat) returns (bv64);
function {:builtin "(_ fp.to_sbv 80)"} $fp2si.bvfloat.bv80(rm: rmode, f: bvfloat) returns (bv80);
function {:builtin "(_ fp.to_sbv 88)"} $fp2si.bvfloat.bv88(rm: rmode, f: bvfloat) returns (bv88);
function {:builtin "(_ fp.to_sbv 96)"} $fp2si.bvfloat.bv96(rm: rmode, f: bvfloat) returns (bv96);
function {:builtin "(_ fp.to_sbv 128)"} $fp2si.bvfloat.bv128(rm: rmode, f: bvfloat) returns (bv128);
function {:builtin "(_ fp.to_sbv 160)"} $fp2si.bvfloat.bv160(rm: rmode, f: bvfloat) returns (bv160);
function {:builtin "(_ fp.to_sbv 256)"} $fp2si.bvfloat.bv256(rm: rmode, f: bvfloat) returns (bv256);
function {:builtin "(_ fp.to_sbv 1)"} $fp2si.bvdouble.bv1(rm: rmode, f: bvdouble) returns (bv1);
function {:builtin "(_ fp.to_sbv 5)"} $fp2si.bvdouble.bv5(rm: rmode, f: bvdouble) returns (bv5);
function {:builtin "(_ fp.to_sbv 6)"} $fp2si.bvdouble.bv6(rm: rmode, f: bvdouble) returns (bv6);
function {:builtin "(_ fp.to_sbv 8)"} $fp2si.bvdouble.bv8(rm: rmode, f: bvdouble) returns (bv8);
function {:builtin "(_ fp.to_sbv 16)"} $fp2si.bvdouble.bv16(rm: rmode, f: bvdouble) returns (bv16);
function {:builtin "(_ fp.to_sbv 24)"} $fp2si.bvdouble.bv24(rm: rmode, f: bvdouble) returns (bv24);
function {:builtin "(_ fp.to_sbv 32)"} $fp2si.bvdouble.bv32(rm: rmode, f: bvdouble) returns (bv32);
function {:builtin "(_ fp.to_sbv 33)"} $fp2si.bvdouble.bv33(rm: rmode, f: bvdouble) returns (bv33);
function {:builtin "(_ fp.to_sbv 40)"} $fp2si.bvdouble.bv40(rm: rmode, f: bvdouble) returns (bv40);
function {:builtin "(_ fp.to_sbv 48)"} $fp2si.bvdouble.bv48(rm: rmode, f: bvdouble) returns (bv48);
function {:builtin "(_ fp.to_sbv 56)"} $fp2si.bvdouble.bv56(rm: rmode, f: bvdouble) returns (bv56);
function {:builtin "(_ fp.to_sbv 64)"} $fp2si.bvdouble.bv64(rm: rmode, f: bvdouble) returns (bv64);
function {:builtin "(_ fp.to_sbv 80)"} $fp2si.bvdouble.bv80(rm: rmode, f: bvdouble) returns (bv80);
function {:builtin "(_ fp.to_sbv 88)"} $fp2si.bvdouble.bv88(rm: rmode, f: bvdouble) returns (bv88);
function {:builtin "(_ fp.to_sbv 96)"} $fp2si.bvdouble.bv96(rm: rmode, f: bvdouble) returns (bv96);
function {:builtin "(_ fp.to_sbv 128)"} $fp2si.bvdouble.bv128(rm: rmode, f: bvdouble) returns (bv128);
function {:builtin "(_ fp.to_sbv 160)"} $fp2si.bvdouble.bv160(rm: rmode, f: bvdouble) returns (bv160);
function {:builtin "(_ fp.to_sbv 256)"} $fp2si.bvdouble.bv256(rm: rmode, f: bvdouble) returns (bv256);
function {:builtin "(_ fp.to_sbv 1)"} $fp2si.bvlongdouble.bv1(rm: rmode, f: bvlongdouble) returns (bv1);
function {:builtin "(_ fp.to_sbv 5)"} $fp2si.bvlongdouble.bv5(rm: rmode, f: bvlongdouble) returns (bv5);
function {:builtin "(_ fp.to_sbv 6)"} $fp2si.bvlongdouble.bv6(rm: rmode, f: bvlongdouble) returns (bv6);
function {:builtin "(_ fp.to_sbv 8)"} $fp2si.bvlongdouble.bv8(rm: rmode, f: bvlongdouble) returns (bv8);
function {:builtin "(_ fp.to_sbv 16)"} $fp2si.bvlongdouble.bv16(rm: rmode, f: bvlongdouble) returns (bv16);
function {:builtin "(_ fp.to_sbv 24)"} $fp2si.bvlongdouble.bv24(rm: rmode, f: bvlongdouble) returns (bv24);
function {:builtin "(_ fp.to_sbv 32)"} $fp2si.bvlongdouble.bv32(rm: rmode, f: bvlongdouble) returns (bv32);
function {:builtin "(_ fp.to_sbv 33)"} $fp2si.bvlongdouble.bv33(rm: rmode, f: bvlongdouble) returns (bv33);
function {:builtin "(_ fp.to_sbv 40)"} $fp2si.bvlongdouble.bv40(rm: rmode, f: bvlongdouble) returns (bv40);
function {:builtin "(_ fp.to_sbv 48)"} $fp2si.bvlongdouble.bv48(rm: rmode, f: bvlongdouble) returns (bv48);
function {:builtin "(_ fp.to_sbv 56)"} $fp2si.bvlongdouble.bv56(rm: rmode, f: bvlongdouble) returns (bv56);
function {:builtin "(_ fp.to_sbv 64)"} $fp2si.bvlongdouble.bv64(rm: rmode, f: bvlongdouble) returns (bv64);
function {:builtin "(_ fp.to_sbv 80)"} $fp2si.bvlongdouble.bv80(rm: rmode, f: bvlongdouble) returns (bv80);
function {:builtin "(_ fp.to_sbv 88)"} $fp2si.bvlongdouble.bv88(rm: rmode, f: bvlongdouble) returns (bv88);
function {:builtin "(_ fp.to_sbv 96)"} $fp2si.bvlongdouble.bv96(rm: rmode, f: bvlongdouble) returns (bv96);
function {:builtin "(_ fp.to_sbv 128)"} $fp2si.bvlongdouble.bv128(rm: rmode, f: bvlongdouble) returns (bv128);
function {:builtin "(_ fp.to_sbv 160)"} $fp2si.bvlongdouble.bv160(rm: rmode, f: bvlongdouble) returns (bv160);
function {:builtin "(_ fp.to_sbv 256)"} $fp2si.bvlongdouble.bv256(rm: rmode, f: bvlongdouble) returns (bv256);
function {:builtin "(_ fp.to_ubv 1)"} $fp2ui.bvhalf.bv1(rm: rmode, f: bvhalf) returns (bv1);
function {:builtin "(_ fp.to_ubv 5)"} $fp2ui.bvhalf.bv5(rm: rmode, f: bvhalf) returns (bv5);
function {:builtin "(_ fp.to_ubv 6)"} $fp2ui.bvhalf.bv6(rm: rmode, f: bvhalf) returns (bv6);
function {:builtin "(_ fp.to_ubv 8)"} $fp2ui.bvhalf.bv8(rm: rmode, f: bvhalf) returns (bv8);
function {:builtin "(_ fp.to_ubv 16)"} $fp2ui.bvhalf.bv16(rm: rmode, f: bvhalf) returns (bv16);
function {:builtin "(_ fp.to_ubv 24)"} $fp2ui.bvhalf.bv24(rm: rmode, f: bvhalf) returns (bv24);
function {:builtin "(_ fp.to_ubv 32)"} $fp2ui.bvhalf.bv32(rm: rmode, f: bvhalf) returns (bv32);
function {:builtin "(_ fp.to_ubv 33)"} $fp2ui.bvhalf.bv33(rm: rmode, f: bvhalf) returns (bv33);
function {:builtin "(_ fp.to_ubv 40)"} $fp2ui.bvhalf.bv40(rm: rmode, f: bvhalf) returns (bv40);
function {:builtin "(_ fp.to_ubv 48)"} $fp2ui.bvhalf.bv48(rm: rmode, f: bvhalf) returns (bv48);
function {:builtin "(_ fp.to_ubv 56)"} $fp2ui.bvhalf.bv56(rm: rmode, f: bvhalf) returns (bv56);
function {:builtin "(_ fp.to_ubv 64)"} $fp2ui.bvhalf.bv64(rm: rmode, f: bvhalf) returns (bv64);
function {:builtin "(_ fp.to_ubv 80)"} $fp2ui.bvhalf.bv80(rm: rmode, f: bvhalf) returns (bv80);
function {:builtin "(_ fp.to_ubv 88)"} $fp2ui.bvhalf.bv88(rm: rmode, f: bvhalf) returns (bv88);
function {:builtin "(_ fp.to_ubv 96)"} $fp2ui.bvhalf.bv96(rm: rmode, f: bvhalf) returns (bv96);
function {:builtin "(_ fp.to_ubv 128)"} $fp2ui.bvhalf.bv128(rm: rmode, f: bvhalf) returns (bv128);
function {:builtin "(_ fp.to_ubv 160)"} $fp2ui.bvhalf.bv160(rm: rmode, f: bvhalf) returns (bv160);
function {:builtin "(_ fp.to_ubv 256)"} $fp2ui.bvhalf.bv256(rm: rmode, f: bvhalf) returns (bv256);
function {:builtin "(_ fp.to_ubv 1)"} $fp2ui.bvfloat.bv1(rm: rmode, f: bvfloat) returns (bv1);
function {:builtin "(_ fp.to_ubv 5)"} $fp2ui.bvfloat.bv5(rm: rmode, f: bvfloat) returns (bv5);
function {:builtin "(_ fp.to_ubv 6)"} $fp2ui.bvfloat.bv6(rm: rmode, f: bvfloat) returns (bv6);
function {:builtin "(_ fp.to_ubv 8)"} $fp2ui.bvfloat.bv8(rm: rmode, f: bvfloat) returns (bv8);
function {:builtin "(_ fp.to_ubv 16)"} $fp2ui.bvfloat.bv16(rm: rmode, f: bvfloat) returns (bv16);
function {:builtin "(_ fp.to_ubv 24)"} $fp2ui.bvfloat.bv24(rm: rmode, f: bvfloat) returns (bv24);
function {:builtin "(_ fp.to_ubv 32)"} $fp2ui.bvfloat.bv32(rm: rmode, f: bvfloat) returns (bv32);
function {:builtin "(_ fp.to_ubv 33)"} $fp2ui.bvfloat.bv33(rm: rmode, f: bvfloat) returns (bv33);
function {:builtin "(_ fp.to_ubv 40)"} $fp2ui.bvfloat.bv40(rm: rmode, f: bvfloat) returns (bv40);
function {:builtin "(_ fp.to_ubv 48)"} $fp2ui.bvfloat.bv48(rm: rmode, f: bvfloat) returns (bv48);
function {:builtin "(_ fp.to_ubv 56)"} $fp2ui.bvfloat.bv56(rm: rmode, f: bvfloat) returns (bv56);
function {:builtin "(_ fp.to_ubv 64)"} $fp2ui.bvfloat.bv64(rm: rmode, f: bvfloat) returns (bv64);
function {:builtin "(_ fp.to_ubv 80)"} $fp2ui.bvfloat.bv80(rm: rmode, f: bvfloat) returns (bv80);
function {:builtin "(_ fp.to_ubv 88)"} $fp2ui.bvfloat.bv88(rm: rmode, f: bvfloat) returns (bv88);
function {:builtin "(_ fp.to_ubv 96)"} $fp2ui.bvfloat.bv96(rm: rmode, f: bvfloat) returns (bv96);
function {:builtin "(_ fp.to_ubv 128)"} $fp2ui.bvfloat.bv128(rm: rmode, f: bvfloat) returns (bv128);
function {:builtin "(_ fp.to_ubv 160)"} $fp2ui.bvfloat.bv160(rm: rmode, f: bvfloat) returns (bv160);
function {:builtin "(_ fp.to_ubv 256)"} $fp2ui.bvfloat.bv256(rm: rmode, f: bvfloat) returns (bv256);
function {:builtin "(_ fp.to_ubv 1)"} $fp2ui.bvdouble.bv1(rm: rmode, f: bvdouble) returns (bv1);
function {:builtin "(_ fp.to_ubv 5)"} $fp2ui.bvdouble.bv5(rm: rmode, f: bvdouble) returns (bv5);
function {:builtin "(_ fp.to_ubv 6)"} $fp2ui.bvdouble.bv6(rm: rmode, f: bvdouble) returns (bv6);
function {:builtin "(_ fp.to_ubv 8)"} $fp2ui.bvdouble.bv8(rm: rmode, f: bvdouble) returns (bv8);
function {:builtin "(_ fp.to_ubv 16)"} $fp2ui.bvdouble.bv16(rm: rmode, f: bvdouble) returns (bv16);
function {:builtin "(_ fp.to_ubv 24)"} $fp2ui.bvdouble.bv24(rm: rmode, f: bvdouble) returns (bv24);
function {:builtin "(_ fp.to_ubv 32)"} $fp2ui.bvdouble.bv32(rm: rmode, f: bvdouble) returns (bv32);
function {:builtin "(_ fp.to_ubv 33)"} $fp2ui.bvdouble.bv33(rm: rmode, f: bvdouble) returns (bv33);
function {:builtin "(_ fp.to_ubv 40)"} $fp2ui.bvdouble.bv40(rm: rmode, f: bvdouble) returns (bv40);
function {:builtin "(_ fp.to_ubv 48)"} $fp2ui.bvdouble.bv48(rm: rmode, f: bvdouble) returns (bv48);
function {:builtin "(_ fp.to_ubv 56)"} $fp2ui.bvdouble.bv56(rm: rmode, f: bvdouble) returns (bv56);
function {:builtin "(_ fp.to_ubv 64)"} $fp2ui.bvdouble.bv64(rm: rmode, f: bvdouble) returns (bv64);
function {:builtin "(_ fp.to_ubv 80)"} $fp2ui.bvdouble.bv80(rm: rmode, f: bvdouble) returns (bv80);
function {:builtin "(_ fp.to_ubv 88)"} $fp2ui.bvdouble.bv88(rm: rmode, f: bvdouble) returns (bv88);
function {:builtin "(_ fp.to_ubv 96)"} $fp2ui.bvdouble.bv96(rm: rmode, f: bvdouble) returns (bv96);
function {:builtin "(_ fp.to_ubv 128)"} $fp2ui.bvdouble.bv128(rm: rmode, f: bvdouble) returns (bv128);
function {:builtin "(_ fp.to_ubv 160)"} $fp2ui.bvdouble.bv160(rm: rmode, f: bvdouble) returns (bv160);
function {:builtin "(_ fp.to_ubv 256)"} $fp2ui.bvdouble.bv256(rm: rmode, f: bvdouble) returns (bv256);
function {:builtin "(_ fp.to_ubv 1)"} $fp2ui.bvlongdouble.bv1(rm: rmode, f: bvlongdouble) returns (bv1);
function {:builtin "(_ fp.to_ubv 5)"} $fp2ui.bvlongdouble.bv5(rm: rmode, f: bvlongdouble) returns (bv5);
function {:builtin "(_ fp.to_ubv 6)"} $fp2ui.bvlongdouble.bv6(rm: rmode, f: bvlongdouble) returns (bv6);
function {:builtin "(_ fp.to_ubv 8)"} $fp2ui.bvlongdouble.bv8(rm: rmode, f: bvlongdouble) returns (bv8);
function {:builtin "(_ fp.to_ubv 16)"} $fp2ui.bvlongdouble.bv16(rm: rmode, f: bvlongdouble) returns (bv16);
function {:builtin "(_ fp.to_ubv 24)"} $fp2ui.bvlongdouble.bv24(rm: rmode, f: bvlongdouble) returns (bv24);
function {:builtin "(_ fp.to_ubv 32)"} $fp2ui.bvlongdouble.bv32(rm: rmode, f: bvlongdouble) returns (bv32);
function {:builtin "(_ fp.to_ubv 33)"} $fp2ui.bvlongdouble.bv33(rm: rmode, f: bvlongdouble) returns (bv33);
function {:builtin "(_ fp.to_ubv 40)"} $fp2ui.bvlongdouble.bv40(rm: rmode, f: bvlongdouble) returns (bv40);
function {:builtin "(_ fp.to_ubv 48)"} $fp2ui.bvlongdouble.bv48(rm: rmode, f: bvlongdouble) returns (bv48);
function {:builtin "(_ fp.to_ubv 56)"} $fp2ui.bvlongdouble.bv56(rm: rmode, f: bvlongdouble) returns (bv56);
function {:builtin "(_ fp.to_ubv 64)"} $fp2ui.bvlongdouble.bv64(rm: rmode, f: bvlongdouble) returns (bv64);
function {:builtin "(_ fp.to_ubv 80)"} $fp2ui.bvlongdouble.bv80(rm: rmode, f: bvlongdouble) returns (bv80);
function {:builtin "(_ fp.to_ubv 88)"} $fp2ui.bvlongdouble.bv88(rm: rmode, f: bvlongdouble) returns (bv88);
function {:builtin "(_ fp.to_ubv 96)"} $fp2ui.bvlongdouble.bv96(rm: rmode, f: bvlongdouble) returns (bv96);
function {:builtin "(_ fp.to_ubv 128)"} $fp2ui.bvlongdouble.bv128(rm: rmode, f: bvlongdouble) returns (bv128);
function {:builtin "(_ fp.to_ubv 160)"} $fp2ui.bvlongdouble.bv160(rm: rmode, f: bvlongdouble) returns (bv160);
function {:builtin "(_ fp.to_ubv 256)"} $fp2ui.bvlongdouble.bv256(rm: rmode, f: bvlongdouble) returns (bv256);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv1.bvhalf(rm: rmode, i: bv1) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv5.bvhalf(rm: rmode, i: bv5) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv6.bvhalf(rm: rmode, i: bv6) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv8.bvhalf(rm: rmode, i: bv8) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv16.bvhalf(rm: rmode, i: bv16) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv24.bvhalf(rm: rmode, i: bv24) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv32.bvhalf(rm: rmode, i: bv32) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv33.bvhalf(rm: rmode, i: bv33) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv40.bvhalf(rm: rmode, i: bv40) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv48.bvhalf(rm: rmode, i: bv48) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv56.bvhalf(rm: rmode, i: bv56) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv64.bvhalf(rm: rmode, i: bv64) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv80.bvhalf(rm: rmode, i: bv80) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv88.bvhalf(rm: rmode, i: bv88) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv96.bvhalf(rm: rmode, i: bv96) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv128.bvhalf(rm: rmode, i: bv128) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv160.bvhalf(rm: rmode, i: bv160) returns (bvhalf);
function {:builtin "(_ to_fp 5 11)"} $si2fp.bv256.bvhalf(rm: rmode, i: bv256) returns (bvhalf);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv1.bvfloat(rm: rmode, i: bv1) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv5.bvfloat(rm: rmode, i: bv5) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv6.bvfloat(rm: rmode, i: bv6) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv8.bvfloat(rm: rmode, i: bv8) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv16.bvfloat(rm: rmode, i: bv16) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv24.bvfloat(rm: rmode, i: bv24) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv32.bvfloat(rm: rmode, i: bv32) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv33.bvfloat(rm: rmode, i: bv33) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv40.bvfloat(rm: rmode, i: bv40) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv48.bvfloat(rm: rmode, i: bv48) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv56.bvfloat(rm: rmode, i: bv56) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv64.bvfloat(rm: rmode, i: bv64) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv80.bvfloat(rm: rmode, i: bv80) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv88.bvfloat(rm: rmode, i: bv88) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv96.bvfloat(rm: rmode, i: bv96) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv128.bvfloat(rm: rmode, i: bv128) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv160.bvfloat(rm: rmode, i: bv160) returns (bvfloat);
function {:builtin "(_ to_fp 8 24)"} $si2fp.bv256.bvfloat(rm: rmode, i: bv256) returns (bvfloat);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv1.bvdouble(rm: rmode, i: bv1) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv5.bvdouble(rm: rmode, i: bv5) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv6.bvdouble(rm: rmode, i: bv6) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv8.bvdouble(rm: rmode, i: bv8) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv16.bvdouble(rm: rmode, i: bv16) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv24.bvdouble(rm: rmode, i: bv24) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv32.bvdouble(rm: rmode, i: bv32) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv33.bvdouble(rm: rmode, i: bv33) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv40.bvdouble(rm: rmode, i: bv40) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv48.bvdouble(rm: rmode, i: bv48) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv56.bvdouble(rm: rmode, i: bv56) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv64.bvdouble(rm: rmode, i: bv64) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv80.bvdouble(rm: rmode, i: bv80) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv88.bvdouble(rm: rmode, i: bv88) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv96.bvdouble(rm: rmode, i: bv96) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv128.bvdouble(rm: rmode, i: bv128) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv160.bvdouble(rm: rmode, i: bv160) returns (bvdouble);
function {:builtin "(_ to_fp 11 53)"} $si2fp.bv256.bvdouble(rm: rmode, i: bv256) returns (bvdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv1.bvlongdouble(rm: rmode, i: bv1) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv5.bvlongdouble(rm: rmode, i: bv5) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv6.bvlongdouble(rm: rmode, i: bv6) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv8.bvlongdouble(rm: rmode, i: bv8) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv16.bvlongdouble(rm: rmode, i: bv16) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv24.bvlongdouble(rm: rmode, i: bv24) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv32.bvlongdouble(rm: rmode, i: bv32) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv33.bvlongdouble(rm: rmode, i: bv33) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv40.bvlongdouble(rm: rmode, i: bv40) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv48.bvlongdouble(rm: rmode, i: bv48) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv56.bvlongdouble(rm: rmode, i: bv56) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv64.bvlongdouble(rm: rmode, i: bv64) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv80.bvlongdouble(rm: rmode, i: bv80) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv88.bvlongdouble(rm: rmode, i: bv88) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv96.bvlongdouble(rm: rmode, i: bv96) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv128.bvlongdouble(rm: rmode, i: bv128) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv160.bvlongdouble(rm: rmode, i: bv160) returns (bvlongdouble);
function {:builtin "(_ to_fp 15 65)"} $si2fp.bv256.bvlongdouble(rm: rmode, i: bv256) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv1.bvhalf(rm: rmode, i: bv1) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv5.bvhalf(rm: rmode, i: bv5) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv6.bvhalf(rm: rmode, i: bv6) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv8.bvhalf(rm: rmode, i: bv8) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv16.bvhalf(rm: rmode, i: bv16) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv24.bvhalf(rm: rmode, i: bv24) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv32.bvhalf(rm: rmode, i: bv32) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv33.bvhalf(rm: rmode, i: bv33) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv40.bvhalf(rm: rmode, i: bv40) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv48.bvhalf(rm: rmode, i: bv48) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv56.bvhalf(rm: rmode, i: bv56) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv64.bvhalf(rm: rmode, i: bv64) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv80.bvhalf(rm: rmode, i: bv80) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv88.bvhalf(rm: rmode, i: bv88) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv96.bvhalf(rm: rmode, i: bv96) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv128.bvhalf(rm: rmode, i: bv128) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv160.bvhalf(rm: rmode, i: bv160) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 5 11)"} $ui2fp.bv256.bvhalf(rm: rmode, i: bv256) returns (bvhalf);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv1.bvfloat(rm: rmode, i: bv1) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv5.bvfloat(rm: rmode, i: bv5) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv6.bvfloat(rm: rmode, i: bv6) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv8.bvfloat(rm: rmode, i: bv8) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv16.bvfloat(rm: rmode, i: bv16) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv24.bvfloat(rm: rmode, i: bv24) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv32.bvfloat(rm: rmode, i: bv32) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv33.bvfloat(rm: rmode, i: bv33) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv40.bvfloat(rm: rmode, i: bv40) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv48.bvfloat(rm: rmode, i: bv48) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv56.bvfloat(rm: rmode, i: bv56) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv64.bvfloat(rm: rmode, i: bv64) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv80.bvfloat(rm: rmode, i: bv80) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv88.bvfloat(rm: rmode, i: bv88) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv96.bvfloat(rm: rmode, i: bv96) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv128.bvfloat(rm: rmode, i: bv128) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv160.bvfloat(rm: rmode, i: bv160) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 8 24)"} $ui2fp.bv256.bvfloat(rm: rmode, i: bv256) returns (bvfloat);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv1.bvdouble(rm: rmode, i: bv1) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv5.bvdouble(rm: rmode, i: bv5) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv6.bvdouble(rm: rmode, i: bv6) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv8.bvdouble(rm: rmode, i: bv8) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv16.bvdouble(rm: rmode, i: bv16) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv24.bvdouble(rm: rmode, i: bv24) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv32.bvdouble(rm: rmode, i: bv32) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv33.bvdouble(rm: rmode, i: bv33) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv40.bvdouble(rm: rmode, i: bv40) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv48.bvdouble(rm: rmode, i: bv48) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv56.bvdouble(rm: rmode, i: bv56) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv64.bvdouble(rm: rmode, i: bv64) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv80.bvdouble(rm: rmode, i: bv80) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv88.bvdouble(rm: rmode, i: bv88) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv96.bvdouble(rm: rmode, i: bv96) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv128.bvdouble(rm: rmode, i: bv128) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv160.bvdouble(rm: rmode, i: bv160) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 11 53)"} $ui2fp.bv256.bvdouble(rm: rmode, i: bv256) returns (bvdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv1.bvlongdouble(rm: rmode, i: bv1) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv5.bvlongdouble(rm: rmode, i: bv5) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv6.bvlongdouble(rm: rmode, i: bv6) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv8.bvlongdouble(rm: rmode, i: bv8) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv16.bvlongdouble(rm: rmode, i: bv16) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv24.bvlongdouble(rm: rmode, i: bv24) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv32.bvlongdouble(rm: rmode, i: bv32) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv33.bvlongdouble(rm: rmode, i: bv33) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv40.bvlongdouble(rm: rmode, i: bv40) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv48.bvlongdouble(rm: rmode, i: bv48) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv56.bvlongdouble(rm: rmode, i: bv56) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv64.bvlongdouble(rm: rmode, i: bv64) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv80.bvlongdouble(rm: rmode, i: bv80) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv88.bvlongdouble(rm: rmode, i: bv88) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv96.bvlongdouble(rm: rmode, i: bv96) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv128.bvlongdouble(rm: rmode, i: bv128) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv160.bvlongdouble(rm: rmode, i: bv160) returns (bvlongdouble);
function {:builtin "(_ to_fp_unsigned 15 65)"} $ui2fp.bv256.bvlongdouble(rm: rmode, i: bv256) returns (bvlongdouble);
// Floating-point conversion
function {:builtin "(_ to_fp 8 24)"} $fpext.bvhalf.bvfloat(rm: rmode, f: bvhalf) returns (bvfloat);
function {:builtin "(_ to_fp 11 53)"} $fpext.bvhalf.bvdouble(rm: rmode, f: bvhalf) returns (bvdouble);
function {:builtin "(_ to_fp 15 65)"} $fpext.bvhalf.bvlongdouble(rm: rmode, f: bvhalf) returns (bvlongdouble);
function {:builtin "(_ to_fp 5 11)"} $fptrunc.bvfloat.bvhalf(rm: rmode, f: bvfloat) returns (bvhalf);
function {:builtin "(_ to_fp 11 53)"} $fpext.bvfloat.bvdouble(rm: rmode, f: bvfloat) returns (bvdouble);
function {:builtin "(_ to_fp 15 65)"} $fpext.bvfloat.bvlongdouble(rm: rmode, f: bvfloat) returns (bvlongdouble);
function {:builtin "(_ to_fp 5 11)"} $fptrunc.bvdouble.bvhalf(rm: rmode, f: bvdouble) returns (bvhalf);
function {:builtin "(_ to_fp 8 24)"} $fptrunc.bvdouble.bvfloat(rm: rmode, f: bvdouble) returns (bvfloat);
function {:builtin "(_ to_fp 15 65)"} $fpext.bvdouble.bvlongdouble(rm: rmode, f: bvdouble) returns (bvlongdouble);
function {:builtin "(_ to_fp 5 11)"} $fptrunc.bvlongdouble.bvhalf(rm: rmode, f: bvlongdouble) returns (bvhalf);
function {:builtin "(_ to_fp 8 24)"} $fptrunc.bvlongdouble.bvfloat(rm: rmode, f: bvlongdouble) returns (bvfloat);
function {:builtin "(_ to_fp 11 53)"} $fptrunc.bvlongdouble.bvdouble(rm: rmode, f: bvlongdouble) returns (bvdouble);
// Floating-point load/store operations
function {:inline} $load.bvhalf(M: [ref] bvhalf, p: ref) returns (bvhalf) { M[p] }
function {:inline} $store.bvhalf(M: [ref] bvhalf, p: ref, f: bvhalf) returns ([ref] bvhalf) { M[p := f] }
function {:inline} $load.bytes.bvhalf(M: [ref] bv8, p: ref) returns (bvhalf) { $bitcast.bv16.bvhalf($load.bytes.bv16(M, p)) }
function {:inline} $store.bytes.bvhalf(M: [ref] bv8, p: ref, f: bvhalf) returns ([ref] bv8) { $store.bytes.bv16(M, p, $bitcast.bvhalf.bv16(f)) }
function {:inline} $load.bvfloat(M: [ref] bvfloat, p: ref) returns (bvfloat) { M[p] }
function {:inline} $store.bvfloat(M: [ref] bvfloat, p: ref, f: bvfloat) returns ([ref] bvfloat) { M[p := f] }
function {:inline} $load.bytes.bvfloat(M: [ref] bv8, p: ref) returns (bvfloat) { $bitcast.bv32.bvfloat($load.bytes.bv32(M, p)) }
function {:inline} $store.bytes.bvfloat(M: [ref] bv8, p: ref, f: bvfloat) returns ([ref] bv8) { $store.bytes.bv32(M, p, $bitcast.bvfloat.bv32(f)) }
function {:inline} $load.bvdouble(M: [ref] bvdouble, p: ref) returns (bvdouble) { M[p] }
function {:inline} $store.bvdouble(M: [ref] bvdouble, p: ref, f: bvdouble) returns ([ref] bvdouble) { M[p := f] }
function {:inline} $load.bytes.bvdouble(M: [ref] bv8, p: ref) returns (bvdouble) { $bitcast.bv64.bvdouble($load.bytes.bv64(M, p)) }
function {:inline} $store.bytes.bvdouble(M: [ref] bv8, p: ref, f: bvdouble) returns ([ref] bv8) { $store.bytes.bv64(M, p, $bitcast.bvdouble.bv64(f)) }
function {:inline} $load.bvlongdouble(M: [ref] bvlongdouble, p: ref) returns (bvlongdouble) { M[p] }
function {:inline} $store.bvlongdouble(M: [ref] bvlongdouble, p: ref, f: bvlongdouble) returns ([ref] bvlongdouble) { M[p := f] }
function {:inline} $load.bytes.bvlongdouble(M: [ref] bv8, p: ref) returns (bvlongdouble) { $bitcast.bv80.bvlongdouble($load.bytes.bv80(M, p)) }
function {:inline} $store.bytes.bvlongdouble(M: [ref] bv8, p: ref, f: bvlongdouble) returns ([ref] bv8) { $store.bytes.bv80(M, p, $bitcast.bvlongdouble.bv80(f)) }
function $extractvalue.bvhalf(p: ref, i: int) returns (bvhalf);
function $extractvalue.bvfloat(p: ref, i: int) returns (bvfloat);
function $extractvalue.bvdouble(p: ref, i: int) returns (bvdouble);
function $extractvalue.bvlongdouble(p: ref, i: int) returns (bvlongdouble);
const main: ref;
axiom (main == $sub.ref(0, 1032));
procedure {:entrypoint} main()
  returns ($r: bv32)
{
  var $p0: ref;
  var $i1: bv32;
  var $f2: bvfloat;
  var $f3: bvdouble;
  var $i4: bv1;
  var $f5: bvdouble;
  var $i6: bv1;
  var $i7: bv1;
  var $i8: bv1;
  var $i9: bv64;
  var $f10: bvfloat;
  var $i11: bv64;
  var $i12: bv64;
  var $f13: bvfloat;
  var $i14: bv1;
  var $i17: bv64;
  var $i18: bv1;
  var $i15: bv64;
  var $i16: bv1;
  var $i19: bv64;
  var $i20: bv64;
  var $f21: bvfloat;
  var $i22: bv64;
  var $i23: bv32;
  var $i24: bv1;
  var $f25: bvdouble;
  var $f26: bvdouble;
  var $f27: bvfloat;
  var $i28: bv1;
  var $i29: bv32;
  var $i30: bv8;
  var $i31: bv32;
  var $i32: bv1;
  var $i33: bv32;
  var $i34: bv32;
  var $i36: bv32;
  var $i37: bv32;
  var $i35: bv32;
  var $i38: bv64;
  var $i39: bv64;
  var $i40: bv32;
  var $i41: bv1;
  var $f43: bvfloat;
  var $f42: bvfloat;
  var $f44: bvfloat;
  var $i45: bv32;
  var $i46: bv1;
  var $i47: bv32;
  var $i48: bv64;
  var $i49: bv64;
  var $i50: bv32;
  var $f51: bvfloat;
  var $i52: bv64;
  var $p53: ref;
  var $i54: bv32;
  var $i55: bv1;
  var $i56: bv32;
  var $i57: bv1;
  var $i58: bv1;
  var $i59: bv64;
  var $p60: ref;
  var $i61: bv64;
  var $i62: bv64;
  var $p63: ref;
  var $i64: bv64;
  var $i65: bv1;
  var $i66: bv32;
  var $i67: bv32;
  var $f68: bvfloat;
  var $f69: bvfloat;
  var $f70: bvfloat;
  var $f71: bvfloat;
  var $f72: bvfloat;
  var $i73: bv64;
  var $i74: bv1;
$bb0:
  call $initialize();
  assume {:sourceloc "example.c", 14, 11} true;
  assume {:verifier.code 1} true;
  call {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
  assume {:verifier.code 0} true;
  call $p0 := $alloc($mul.ref(200, $bv2int.64($zext.bv32.bv64(1bv32))));
  assume {:sourceloc "example.c", 14, 11} true;
  assume {:verifier.code 1} true;
  call $i1 := __VERIFIER_nondet_uint();
  call {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_bv32($i1);
  call {:cexpr "y"} boogie_si_record_bv32($i1);
  assume {:sourceloc "example.c", 15, 16} true;
  assume {:verifier.code 1} true;
  call $f2 := __VERIFIER_nondet_float();
  call {:cexpr "smack:ext:__VERIFIER_nondet_float"} boogie_si_record_bvfloat($f2);
  call {:cexpr "prob"} boogie_si_record_bvfloat($f2);
  assume {:sourceloc "example.c", 18, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "example.c", 18, 3} true;
  assume {:verifier.code 0} true;
  $f3 := $fpext.bvfloat.bvdouble($rmode, $f2);
  assume {:sourceloc "example.c", 18, 3} true;
  assume {:verifier.code 0} true;
  $i4 := (if $fogt.bvdouble.bool($f3, 0x6.8DB8BAC710CB4e-4f53e11) then 1bv1 else 0bv1);
  assume {:sourceloc "example.c", 18, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i4} true;
  goto $bb2, $bb4;
$bb2:
  assume {:sourceloc "example.c", 18, 3} true;
  assume {:verifier.code 0} true;
  assume ($i4 == 1bv1);
  goto $bb3;
$bb3:
  assume {:sourceloc "example.c", 18, 3} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume !(($i4 == 1bv1));
  assume {:sourceloc "example.c", 18, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume(0bv32);
  assume {:sourceloc "example.c", 18, 3} true;
  assume {:verifier.code 0} true;
  goto $bb3;
$bb5:
  assume {:sourceloc "example.c", 19, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "example.c", 19, 3} true;
  assume {:verifier.code 0} true;
  $f5 := $fpext.bvfloat.bvdouble($rmode, $f2);
  assume {:sourceloc "example.c", 19, 3} true;
  assume {:verifier.code 0} true;
  $i6 := (if $fole.bvdouble.bool($f5, 0x1.0000000000000e0f53e11) then 1bv1 else 0bv1);
  assume {:sourceloc "example.c", 19, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  goto $bb7, $bb9;
$bb7:
  assume {:sourceloc "example.c", 19, 3} true;
  assume {:verifier.code 0} true;
  assume ($i6 == 1bv1);
  goto $bb8;
$bb8:
  assume {:sourceloc "example.c", 19, 3} true;
  assume {:verifier.code 0} true;
  goto $bb10;
$bb9:
  assume !(($i6 == 1bv1));
  assume {:sourceloc "example.c", 19, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume(0bv32);
  assume {:sourceloc "example.c", 19, 3} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb10:
  assume {:sourceloc "example.c", 21, 3} true;
  assume {:verifier.code 0} true;
  goto $bb11;
$bb11:
  assume {:sourceloc "example.c", 21, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $sgt.bv32($i1, 0bv32);
  assume {:sourceloc "example.c", 21, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  goto $bb12, $bb14;
$bb12:
  assume {:sourceloc "example.c", 21, 3} true;
  assume {:verifier.code 0} true;
  assume ($i7 == 1bv1);
  goto $bb13;
$bb13:
  assume {:sourceloc "example.c", 21, 3} true;
  assume {:verifier.code 0} true;
  goto $bb15;
$bb14:
  assume !(($i7 == 1bv1));
  assume {:sourceloc "example.c", 21, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume(0bv32);
  assume {:sourceloc "example.c", 21, 3} true;
  assume {:verifier.code 0} true;
  goto $bb13;
$bb15:
  assume {:sourceloc "example.c", 22, 3} true;
  assume {:verifier.code 0} true;
  goto $bb16;
$bb16:
  assume {:sourceloc "example.c", 22, 3} true;
  assume {:verifier.code 0} true;
  $i8 := $sle.bv32($i1, 1000bv32);
  assume {:sourceloc "example.c", 22, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i8} true;
  goto $bb17, $bb19;
$bb17:
  assume {:sourceloc "example.c", 22, 3} true;
  assume {:verifier.code 0} true;
  assume ($i8 == 1bv1);
  goto $bb18;
$bb18:
  assume {:sourceloc "example.c", 22, 3} true;
  assume {:verifier.code 0} true;
  goto $bb20;
$bb19:
  assume !(($i8 == 1bv1));
  assume {:sourceloc "example.c", 22, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume(0bv32);
  assume {:sourceloc "example.c", 22, 3} true;
  assume {:verifier.code 0} true;
  goto $bb18;
$bb20:
  assume true;
  assume {:sourceloc "example.c", 32, 3} true;
  assume {:verifier.code 0} true;
  $i9, $f10, $i11, $i12 := 25bv64, 0x0.000000e-32f24e8, $sub.bv64(0bv64, 1bv64), 0bv64;
  goto $bb21;
$bb21:
  assume {:sourceloc "example.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 32, 34} true;
  assume {:verifier.code 0} true;
  $f13 := $fmul.bvfloat($rmode, 0xC.CCCCDe-1f24e8, $f2);
  assume {:sourceloc "example.c", 32, 20} true;
  assume {:verifier.code 0} true;
  $i14 := (if $fole.bvfloat.bool($f10, $f13) then 1bv1 else 0bv1);
  assume {:sourceloc "example.c", 32, 42} true;
  assume {:verifier.code 0} true;
  $i15, $i16 := $i9, 0bv1;
  assume {:branchcond $i14} true;
  goto $bb22, $bb23;
$bb22:
  assume ($i14 == 1bv1);
  assume {:sourceloc "example.c", 32, 54} true;
  assume {:verifier.code 0} true;
  $i17 := $add.bv64($i9, $sub.bv64(0bv64, 1bv64));
  call {:cexpr "UNROLLING"} boogie_si_record_bv64($i17);
  assume {:sourceloc "example.c", 32, 42} true;
  assume {:verifier.code 0} true;
  $i18 := $ne.bv64($i9, 0bv64);
  assume {:verifier.code 0} true;
  $i15, $i16 := $i17, $i18;
  goto $bb24;
$bb23:
  assume {:sourceloc "example.c", 32, 42} true;
  assume {:verifier.code 0} true;
  assume !(($i14 == 1bv1));
  goto $bb24;
$bb24:
  assume {:sourceloc "example.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 32, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i16} true;
  goto $bb25, $bb26;
$bb25:
  assume ($i16 == 1bv1);
  assume {:sourceloc "example.c", 36, 16} true;
  assume {:verifier.code 0} true;
  $i19 := $add.bv64($i11, 1bv64);
  call {:cexpr "path_index"} boogie_si_record_bv64($i19);
  assume {:sourceloc "example.c", 43, 10} true;
  assume {:verifier.code 0} true;
  $i20, $f21, $i22, $i23 := 0bv64, 0x1.000000e0f24e8, 0bv64, 0bv32;
  goto $bb27;
$bb26:
  assume !(($i16 == 1bv1));
  assume {:sourceloc "example.c", 59, 8} true;
  assume {:verifier.code 0} true;
  $i54 := 0bv32;
  goto $bb40;
$bb27:
  assume {:sourceloc "example.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 43, 23} true;
  assume {:verifier.code 0} true;
  $i24 := $slt.bv32($i23, 5bv32);
  assume {:sourceloc "example.c", 43, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i24} true;
  goto $bb28, $bb29;
$bb28:
  assume ($i24 == 1bv1);
  assume {:sourceloc "example.c", 45, 21} true;
  assume {:verifier.code 1} true;
  call $f25 := __VERIFIER_nondet_double();
  call {:cexpr "smack:ext:__VERIFIER_nondet_double"} boogie_si_record_bvdouble($f25);
  assume {:sourceloc "example.c", 45, 48} true;
  assume {:verifier.code 0} true;
  $f26 := $fdiv.bvdouble($rmode, $f25, 0x7.FFFFFFF000000e7f53e11);
  assume {:sourceloc "example.c", 45, 13} true;
  assume {:verifier.code 0} true;
  $f27 := $fptrunc.bvdouble.bvfloat($rmode, $f26);
  assume {:sourceloc "example.c", 45, 63} true;
  assume {:verifier.code 0} true;
  $i28 := (if $foge.bvfloat.bool($f27, $f2) then 1bv1 else 0bv1);
  assume {:sourceloc "example.c", 45, 11} true;
  assume {:verifier.code 0} true;
  $i29 := (if ($i28 == 1bv1) then 1bv32 else 0bv32);
  assume {:sourceloc "example.c", 45, 11} true;
  assume {:verifier.code 0} true;
  $i30 := $trunc.bv32.bv8($i29);
  call {:cexpr "flip"} boogie_si_record_bv8($i30);
  assume {:sourceloc "example.c", 46, 18} true;
  assume {:verifier.code 0} true;
  $i31 := $zext.bv8.bv32($i30);
  assume {:sourceloc "example.c", 46, 23} true;
  assume {:verifier.code 0} true;
  $i32 := $eq.bv32($i31, 1bv32);
  assume {:sourceloc "example.c", 46, 17} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i32} true;
  goto $bb30, $bb31;
$bb29:
  assume !(($i24 == 1bv1));
  assume {:sourceloc "example.c", 53, 14} true;
  assume {:verifier.code 0} true;
  $f51 := $fadd.bvfloat($rmode, $f10, $f21);
  call {:cexpr "sum_prob"} boogie_si_record_bvfloat($f51);
  assume {:sourceloc "example.c", 54, 18} true;
  assume {:verifier.code 0} true;
  $i52 := $add.bv64($i12, $i20);
  call {:cexpr "expected_sum"} boogie_si_record_bv64($i52);
  assume {:sourceloc "example.c", 55, 5} true;
  assume {:verifier.code 0} true;
  $p53 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref($bv2int.64($i19), 8));
  assume {:sourceloc "example.c", 55, 23} true;
  assume {:verifier.code 0} true;
  $M.0 := $store.bv64($M.0, $p53, $i22);
  assume {:sourceloc "example.c", 32, 3} true;
  assume {:verifier.code 0} true;
  $i9, $f10, $i11, $i12 := $i15, $f51, $i19, $i52;
  goto $bb21;
$bb30:
  assume ($i32 == 1bv1);
  assume {:sourceloc "example.c", 46, 40} true;
  assume {:verifier.code 0} true;
  $i33 := $sub.bv32(63bv32, $i23);
  assume {:sourceloc "example.c", 46, 33} true;
  assume {:verifier.code 0} true;
  $i34 := $shl.bv32(1bv32, $i33);
  assume {:sourceloc "example.c", 46, 17} true;
  assume {:verifier.code 0} true;
  $i35 := $i34;
  goto $bb32;
$bb31:
  assume !(($i32 == 1bv1));
  assume {:sourceloc "example.c", 46, 56} true;
  assume {:verifier.code 0} true;
  $i36 := $sub.bv32(63bv32, $i23);
  assume {:sourceloc "example.c", 46, 49} true;
  assume {:verifier.code 0} true;
  $i37 := $shl.bv32(0bv32, $i36);
  assume {:sourceloc "example.c", 46, 17} true;
  assume {:verifier.code 0} true;
  $i35 := $i37;
  goto $bb32;
$bb32:
  assume {:sourceloc "example.c", 46, 17} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 46, 17} true;
  assume {:verifier.code 0} true;
  $i38 := $sext.bv32.bv64($i35);
  assume {:sourceloc "example.c", 46, 14} true;
  assume {:verifier.code 0} true;
  $i39 := $add.bv64($i22, $i38);
  call {:cexpr "__ptid"} boogie_si_record_bv64($i39);
  assume {:sourceloc "example.c", 47, 24} true;
  assume {:verifier.code 0} true;
  $i40 := $zext.bv8.bv32($i30);
  assume {:sourceloc "example.c", 47, 29} true;
  assume {:verifier.code 0} true;
  $i41 := $eq.bv32($i40, 1bv32);
  assume {:sourceloc "example.c", 47, 23} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i41} true;
  goto $bb33, $bb34;
$bb33:
  assume ($i41 == 1bv1);
  assume {:sourceloc "example.c", 47, 23} true;
  assume {:verifier.code 0} true;
  $f42 := $f2;
  goto $bb35;
$bb34:
  assume !(($i41 == 1bv1));
  assume {:sourceloc "example.c", 47, 47} true;
  assume {:verifier.code 0} true;
  $f43 := $fsub.bvfloat($rmode, 0x1.000000e0f24e8, $f2);
  assume {:sourceloc "example.c", 47, 23} true;
  assume {:verifier.code 0} true;
  $f42 := $f43;
  goto $bb35;
$bb35:
  assume {:sourceloc "example.c", 47, 23} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 47, 20} true;
  assume {:verifier.code 0} true;
  $f44 := $fmul.bvfloat($rmode, $f21, $f42);
  call {:cexpr "product_prob"} boogie_si_record_bvfloat($f44);
  assume {:sourceloc "example.c", 48, 26} true;
  assume {:verifier.code 0} true;
  $i45 := $zext.bv8.bv32($i30);
  assume {:sourceloc "example.c", 48, 31} true;
  assume {:verifier.code 0} true;
  $i46 := $eq.bv32($i45, 1bv32);
  assume {:sourceloc "example.c", 48, 25} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i46} true;
  goto $bb36, $bb37;
$bb36:
  assume ($i46 == 1bv1);
  assume {:sourceloc "example.c", 48, 25} true;
  assume {:verifier.code 0} true;
  $i47 := $i1;
  goto $bb38;
$bb37:
  assume !(($i46 == 1bv1));
  assume {:sourceloc "example.c", 48, 25} true;
  assume {:verifier.code 0} true;
  $i47 := 0bv32;
  goto $bb38;
$bb38:
  assume {:sourceloc "example.c", 48, 25} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 48, 25} true;
  assume {:verifier.code 0} true;
  $i48 := $sext.bv32.bv64($i47);
  assume {:sourceloc "example.c", 48, 22} true;
  assume {:verifier.code 0} true;
  $i49 := $add.bv64($i20, $i48);
  call {:cexpr "expected_value"} boogie_si_record_bv64($i49);
  assume {:sourceloc "example.c", 49, 5} true;
  assume {:verifier.code 0} true;
  goto $bb39;
$bb39:
  assume {:sourceloc "example.c", 43, 33} true;
  assume {:verifier.code 0} true;
  $i50 := $add.bv32($i23, 1bv32);
  call {:cexpr "i"} boogie_si_record_bv32($i50);
  assume {:sourceloc "example.c", 43, 5} true;
  assume {:verifier.code 0} true;
  $i20, $f21, $i22, $i23 := $i49, $f44, $i39, $i50;
  goto $bb27;
$bb40:
  assume {:sourceloc "example.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 59, 21} true;
  assume {:verifier.code 0} true;
  $i55 := $slt.bv32($i54, 25bv32);
  assume {:sourceloc "example.c", 59, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i55} true;
  goto $bb41, $bb42;
$bb41:
  assume ($i55 == 1bv1);
  assume {:sourceloc "example.c", 60, 10} true;
  assume {:verifier.code 0} true;
  $i56 := 0bv32;
  goto $bb43;
$bb42:
  assume !(($i55 == 1bv1));
  assume {:sourceloc "example.c", 66, 42} true;
  assume {:verifier.code 0} true;
  $f68 := $si2fp.bv64.bvfloat($rmode, $i12);
  assume {:sourceloc "example.c", 66, 63} true;
  assume {:verifier.code 0} true;
  $f69 := $fmul.bvfloat($rmode, 0x5.000000e0f24e8, $f2);
  assume {:sourceloc "example.c", 66, 72} true;
  assume {:verifier.code 0} true;
  $f70 := $si2fp.bv32.bvfloat($rmode, $i1);
  assume {:sourceloc "example.c", 66, 70} true;
  assume {:verifier.code 0} true;
  $f71 := $fmul.bvfloat($rmode, $f69, $f70);
  assume {:sourceloc "example.c", 66, 55} true;
  assume {:verifier.code 0} true;
  $f72 := $fsub.bvfloat($rmode, $f68, $f71);
  assume {:sourceloc "example.c", 66, 42} true;
  assume {:verifier.code 0} true;
  $i73 := $fp2ui.bvfloat.bv64(RTZ, $f72);
  call {:cexpr "optimize_over"} boogie_si_record_bv64($i73);
  assume {:sourceloc "example.c", 67, 3} true;
  assume {:verifier.code 0} true;
  goto $bb56;
$bb43:
  assume {:sourceloc "example.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "example.c", 60, 23} true;
  assume {:verifier.code 0} true;
  $i57 := $slt.bv32($i56, 25bv32);
  assume {:sourceloc "example.c", 60, 5} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i57} true;
  goto $bb44, $bb45;
$bb44:
  assume ($i57 == 1bv1);
  assume {:sourceloc "example.c", 61, 13} true;
  assume {:verifier.code 0} true;
  $i58 := $slt.bv32($i54, $i56);
  assume {:sourceloc "example.c", 61, 11} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i58} true;
  goto $bb46, $bb47;
$bb45:
  assume !(($i57 == 1bv1));
  assume {:sourceloc "example.c", 64, 3} true;
  assume {:verifier.code 0} true;
  goto $bb55;
$bb46:
  assume ($i58 == 1bv1);
  assume {:sourceloc "example.c", 62, 9} true;
  assume {:verifier.code 0} true;
  goto $bb49;
$bb47:
  assume {:sourceloc "example.c", 61, 11} true;
  assume {:verifier.code 0} true;
  assume !(($i58 == 1bv1));
  goto $bb48;
$bb48:
  assume {:sourceloc "example.c", 63, 5} true;
  assume {:verifier.code 0} true;
  goto $bb54;
$bb49:
  assume {:sourceloc "example.c", 62, 9} true;
  assume {:verifier.code 0} true;
  $i59 := $sext.bv32.bv64($i54);
  assume {:sourceloc "example.c", 62, 9} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref($bv2int.64($i59), 8));
  assume {:sourceloc "example.c", 62, 9} true;
  assume {:verifier.code 0} true;
  $i61 := $load.bv64($M.0, $p60);
  assume {:sourceloc "example.c", 62, 9} true;
  assume {:verifier.code 0} true;
  $i62 := $sext.bv32.bv64($i56);
  assume {:sourceloc "example.c", 62, 9} true;
  assume {:verifier.code 0} true;
  $p63 := $add.ref($add.ref($p0, $mul.ref(0, 200)), $mul.ref($bv2int.64($i62), 8));
  assume {:sourceloc "example.c", 62, 9} true;
  assume {:verifier.code 0} true;
  $i64 := $load.bv64($M.0, $p63);
  assume {:sourceloc "example.c", 62, 9} true;
  assume {:verifier.code 0} true;
  $i65 := $ne.bv64($i61, $i64);
  assume {:sourceloc "example.c", 62, 9} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i65} true;
  goto $bb50, $bb52;
$bb50:
  assume {:sourceloc "example.c", 62, 9} true;
  assume {:verifier.code 0} true;
  assume ($i65 == 1bv1);
  goto $bb51;
$bb51:
  assume {:sourceloc "example.c", 62, 9} true;
  assume {:verifier.code 0} true;
  goto $bb53;
$bb52:
  assume !(($i65 == 1bv1));
  assume {:sourceloc "example.c", 62, 9} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume(0bv32);
  assume {:sourceloc "example.c", 62, 9} true;
  assume {:verifier.code 0} true;
  goto $bb51;
$bb53:
  assume {:sourceloc "example.c", 62, 9} true;
  assume {:verifier.code 0} true;
  goto $bb48;
$bb54:
  assume {:sourceloc "example.c", 60, 34} true;
  assume {:verifier.code 0} true;
  $i66 := $add.bv32($i56, 1bv32);
  call {:cexpr "j"} boogie_si_record_bv32($i66);
  assume {:sourceloc "example.c", 60, 5} true;
  assume {:verifier.code 0} true;
  $i56 := $i66;
  goto $bb43;
$bb55:
  assume {:sourceloc "example.c", 59, 32} true;
  assume {:verifier.code 0} true;
  $i67 := $add.bv32($i54, 1bv32);
  call {:cexpr "i"} boogie_si_record_bv32($i67);
  assume {:sourceloc "example.c", 59, 3} true;
  assume {:verifier.code 0} true;
  $i54 := $i67;
  goto $bb40;
$bb56:
  assume {:sourceloc "example.c", 67, 3} true;
  assume {:verifier.code 0} true;
  $i74 := $ule.bv64($i73, 0bv64);
  assume {:sourceloc "example.c", 67, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i74} true;
  goto $bb57, $bb59;
$bb57:
  assume {:sourceloc "example.c", 67, 3} true;
  assume {:verifier.code 0} true;
  assume ($i74 == 1bv1);
  goto $bb58;
$bb58:
  assume {:sourceloc "example.c", 67, 3} true;
  assume {:verifier.code 0} true;
  goto $bb60;
$bb59:
  assume !(($i74 == 1bv1));
  assume {:sourceloc "example.c", 67, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assert(0bv32);
  assume {:sourceloc "example.c", 67, 3} true;
  assume {:verifier.code 0} true;
  goto $bb58;
$bb60:
  assume {:sourceloc "example.c", 68, 3} true;
  assume {:verifier.code 0} true;
  $r := 0bv32;
  $exn := false;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 2064));
procedure  llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const __VERIFIER_nondet_float: ref;
axiom (__VERIFIER_nondet_float == $sub.ref(0, 3096));
procedure  __VERIFIER_nondet_float()
  returns ($r: bvfloat);
const __VERIFIER_nondet_double: ref;
axiom (__VERIFIER_nondet_double == $sub.ref(0, 4128));
procedure  __VERIFIER_nondet_double()
  returns ($r: bvdouble);
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 5160));
procedure  __SMACK_code.ref($p0: ref);
procedure  __SMACK_code.ref.bv32($p0: ref, p.1: bv32);
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 6192));
procedure  __VERIFIER_assume($i0: bv32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 45, 3} true;
  assume {:verifier.code 1} true;
  assume $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 46, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 7224));
procedure  __SMACK_dummy($i0: bv32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_dummy:arg:v"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 59} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_assert: ref;
axiom (__VERIFIER_assert == $sub.ref(0, 8256));
procedure  __VERIFIER_assert($i0: bv32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assert:arg:x"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 52, 3} true;
  assume {:verifier.code 1} true;
  assert $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 54, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_and32: ref;
axiom (__SMACK_and32 == $sub.ref(0, 9288));
procedure  __SMACK_and32($i0: bv32, $i1: bv32)
  returns ($r: bv32)
{
  var $i2: bv32;
  var $i3: bv1;
  var $i5: bv1;
  var $i6: bv1;
  var $i8: bv32;
  var $i7: bv32;
  var $i4: bv32;
  var $i9: bv64;
  var $i10: bv64;
  var $i11: bv32;
  var $i12: bv32;
  var $i13: bv64;
  var $i14: bv64;
  var $i15: bv32;
  var $i16: bv32;
  var $i17: bv32;
  var $i18: bv1;
  var $i20: bv1;
  var $i21: bv1;
  var $i23: bv32;
  var $i22: bv32;
  var $i19: bv32;
  var $i24: bv64;
  var $i25: bv64;
  var $i26: bv32;
  var $i27: bv32;
  var $i28: bv64;
  var $i29: bv64;
  var $i30: bv32;
  var $i31: bv32;
  var $i32: bv32;
  var $i33: bv1;
  var $i35: bv1;
  var $i36: bv1;
  var $i38: bv32;
  var $i37: bv32;
  var $i34: bv32;
  var $i39: bv64;
  var $i40: bv64;
  var $i41: bv32;
  var $i42: bv32;
  var $i43: bv64;
  var $i44: bv64;
  var $i45: bv32;
  var $i46: bv32;
  var $i47: bv32;
  var $i48: bv1;
  var $i50: bv1;
  var $i51: bv1;
  var $i53: bv32;
  var $i52: bv32;
  var $i49: bv32;
  var $i54: bv64;
  var $i55: bv64;
  var $i56: bv32;
  var $i57: bv32;
  var $i58: bv64;
  var $i59: bv64;
  var $i60: bv32;
  var $i61: bv32;
  var $i62: bv32;
  var $i63: bv1;
  var $i65: bv1;
  var $i66: bv1;
  var $i68: bv32;
  var $i67: bv32;
  var $i64: bv32;
  var $i69: bv64;
  var $i70: bv64;
  var $i71: bv32;
  var $i72: bv32;
  var $i73: bv64;
  var $i74: bv64;
  var $i75: bv32;
  var $i76: bv32;
  var $i77: bv32;
  var $i78: bv1;
  var $i80: bv1;
  var $i81: bv1;
  var $i83: bv32;
  var $i82: bv32;
  var $i79: bv32;
  var $i84: bv64;
  var $i85: bv64;
  var $i86: bv32;
  var $i87: bv32;
  var $i88: bv64;
  var $i89: bv64;
  var $i90: bv32;
  var $i91: bv32;
  var $i92: bv32;
  var $i93: bv1;
  var $i95: bv1;
  var $i96: bv1;
  var $i98: bv32;
  var $i97: bv32;
  var $i94: bv32;
  var $i99: bv64;
  var $i100: bv64;
  var $i101: bv32;
  var $i102: bv32;
  var $i103: bv64;
  var $i104: bv64;
  var $i105: bv32;
  var $i106: bv32;
  var $i107: bv32;
  var $i108: bv1;
  var $i110: bv1;
  var $i111: bv1;
  var $i113: bv32;
  var $i112: bv32;
  var $i109: bv32;
  var $i114: bv64;
  var $i115: bv64;
  var $i116: bv32;
  var $i117: bv32;
  var $i118: bv64;
  var $i119: bv64;
  var $i120: bv32;
  var $i121: bv32;
  var $i122: bv32;
  var $i123: bv1;
  var $i125: bv1;
  var $i126: bv1;
  var $i128: bv32;
  var $i127: bv32;
  var $i124: bv32;
  var $i129: bv64;
  var $i130: bv64;
  var $i131: bv32;
  var $i132: bv32;
  var $i133: bv64;
  var $i134: bv64;
  var $i135: bv32;
  var $i136: bv32;
  var $i137: bv32;
  var $i138: bv1;
  var $i140: bv1;
  var $i141: bv1;
  var $i143: bv32;
  var $i142: bv32;
  var $i139: bv32;
  var $i144: bv64;
  var $i145: bv64;
  var $i146: bv32;
  var $i147: bv32;
  var $i148: bv64;
  var $i149: bv64;
  var $i150: bv32;
  var $i151: bv32;
  var $i152: bv32;
  var $i153: bv1;
  var $i155: bv1;
  var $i156: bv1;
  var $i158: bv32;
  var $i157: bv32;
  var $i154: bv32;
  var $i159: bv64;
  var $i160: bv64;
  var $i161: bv32;
  var $i162: bv32;
  var $i163: bv64;
  var $i164: bv64;
  var $i165: bv32;
  var $i166: bv32;
  var $i167: bv32;
  var $i168: bv1;
  var $i170: bv1;
  var $i171: bv1;
  var $i173: bv32;
  var $i172: bv32;
  var $i169: bv32;
  var $i174: bv64;
  var $i175: bv64;
  var $i176: bv32;
  var $i177: bv32;
  var $i178: bv64;
  var $i179: bv64;
  var $i180: bv32;
  var $i181: bv32;
  var $i182: bv32;
  var $i183: bv1;
  var $i185: bv1;
  var $i186: bv1;
  var $i188: bv32;
  var $i187: bv32;
  var $i184: bv32;
  var $i189: bv64;
  var $i190: bv64;
  var $i191: bv32;
  var $i192: bv32;
  var $i193: bv64;
  var $i194: bv64;
  var $i195: bv32;
  var $i196: bv32;
  var $i197: bv32;
  var $i198: bv1;
  var $i200: bv1;
  var $i201: bv1;
  var $i203: bv32;
  var $i202: bv32;
  var $i199: bv32;
  var $i204: bv64;
  var $i205: bv64;
  var $i206: bv32;
  var $i207: bv32;
  var $i208: bv64;
  var $i209: bv64;
  var $i210: bv32;
  var $i211: bv32;
  var $i212: bv32;
  var $i213: bv1;
  var $i215: bv1;
  var $i216: bv1;
  var $i218: bv32;
  var $i217: bv32;
  var $i214: bv32;
  var $i219: bv64;
  var $i220: bv64;
  var $i221: bv32;
  var $i222: bv32;
  var $i223: bv64;
  var $i224: bv64;
  var $i225: bv32;
  var $i226: bv32;
  var $i227: bv32;
  var $i228: bv1;
  var $i230: bv1;
  var $i231: bv1;
  var $i233: bv32;
  var $i232: bv32;
  var $i229: bv32;
  var $i234: bv64;
  var $i235: bv64;
  var $i236: bv32;
  var $i237: bv32;
  var $i238: bv64;
  var $i239: bv64;
  var $i240: bv32;
  var $i241: bv32;
  var $i242: bv32;
  var $i243: bv1;
  var $i245: bv1;
  var $i246: bv1;
  var $i248: bv32;
  var $i247: bv32;
  var $i244: bv32;
  var $i249: bv64;
  var $i250: bv64;
  var $i251: bv32;
  var $i252: bv32;
  var $i253: bv64;
  var $i254: bv64;
  var $i255: bv32;
  var $i256: bv32;
  var $i257: bv32;
  var $i258: bv1;
  var $i260: bv1;
  var $i261: bv1;
  var $i263: bv32;
  var $i262: bv32;
  var $i259: bv32;
  var $i264: bv64;
  var $i265: bv64;
  var $i266: bv32;
  var $i267: bv32;
  var $i268: bv64;
  var $i269: bv64;
  var $i270: bv32;
  var $i271: bv32;
  var $i272: bv32;
  var $i273: bv1;
  var $i275: bv1;
  var $i276: bv1;
  var $i278: bv32;
  var $i277: bv32;
  var $i274: bv32;
  var $i279: bv64;
  var $i280: bv64;
  var $i281: bv32;
  var $i282: bv32;
  var $i283: bv64;
  var $i284: bv64;
  var $i285: bv32;
  var $i286: bv32;
  var $i287: bv32;
  var $i288: bv1;
  var $i290: bv1;
  var $i291: bv1;
  var $i293: bv32;
  var $i292: bv32;
  var $i289: bv32;
  var $i294: bv64;
  var $i295: bv64;
  var $i296: bv32;
  var $i297: bv32;
  var $i298: bv64;
  var $i299: bv64;
  var $i300: bv32;
  var $i301: bv32;
  var $i302: bv32;
  var $i303: bv1;
  var $i305: bv1;
  var $i306: bv1;
  var $i308: bv32;
  var $i307: bv32;
  var $i304: bv32;
  var $i309: bv64;
  var $i310: bv64;
  var $i311: bv32;
  var $i312: bv32;
  var $i313: bv64;
  var $i314: bv64;
  var $i315: bv32;
  var $i316: bv32;
  var $i317: bv32;
  var $i318: bv1;
  var $i320: bv1;
  var $i321: bv1;
  var $i323: bv32;
  var $i322: bv32;
  var $i319: bv32;
  var $i324: bv64;
  var $i325: bv64;
  var $i326: bv32;
  var $i327: bv32;
  var $i328: bv64;
  var $i329: bv64;
  var $i330: bv32;
  var $i331: bv32;
  var $i332: bv32;
  var $i333: bv1;
  var $i335: bv1;
  var $i336: bv1;
  var $i338: bv32;
  var $i337: bv32;
  var $i334: bv32;
  var $i339: bv64;
  var $i340: bv64;
  var $i341: bv32;
  var $i342: bv32;
  var $i343: bv64;
  var $i344: bv64;
  var $i345: bv32;
  var $i346: bv32;
  var $i347: bv32;
  var $i348: bv1;
  var $i350: bv1;
  var $i351: bv1;
  var $i353: bv32;
  var $i352: bv32;
  var $i349: bv32;
  var $i354: bv64;
  var $i355: bv64;
  var $i356: bv32;
  var $i357: bv32;
  var $i358: bv64;
  var $i359: bv64;
  var $i360: bv32;
  var $i361: bv32;
  var $i362: bv32;
  var $i363: bv1;
  var $i365: bv1;
  var $i366: bv1;
  var $i368: bv32;
  var $i367: bv32;
  var $i364: bv32;
  var $i369: bv64;
  var $i370: bv64;
  var $i371: bv32;
  var $i372: bv32;
  var $i373: bv64;
  var $i374: bv64;
  var $i375: bv32;
  var $i376: bv32;
  var $i377: bv32;
  var $i378: bv1;
  var $i380: bv1;
  var $i381: bv1;
  var $i383: bv32;
  var $i382: bv32;
  var $i379: bv32;
  var $i384: bv64;
  var $i385: bv64;
  var $i386: bv32;
  var $i387: bv32;
  var $i388: bv64;
  var $i389: bv64;
  var $i390: bv32;
  var $i391: bv32;
  var $i392: bv32;
  var $i393: bv1;
  var $i395: bv1;
  var $i396: bv1;
  var $i398: bv32;
  var $i397: bv32;
  var $i394: bv32;
  var $i399: bv64;
  var $i400: bv64;
  var $i401: bv32;
  var $i402: bv32;
  var $i403: bv64;
  var $i404: bv64;
  var $i405: bv32;
  var $i406: bv32;
  var $i407: bv32;
  var $i408: bv1;
  var $i410: bv1;
  var $i411: bv1;
  var $i413: bv32;
  var $i412: bv32;
  var $i409: bv32;
  var $i414: bv64;
  var $i415: bv64;
  var $i416: bv32;
  var $i417: bv32;
  var $i418: bv64;
  var $i419: bv64;
  var $i420: bv32;
  var $i421: bv32;
  var $i422: bv32;
  var $i423: bv1;
  var $i425: bv1;
  var $i426: bv1;
  var $i428: bv32;
  var $i427: bv32;
  var $i424: bv32;
  var $i429: bv64;
  var $i430: bv64;
  var $i431: bv32;
  var $i432: bv32;
  var $i433: bv64;
  var $i434: bv64;
  var $i435: bv32;
  var $i436: bv32;
  var $i437: bv32;
  var $i438: bv1;
  var $i440: bv1;
  var $i441: bv1;
  var $i443: bv32;
  var $i442: bv32;
  var $i439: bv32;
  var $i444: bv64;
  var $i445: bv64;
  var $i446: bv32;
  var $i447: bv32;
  var $i448: bv64;
  var $i449: bv64;
  var $i450: bv32;
  var $i451: bv32;
  var $i452: bv32;
  var $i453: bv1;
  var $i455: bv1;
  var $i456: bv1;
  var $i458: bv32;
  var $i457: bv32;
  var $i454: bv32;
  var $i459: bv64;
  var $i460: bv64;
  var $i461: bv32;
  var $i462: bv32;
  var $i463: bv64;
  var $i464: bv64;
  var $i465: bv32;
  var $i466: bv32;
  var $i467: bv32;
  var $i468: bv1;
  var $i470: bv1;
  var $i471: bv1;
  var $i473: bv32;
  var $i472: bv32;
  var $i469: bv32;
  var $i474: bv64;
  var $i475: bv64;
  var $i476: bv32;
  var $i477: bv32;
  var $i478: bv64;
  var $i479: bv64;
  var $i480: bv32;
  var $i481: bv32;
  var $i482: bv32;
  var $i483: bv1;
  var $i485: bv1;
  var $i486: bv1;
  var $i488: bv32;
  var $i487: bv32;
  var $i484: bv32;
  var $i489: bv64;
  var $i490: bv64;
  var $i491: bv32;
  var $i492: bv32;
  var $i493: bv64;
  var $i494: bv64;
  var $i495: bv32;
  var $i496: bv32;
  var $i497: bv32;
  var $i498: bv1;
  var $i500: bv1;
  var $i501: bv1;
  var $i503: bv32;
  var $i502: bv32;
  var $i499: bv32;
  var $i504: bv64;
  var $i505: bv64;
  var $i506: bv32;
  var $i507: bv32;
  var $i508: bv64;
  var $i509: bv64;
  var $i510: bv32;
  var $i511: bv32;
  var $i512: bv32;
  var $i513: bv1;
  var $i515: bv1;
  var $i516: bv1;
  var $i518: bv32;
  var $i517: bv32;
  var $i514: bv32;
  var $i519: bv64;
  var $i520: bv64;
  var $i521: bv32;
  var $i522: bv32;
  var $i523: bv64;
  var $i524: bv64;
  var $i525: bv32;
  var $i526: bv32;
  var $i527: bv32;
  var $i528: bv1;
  var $i530: bv1;
  var $i531: bv1;
  var $i533: bv32;
  var $i532: bv32;
  var $i529: bv32;
  var $i534: bv64;
  var $i535: bv64;
  var $i536: bv32;
  var $i537: bv32;
  var $i538: bv64;
  var $i539: bv64;
  var $i540: bv32;
  var $i541: bv32;
  var $i542: bv32;
  var $i543: bv1;
  var $i545: bv1;
  var $i546: bv1;
  var $i548: bv32;
  var $i547: bv32;
  var $i544: bv32;
  var $i549: bv64;
  var $i550: bv64;
  var $i551: bv32;
  var $i552: bv32;
  var $i553: bv64;
  var $i554: bv64;
  var $i555: bv32;
  var $i556: bv32;
  var $i557: bv32;
  var $i558: bv1;
  var $i560: bv1;
  var $i561: bv1;
  var $i563: bv32;
  var $i562: bv32;
  var $i559: bv32;
  var $i564: bv64;
  var $i565: bv64;
  var $i566: bv32;
  var $i567: bv32;
  var $i568: bv64;
  var $i569: bv64;
  var $i570: bv32;
  var $i571: bv32;
  var $i572: bv32;
  var $i573: bv1;
  var $i575: bv1;
  var $i576: bv1;
  var $i578: bv32;
  var $i577: bv32;
  var $i574: bv32;
  var $i579: bv64;
  var $i580: bv64;
  var $i581: bv32;
  var $i582: bv32;
  var $i583: bv64;
  var $i584: bv64;
  var $i585: bv32;
  var $i586: bv32;
  var $i587: bv32;
  var $i588: bv1;
  var $i590: bv1;
  var $i591: bv1;
  var $i593: bv32;
  var $i592: bv32;
  var $i589: bv32;
  var $i594: bv64;
  var $i595: bv64;
  var $i596: bv32;
  var $i597: bv32;
  var $i598: bv64;
  var $i599: bv64;
  var $i600: bv32;
  var $i601: bv32;
  var $i602: bv32;
  var $i603: bv1;
  var $i605: bv1;
  var $i606: bv1;
  var $i608: bv32;
  var $i607: bv32;
  var $i604: bv32;
  var $i609: bv64;
  var $i610: bv64;
  var $i611: bv32;
  var $i612: bv32;
  var $i613: bv64;
  var $i614: bv64;
  var $i615: bv32;
  var $i616: bv32;
  var $i617: bv32;
  var $i618: bv1;
  var $i620: bv1;
  var $i621: bv1;
  var $i623: bv32;
  var $i622: bv32;
  var $i619: bv32;
  var $i624: bv64;
  var $i625: bv64;
  var $i626: bv32;
  var $i627: bv32;
  var $i628: bv64;
  var $i629: bv64;
  var $i630: bv32;
  var $i631: bv32;
  var $i632: bv32;
  var $i633: bv1;
  var $i635: bv1;
  var $i636: bv1;
  var $i638: bv32;
  var $i637: bv32;
  var $i634: bv32;
  var $i639: bv64;
  var $i640: bv64;
  var $i641: bv32;
  var $i642: bv32;
  var $i643: bv64;
  var $i644: bv64;
  var $i645: bv32;
  var $i646: bv32;
  var $i647: bv32;
  var $i648: bv1;
  var $i650: bv1;
  var $i651: bv1;
  var $i653: bv32;
  var $i652: bv32;
  var $i649: bv32;
  var $i654: bv64;
  var $i655: bv64;
  var $i656: bv32;
  var $i657: bv32;
  var $i658: bv64;
  var $i659: bv64;
  var $i660: bv32;
  var $i661: bv32;
  var $i662: bv32;
  var $i663: bv1;
  var $i665: bv1;
  var $i666: bv1;
  var $i668: bv32;
  var $i667: bv32;
  var $i664: bv32;
  var $i669: bv64;
  var $i670: bv64;
  var $i671: bv32;
  var $i672: bv32;
  var $i673: bv64;
  var $i674: bv64;
  var $i675: bv32;
  var $i676: bv32;
  var $i677: bv32;
  var $i678: bv1;
  var $i680: bv1;
  var $i681: bv1;
  var $i683: bv32;
  var $i682: bv32;
  var $i679: bv32;
  var $i684: bv64;
  var $i685: bv64;
  var $i686: bv32;
  var $i687: bv32;
  var $i688: bv64;
  var $i689: bv64;
  var $i690: bv32;
  var $i691: bv32;
  var $i692: bv32;
  var $i693: bv1;
  var $i695: bv1;
  var $i696: bv1;
  var $i698: bv32;
  var $i697: bv32;
  var $i694: bv32;
  var $i699: bv64;
  var $i700: bv64;
  var $i701: bv32;
  var $i702: bv32;
  var $i703: bv64;
  var $i704: bv64;
  var $i705: bv32;
  var $i706: bv32;
  var $i707: bv32;
  var $i708: bv1;
  var $i710: bv1;
  var $i711: bv1;
  var $i713: bv32;
  var $i712: bv32;
  var $i709: bv32;
  var $i714: bv64;
  var $i715: bv64;
  var $i716: bv32;
  var $i717: bv32;
  var $i718: bv64;
  var $i719: bv64;
  var $i720: bv32;
  var $i721: bv32;
  var $i722: bv32;
  var $i723: bv1;
  var $i725: bv1;
  var $i726: bv1;
  var $i728: bv32;
  var $i727: bv32;
  var $i724: bv32;
  var $i729: bv64;
  var $i730: bv64;
  var $i731: bv32;
  var $i732: bv32;
  var $i733: bv64;
  var $i734: bv64;
  var $i735: bv32;
  var $i736: bv32;
  var $i737: bv32;
  var $i738: bv1;
  var $i740: bv1;
  var $i741: bv1;
  var $i743: bv32;
  var $i742: bv32;
  var $i739: bv32;
  var $i744: bv64;
  var $i745: bv64;
  var $i746: bv32;
  var $i747: bv32;
  var $i748: bv64;
  var $i749: bv64;
  var $i750: bv32;
  var $i751: bv32;
  var $i752: bv32;
  var $i753: bv1;
  var $i755: bv1;
  var $i756: bv1;
  var $i758: bv32;
  var $i757: bv32;
  var $i754: bv32;
  var $i759: bv64;
  var $i760: bv64;
  var $i761: bv32;
  var $i762: bv32;
  var $i763: bv64;
  var $i764: bv64;
  var $i765: bv32;
  var $i766: bv32;
  var $i767: bv32;
  var $i768: bv1;
  var $i770: bv1;
  var $i771: bv1;
  var $i773: bv32;
  var $i772: bv32;
  var $i769: bv32;
  var $i774: bv64;
  var $i775: bv64;
  var $i776: bv32;
  var $i777: bv32;
  var $i778: bv64;
  var $i779: bv64;
  var $i780: bv32;
  var $i781: bv32;
  var $i782: bv32;
  var $i783: bv1;
  var $i785: bv1;
  var $i786: bv1;
  var $i788: bv32;
  var $i787: bv32;
  var $i784: bv32;
  var $i789: bv64;
  var $i790: bv64;
  var $i791: bv32;
  var $i792: bv32;
  var $i793: bv64;
  var $i794: bv64;
  var $i795: bv32;
  var $i796: bv32;
  var $i797: bv32;
  var $i798: bv1;
  var $i800: bv1;
  var $i801: bv1;
  var $i803: bv32;
  var $i802: bv32;
  var $i799: bv32;
  var $i804: bv64;
  var $i805: bv64;
  var $i806: bv32;
  var $i807: bv32;
  var $i808: bv64;
  var $i809: bv64;
  var $i810: bv32;
  var $i811: bv32;
  var $i812: bv32;
  var $i813: bv1;
  var $i815: bv1;
  var $i816: bv1;
  var $i818: bv32;
  var $i817: bv32;
  var $i814: bv32;
  var $i819: bv64;
  var $i820: bv64;
  var $i821: bv32;
  var $i822: bv32;
  var $i823: bv64;
  var $i824: bv64;
  var $i825: bv32;
  var $i826: bv32;
  var $i827: bv32;
  var $i828: bv1;
  var $i830: bv1;
  var $i831: bv1;
  var $i833: bv32;
  var $i832: bv32;
  var $i829: bv32;
  var $i834: bv64;
  var $i835: bv64;
  var $i836: bv32;
  var $i837: bv32;
  var $i838: bv64;
  var $i839: bv64;
  var $i840: bv32;
  var $i841: bv32;
  var $i842: bv32;
  var $i843: bv1;
  var $i845: bv1;
  var $i846: bv1;
  var $i848: bv32;
  var $i847: bv32;
  var $i844: bv32;
  var $i849: bv64;
  var $i850: bv64;
  var $i851: bv32;
  var $i852: bv32;
  var $i853: bv64;
  var $i854: bv64;
  var $i855: bv32;
  var $i856: bv32;
  var $i857: bv32;
  var $i858: bv1;
  var $i860: bv1;
  var $i861: bv1;
  var $i863: bv32;
  var $i862: bv32;
  var $i859: bv32;
  var $i864: bv64;
  var $i865: bv64;
  var $i866: bv32;
  var $i867: bv32;
  var $i868: bv64;
  var $i869: bv64;
  var $i870: bv32;
  var $i871: bv32;
  var $i872: bv32;
  var $i873: bv1;
  var $i875: bv1;
  var $i876: bv1;
  var $i878: bv32;
  var $i877: bv32;
  var $i874: bv32;
  var $i879: bv64;
  var $i880: bv64;
  var $i881: bv32;
  var $i882: bv32;
  var $i883: bv64;
  var $i884: bv64;
  var $i885: bv32;
  var $i886: bv32;
  var $i887: bv32;
  var $i888: bv1;
  var $i890: bv1;
  var $i891: bv1;
  var $i893: bv32;
  var $i892: bv32;
  var $i889: bv32;
  var $i894: bv64;
  var $i895: bv64;
  var $i896: bv32;
  var $i897: bv32;
  var $i898: bv64;
  var $i899: bv64;
  var $i900: bv32;
  var $i901: bv32;
  var $i902: bv32;
  var $i903: bv1;
  var $i905: bv1;
  var $i906: bv1;
  var $i908: bv32;
  var $i907: bv32;
  var $i904: bv32;
  var $i909: bv64;
  var $i910: bv64;
  var $i911: bv32;
  var $i912: bv32;
  var $i913: bv64;
  var $i914: bv64;
  var $i915: bv32;
  var $i916: bv32;
  var $i917: bv32;
  var $i918: bv1;
  var $i920: bv1;
  var $i921: bv1;
  var $i923: bv32;
  var $i922: bv32;
  var $i919: bv32;
  var $i924: bv64;
  var $i925: bv64;
  var $i926: bv32;
  var $i927: bv32;
  var $i928: bv64;
  var $i929: bv64;
  var $i930: bv32;
  var $i931: bv32;
  var $i932: bv32;
  var $i933: bv1;
  var $i935: bv1;
  var $i936: bv1;
  var $i938: bv32;
  var $i937: bv32;
  var $i934: bv32;
  var $i939: bv64;
  var $i940: bv64;
  var $i941: bv32;
  var $i942: bv32;
  var $i943: bv64;
  var $i944: bv64;
  var $i945: bv32;
  var $i946: bv32;
  var $i947: bv32;
  var $i948: bv1;
  var $i950: bv1;
  var $i951: bv1;
  var $i953: bv32;
  var $i952: bv32;
  var $i949: bv32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 60, 5} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__SMACK_and32:arg:a"} boogie_si_record_bv32($i0);
  call {:cexpr "__SMACK_and32:arg:b"} boogie_si_record_bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 60, 5} true;
  assume {:verifier.code 0} true;
  $i2 := $add.bv32(0bv32, 0bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 61, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.bv32($i0, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 61, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $i2;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 11} true;
  assume {:verifier.code 0} true;
  $i5 := $slt.bv32($i1, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb4, $bb6;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 61, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1bv1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 66, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $sext.bv32.bv64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 66, 9} true;
  assume {:verifier.code 0} true;
  $i10 := $srem.bv64($i9, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 66, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $trunc.bv64.bv32($i10);
  call {:cexpr "a"} boogie_si_record_bv32($i11);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 67, 5} true;
  assume {:verifier.code 0} true;
  $i12 := $add.bv32($i11, $i11);
  call {:cexpr "a"} boogie_si_record_bv32($i12);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 68, 7} true;
  assume {:verifier.code 0} true;
  $i13 := $sext.bv32.bv64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 68, 9} true;
  assume {:verifier.code 0} true;
  $i14 := $srem.bv64($i13, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 68, 7} true;
  assume {:verifier.code 0} true;
  $i15 := $trunc.bv64.bv32($i14);
  call {:cexpr "b"} boogie_si_record_bv32($i15);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 69, 5} true;
  assume {:verifier.code 0} true;
  $i16 := $add.bv32($i15, $i15);
  call {:cexpr "b"} boogie_si_record_bv32($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 71, 5} true;
  assume {:verifier.code 0} true;
  $i17 := $add.bv32($i4, $i4);
  call {:cexpr "c"} boogie_si_record_bv32($i17);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 72, 9} true;
  assume {:verifier.code 0} true;
  $i18 := $slt.bv32($i12, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 72, 7} true;
  assume {:verifier.code 0} true;
  $i19 := $i17;
  assume {:branchcond $i18} true;
  goto $bb10, $bb11;
$bb4:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 15} true;
  assume {:verifier.code 0} true;
  assume ($i5 == 1bv1);
  goto $bb5;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 63, 9} true;
  assume {:verifier.code 0} true;
  $i8 := $add.bv32($i2, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 64, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $i8;
  goto $bb9;
$bb6:
  assume !(($i5 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 20} true;
  assume {:verifier.code 0} true;
  $i6 := $sgt.bv32($i1, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $i2;
  assume {:branchcond $i6} true;
  goto $bb7, $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 9} true;
  assume {:verifier.code 0} true;
  assume ($i6 == 1bv1);
  goto $bb5;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i6 == 1bv1));
  goto $bb9;
$bb9:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 65, 3} true;
  assume {:verifier.code 0} true;
  $i4 := $i7;
  goto $bb3;
$bb10:
  assume ($i18 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 11} true;
  assume {:verifier.code 0} true;
  $i20 := $slt.bv32($i16, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb13, $bb15;
$bb11:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 72, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i18 == 1bv1));
  goto $bb12;
$bb12:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 77, 7} true;
  assume {:verifier.code 0} true;
  $i24 := $sext.bv32.bv64($i12);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 77, 9} true;
  assume {:verifier.code 0} true;
  $i25 := $srem.bv64($i24, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 77, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $trunc.bv64.bv32($i25);
  call {:cexpr "a"} boogie_si_record_bv32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 78, 5} true;
  assume {:verifier.code 0} true;
  $i27 := $add.bv32($i26, $i26);
  call {:cexpr "a"} boogie_si_record_bv32($i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 79, 7} true;
  assume {:verifier.code 0} true;
  $i28 := $sext.bv32.bv64($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 79, 9} true;
  assume {:verifier.code 0} true;
  $i29 := $srem.bv64($i28, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 79, 7} true;
  assume {:verifier.code 0} true;
  $i30 := $trunc.bv64.bv32($i29);
  call {:cexpr "b"} boogie_si_record_bv32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 80, 5} true;
  assume {:verifier.code 0} true;
  $i31 := $add.bv32($i30, $i30);
  call {:cexpr "b"} boogie_si_record_bv32($i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 82, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $add.bv32($i19, $i19);
  call {:cexpr "c"} boogie_si_record_bv32($i32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 83, 9} true;
  assume {:verifier.code 0} true;
  $i33 := $slt.bv32($i27, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 83, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $i32;
  assume {:branchcond $i33} true;
  goto $bb19, $bb20;
$bb13:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 15} true;
  assume {:verifier.code 0} true;
  assume ($i20 == 1bv1);
  goto $bb14;
$bb14:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 74, 9} true;
  assume {:verifier.code 0} true;
  $i23 := $add.bv32($i17, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 75, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $i23;
  goto $bb18;
$bb15:
  assume !(($i20 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 20} true;
  assume {:verifier.code 0} true;
  $i21 := $sgt.bv32($i16, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 9} true;
  assume {:verifier.code 0} true;
  $i22 := $i17;
  assume {:branchcond $i21} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 9} true;
  assume {:verifier.code 0} true;
  assume ($i21 == 1bv1);
  goto $bb14;
$bb17:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i21 == 1bv1));
  goto $bb18;
$bb18:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 76, 3} true;
  assume {:verifier.code 0} true;
  $i19 := $i22;
  goto $bb12;
$bb19:
  assume ($i33 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 11} true;
  assume {:verifier.code 0} true;
  $i35 := $slt.bv32($i31, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb22, $bb24;
$bb20:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 83, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i33 == 1bv1));
  goto $bb21;
$bb21:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 88, 7} true;
  assume {:verifier.code 0} true;
  $i39 := $sext.bv32.bv64($i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 88, 9} true;
  assume {:verifier.code 0} true;
  $i40 := $srem.bv64($i39, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 88, 7} true;
  assume {:verifier.code 0} true;
  $i41 := $trunc.bv64.bv32($i40);
  call {:cexpr "a"} boogie_si_record_bv32($i41);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 89, 5} true;
  assume {:verifier.code 0} true;
  $i42 := $add.bv32($i41, $i41);
  call {:cexpr "a"} boogie_si_record_bv32($i42);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 90, 7} true;
  assume {:verifier.code 0} true;
  $i43 := $sext.bv32.bv64($i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 90, 9} true;
  assume {:verifier.code 0} true;
  $i44 := $srem.bv64($i43, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 90, 7} true;
  assume {:verifier.code 0} true;
  $i45 := $trunc.bv64.bv32($i44);
  call {:cexpr "b"} boogie_si_record_bv32($i45);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 91, 5} true;
  assume {:verifier.code 0} true;
  $i46 := $add.bv32($i45, $i45);
  call {:cexpr "b"} boogie_si_record_bv32($i46);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 93, 5} true;
  assume {:verifier.code 0} true;
  $i47 := $add.bv32($i34, $i34);
  call {:cexpr "c"} boogie_si_record_bv32($i47);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 94, 9} true;
  assume {:verifier.code 0} true;
  $i48 := $slt.bv32($i42, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 94, 7} true;
  assume {:verifier.code 0} true;
  $i49 := $i47;
  assume {:branchcond $i48} true;
  goto $bb28, $bb29;
$bb22:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 15} true;
  assume {:verifier.code 0} true;
  assume ($i35 == 1bv1);
  goto $bb23;
$bb23:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 85, 9} true;
  assume {:verifier.code 0} true;
  $i38 := $add.bv32($i32, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i38);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 86, 5} true;
  assume {:verifier.code 0} true;
  $i37 := $i38;
  goto $bb27;
$bb24:
  assume !(($i35 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 20} true;
  assume {:verifier.code 0} true;
  $i36 := $sgt.bv32($i31, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 9} true;
  assume {:verifier.code 0} true;
  $i37 := $i32;
  assume {:branchcond $i36} true;
  goto $bb25, $bb26;
$bb25:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 9} true;
  assume {:verifier.code 0} true;
  assume ($i36 == 1bv1);
  goto $bb23;
$bb26:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i36 == 1bv1));
  goto $bb27;
$bb27:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 87, 3} true;
  assume {:verifier.code 0} true;
  $i34 := $i37;
  goto $bb21;
$bb28:
  assume ($i48 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 11} true;
  assume {:verifier.code 0} true;
  $i50 := $slt.bv32($i46, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i50} true;
  goto $bb31, $bb33;
$bb29:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 94, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i48 == 1bv1));
  goto $bb30;
$bb30:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 99, 7} true;
  assume {:verifier.code 0} true;
  $i54 := $sext.bv32.bv64($i42);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 99, 9} true;
  assume {:verifier.code 0} true;
  $i55 := $srem.bv64($i54, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 99, 7} true;
  assume {:verifier.code 0} true;
  $i56 := $trunc.bv64.bv32($i55);
  call {:cexpr "a"} boogie_si_record_bv32($i56);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 100, 5} true;
  assume {:verifier.code 0} true;
  $i57 := $add.bv32($i56, $i56);
  call {:cexpr "a"} boogie_si_record_bv32($i57);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 101, 7} true;
  assume {:verifier.code 0} true;
  $i58 := $sext.bv32.bv64($i46);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 101, 9} true;
  assume {:verifier.code 0} true;
  $i59 := $srem.bv64($i58, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 101, 7} true;
  assume {:verifier.code 0} true;
  $i60 := $trunc.bv64.bv32($i59);
  call {:cexpr "b"} boogie_si_record_bv32($i60);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 102, 5} true;
  assume {:verifier.code 0} true;
  $i61 := $add.bv32($i60, $i60);
  call {:cexpr "b"} boogie_si_record_bv32($i61);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 104, 5} true;
  assume {:verifier.code 0} true;
  $i62 := $add.bv32($i49, $i49);
  call {:cexpr "c"} boogie_si_record_bv32($i62);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 9} true;
  assume {:verifier.code 0} true;
  $i63 := $slt.bv32($i57, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 7} true;
  assume {:verifier.code 0} true;
  $i64 := $i62;
  assume {:branchcond $i63} true;
  goto $bb37, $bb38;
$bb31:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 15} true;
  assume {:verifier.code 0} true;
  assume ($i50 == 1bv1);
  goto $bb32;
$bb32:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 96, 9} true;
  assume {:verifier.code 0} true;
  $i53 := $add.bv32($i47, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i53);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 97, 5} true;
  assume {:verifier.code 0} true;
  $i52 := $i53;
  goto $bb36;
$bb33:
  assume !(($i50 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 20} true;
  assume {:verifier.code 0} true;
  $i51 := $sgt.bv32($i46, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 9} true;
  assume {:verifier.code 0} true;
  $i52 := $i47;
  assume {:branchcond $i51} true;
  goto $bb34, $bb35;
$bb34:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 9} true;
  assume {:verifier.code 0} true;
  assume ($i51 == 1bv1);
  goto $bb32;
$bb35:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i51 == 1bv1));
  goto $bb36;
$bb36:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 98, 3} true;
  assume {:verifier.code 0} true;
  $i49 := $i52;
  goto $bb30;
$bb37:
  assume ($i63 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 11} true;
  assume {:verifier.code 0} true;
  $i65 := $slt.bv32($i61, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i65} true;
  goto $bb40, $bb42;
$bb38:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i63 == 1bv1));
  goto $bb39;
$bb39:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 110, 7} true;
  assume {:verifier.code 0} true;
  $i69 := $sext.bv32.bv64($i57);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 110, 9} true;
  assume {:verifier.code 0} true;
  $i70 := $srem.bv64($i69, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 110, 7} true;
  assume {:verifier.code 0} true;
  $i71 := $trunc.bv64.bv32($i70);
  call {:cexpr "a"} boogie_si_record_bv32($i71);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 111, 5} true;
  assume {:verifier.code 0} true;
  $i72 := $add.bv32($i71, $i71);
  call {:cexpr "a"} boogie_si_record_bv32($i72);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 112, 7} true;
  assume {:verifier.code 0} true;
  $i73 := $sext.bv32.bv64($i61);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 112, 9} true;
  assume {:verifier.code 0} true;
  $i74 := $srem.bv64($i73, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 112, 7} true;
  assume {:verifier.code 0} true;
  $i75 := $trunc.bv64.bv32($i74);
  call {:cexpr "b"} boogie_si_record_bv32($i75);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 113, 5} true;
  assume {:verifier.code 0} true;
  $i76 := $add.bv32($i75, $i75);
  call {:cexpr "b"} boogie_si_record_bv32($i76);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 115, 5} true;
  assume {:verifier.code 0} true;
  $i77 := $add.bv32($i64, $i64);
  call {:cexpr "c"} boogie_si_record_bv32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 9} true;
  assume {:verifier.code 0} true;
  $i78 := $slt.bv32($i72, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 7} true;
  assume {:verifier.code 0} true;
  $i79 := $i77;
  assume {:branchcond $i78} true;
  goto $bb46, $bb47;
$bb40:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 15} true;
  assume {:verifier.code 0} true;
  assume ($i65 == 1bv1);
  goto $bb41;
$bb41:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 107, 9} true;
  assume {:verifier.code 0} true;
  $i68 := $add.bv32($i62, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i68);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 108, 5} true;
  assume {:verifier.code 0} true;
  $i67 := $i68;
  goto $bb45;
$bb42:
  assume !(($i65 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 20} true;
  assume {:verifier.code 0} true;
  $i66 := $sgt.bv32($i61, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 9} true;
  assume {:verifier.code 0} true;
  $i67 := $i62;
  assume {:branchcond $i66} true;
  goto $bb43, $bb44;
$bb43:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 9} true;
  assume {:verifier.code 0} true;
  assume ($i66 == 1bv1);
  goto $bb41;
$bb44:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i66 == 1bv1));
  goto $bb45;
$bb45:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 109, 3} true;
  assume {:verifier.code 0} true;
  $i64 := $i67;
  goto $bb39;
$bb46:
  assume ($i78 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 11} true;
  assume {:verifier.code 0} true;
  $i80 := $slt.bv32($i76, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i80} true;
  goto $bb49, $bb51;
$bb47:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i78 == 1bv1));
  goto $bb48;
$bb48:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 121, 7} true;
  assume {:verifier.code 0} true;
  $i84 := $sext.bv32.bv64($i72);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 121, 9} true;
  assume {:verifier.code 0} true;
  $i85 := $srem.bv64($i84, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 121, 7} true;
  assume {:verifier.code 0} true;
  $i86 := $trunc.bv64.bv32($i85);
  call {:cexpr "a"} boogie_si_record_bv32($i86);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 122, 5} true;
  assume {:verifier.code 0} true;
  $i87 := $add.bv32($i86, $i86);
  call {:cexpr "a"} boogie_si_record_bv32($i87);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 123, 7} true;
  assume {:verifier.code 0} true;
  $i88 := $sext.bv32.bv64($i76);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 123, 9} true;
  assume {:verifier.code 0} true;
  $i89 := $srem.bv64($i88, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 123, 7} true;
  assume {:verifier.code 0} true;
  $i90 := $trunc.bv64.bv32($i89);
  call {:cexpr "b"} boogie_si_record_bv32($i90);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 124, 5} true;
  assume {:verifier.code 0} true;
  $i91 := $add.bv32($i90, $i90);
  call {:cexpr "b"} boogie_si_record_bv32($i91);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 126, 5} true;
  assume {:verifier.code 0} true;
  $i92 := $add.bv32($i79, $i79);
  call {:cexpr "c"} boogie_si_record_bv32($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 127, 9} true;
  assume {:verifier.code 0} true;
  $i93 := $slt.bv32($i87, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 127, 7} true;
  assume {:verifier.code 0} true;
  $i94 := $i92;
  assume {:branchcond $i93} true;
  goto $bb55, $bb56;
$bb49:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 15} true;
  assume {:verifier.code 0} true;
  assume ($i80 == 1bv1);
  goto $bb50;
$bb50:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 118, 9} true;
  assume {:verifier.code 0} true;
  $i83 := $add.bv32($i77, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i83);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 119, 5} true;
  assume {:verifier.code 0} true;
  $i82 := $i83;
  goto $bb54;
$bb51:
  assume !(($i80 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 20} true;
  assume {:verifier.code 0} true;
  $i81 := $sgt.bv32($i76, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 9} true;
  assume {:verifier.code 0} true;
  $i82 := $i77;
  assume {:branchcond $i81} true;
  goto $bb52, $bb53;
$bb52:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 9} true;
  assume {:verifier.code 0} true;
  assume ($i81 == 1bv1);
  goto $bb50;
$bb53:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i81 == 1bv1));
  goto $bb54;
$bb54:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 120, 3} true;
  assume {:verifier.code 0} true;
  $i79 := $i82;
  goto $bb48;
$bb55:
  assume ($i93 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 11} true;
  assume {:verifier.code 0} true;
  $i95 := $slt.bv32($i91, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i95} true;
  goto $bb58, $bb60;
$bb56:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 127, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i93 == 1bv1));
  goto $bb57;
$bb57:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 132, 7} true;
  assume {:verifier.code 0} true;
  $i99 := $sext.bv32.bv64($i87);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 132, 9} true;
  assume {:verifier.code 0} true;
  $i100 := $srem.bv64($i99, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 132, 7} true;
  assume {:verifier.code 0} true;
  $i101 := $trunc.bv64.bv32($i100);
  call {:cexpr "a"} boogie_si_record_bv32($i101);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 133, 5} true;
  assume {:verifier.code 0} true;
  $i102 := $add.bv32($i101, $i101);
  call {:cexpr "a"} boogie_si_record_bv32($i102);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 134, 7} true;
  assume {:verifier.code 0} true;
  $i103 := $sext.bv32.bv64($i91);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 134, 9} true;
  assume {:verifier.code 0} true;
  $i104 := $srem.bv64($i103, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 134, 7} true;
  assume {:verifier.code 0} true;
  $i105 := $trunc.bv64.bv32($i104);
  call {:cexpr "b"} boogie_si_record_bv32($i105);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 135, 5} true;
  assume {:verifier.code 0} true;
  $i106 := $add.bv32($i105, $i105);
  call {:cexpr "b"} boogie_si_record_bv32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 137, 5} true;
  assume {:verifier.code 0} true;
  $i107 := $add.bv32($i94, $i94);
  call {:cexpr "c"} boogie_si_record_bv32($i107);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 138, 9} true;
  assume {:verifier.code 0} true;
  $i108 := $slt.bv32($i102, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 138, 7} true;
  assume {:verifier.code 0} true;
  $i109 := $i107;
  assume {:branchcond $i108} true;
  goto $bb64, $bb65;
$bb58:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 15} true;
  assume {:verifier.code 0} true;
  assume ($i95 == 1bv1);
  goto $bb59;
$bb59:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 129, 9} true;
  assume {:verifier.code 0} true;
  $i98 := $add.bv32($i92, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i98);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 130, 5} true;
  assume {:verifier.code 0} true;
  $i97 := $i98;
  goto $bb63;
$bb60:
  assume !(($i95 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 20} true;
  assume {:verifier.code 0} true;
  $i96 := $sgt.bv32($i91, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 9} true;
  assume {:verifier.code 0} true;
  $i97 := $i92;
  assume {:branchcond $i96} true;
  goto $bb61, $bb62;
$bb61:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 9} true;
  assume {:verifier.code 0} true;
  assume ($i96 == 1bv1);
  goto $bb59;
$bb62:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i96 == 1bv1));
  goto $bb63;
$bb63:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 131, 3} true;
  assume {:verifier.code 0} true;
  $i94 := $i97;
  goto $bb57;
$bb64:
  assume ($i108 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 11} true;
  assume {:verifier.code 0} true;
  $i110 := $slt.bv32($i106, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i110} true;
  goto $bb67, $bb69;
$bb65:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 138, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i108 == 1bv1));
  goto $bb66;
$bb66:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 143, 7} true;
  assume {:verifier.code 0} true;
  $i114 := $sext.bv32.bv64($i102);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 143, 9} true;
  assume {:verifier.code 0} true;
  $i115 := $srem.bv64($i114, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 143, 7} true;
  assume {:verifier.code 0} true;
  $i116 := $trunc.bv64.bv32($i115);
  call {:cexpr "a"} boogie_si_record_bv32($i116);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 144, 5} true;
  assume {:verifier.code 0} true;
  $i117 := $add.bv32($i116, $i116);
  call {:cexpr "a"} boogie_si_record_bv32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 7} true;
  assume {:verifier.code 0} true;
  $i118 := $sext.bv32.bv64($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 9} true;
  assume {:verifier.code 0} true;
  $i119 := $srem.bv64($i118, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 7} true;
  assume {:verifier.code 0} true;
  $i120 := $trunc.bv64.bv32($i119);
  call {:cexpr "b"} boogie_si_record_bv32($i120);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 5} true;
  assume {:verifier.code 0} true;
  $i121 := $add.bv32($i120, $i120);
  call {:cexpr "b"} boogie_si_record_bv32($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 148, 5} true;
  assume {:verifier.code 0} true;
  $i122 := $add.bv32($i109, $i109);
  call {:cexpr "c"} boogie_si_record_bv32($i122);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 149, 9} true;
  assume {:verifier.code 0} true;
  $i123 := $slt.bv32($i117, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 149, 7} true;
  assume {:verifier.code 0} true;
  $i124 := $i122;
  assume {:branchcond $i123} true;
  goto $bb73, $bb74;
$bb67:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 15} true;
  assume {:verifier.code 0} true;
  assume ($i110 == 1bv1);
  goto $bb68;
$bb68:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 9} true;
  assume {:verifier.code 0} true;
  $i113 := $add.bv32($i107, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 141, 5} true;
  assume {:verifier.code 0} true;
  $i112 := $i113;
  goto $bb72;
$bb69:
  assume !(($i110 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 20} true;
  assume {:verifier.code 0} true;
  $i111 := $sgt.bv32($i106, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 9} true;
  assume {:verifier.code 0} true;
  $i112 := $i107;
  assume {:branchcond $i111} true;
  goto $bb70, $bb71;
$bb70:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 9} true;
  assume {:verifier.code 0} true;
  assume ($i111 == 1bv1);
  goto $bb68;
$bb71:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i111 == 1bv1));
  goto $bb72;
$bb72:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 142, 3} true;
  assume {:verifier.code 0} true;
  $i109 := $i112;
  goto $bb66;
$bb73:
  assume ($i123 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 11} true;
  assume {:verifier.code 0} true;
  $i125 := $slt.bv32($i121, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i125} true;
  goto $bb76, $bb78;
$bb74:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 149, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i123 == 1bv1));
  goto $bb75;
$bb75:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 154, 7} true;
  assume {:verifier.code 0} true;
  $i129 := $sext.bv32.bv64($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 154, 9} true;
  assume {:verifier.code 0} true;
  $i130 := $srem.bv64($i129, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 154, 7} true;
  assume {:verifier.code 0} true;
  $i131 := $trunc.bv64.bv32($i130);
  call {:cexpr "a"} boogie_si_record_bv32($i131);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 155, 5} true;
  assume {:verifier.code 0} true;
  $i132 := $add.bv32($i131, $i131);
  call {:cexpr "a"} boogie_si_record_bv32($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 156, 7} true;
  assume {:verifier.code 0} true;
  $i133 := $sext.bv32.bv64($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 156, 9} true;
  assume {:verifier.code 0} true;
  $i134 := $srem.bv64($i133, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 156, 7} true;
  assume {:verifier.code 0} true;
  $i135 := $trunc.bv64.bv32($i134);
  call {:cexpr "b"} boogie_si_record_bv32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 157, 5} true;
  assume {:verifier.code 0} true;
  $i136 := $add.bv32($i135, $i135);
  call {:cexpr "b"} boogie_si_record_bv32($i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 159, 5} true;
  assume {:verifier.code 0} true;
  $i137 := $add.bv32($i124, $i124);
  call {:cexpr "c"} boogie_si_record_bv32($i137);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 160, 9} true;
  assume {:verifier.code 0} true;
  $i138 := $slt.bv32($i132, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 160, 7} true;
  assume {:verifier.code 0} true;
  $i139 := $i137;
  assume {:branchcond $i138} true;
  goto $bb82, $bb83;
$bb76:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 15} true;
  assume {:verifier.code 0} true;
  assume ($i125 == 1bv1);
  goto $bb77;
$bb77:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 151, 9} true;
  assume {:verifier.code 0} true;
  $i128 := $add.bv32($i122, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 152, 5} true;
  assume {:verifier.code 0} true;
  $i127 := $i128;
  goto $bb81;
$bb78:
  assume !(($i125 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 20} true;
  assume {:verifier.code 0} true;
  $i126 := $sgt.bv32($i121, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 9} true;
  assume {:verifier.code 0} true;
  $i127 := $i122;
  assume {:branchcond $i126} true;
  goto $bb79, $bb80;
$bb79:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 9} true;
  assume {:verifier.code 0} true;
  assume ($i126 == 1bv1);
  goto $bb77;
$bb80:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i126 == 1bv1));
  goto $bb81;
$bb81:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 153, 3} true;
  assume {:verifier.code 0} true;
  $i124 := $i127;
  goto $bb75;
$bb82:
  assume ($i138 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 11} true;
  assume {:verifier.code 0} true;
  $i140 := $slt.bv32($i136, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i140} true;
  goto $bb85, $bb87;
$bb83:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 160, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i138 == 1bv1));
  goto $bb84;
$bb84:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 165, 7} true;
  assume {:verifier.code 0} true;
  $i144 := $sext.bv32.bv64($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 165, 9} true;
  assume {:verifier.code 0} true;
  $i145 := $srem.bv64($i144, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 165, 7} true;
  assume {:verifier.code 0} true;
  $i146 := $trunc.bv64.bv32($i145);
  call {:cexpr "a"} boogie_si_record_bv32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 166, 5} true;
  assume {:verifier.code 0} true;
  $i147 := $add.bv32($i146, $i146);
  call {:cexpr "a"} boogie_si_record_bv32($i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 167, 7} true;
  assume {:verifier.code 0} true;
  $i148 := $sext.bv32.bv64($i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 167, 9} true;
  assume {:verifier.code 0} true;
  $i149 := $srem.bv64($i148, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 167, 7} true;
  assume {:verifier.code 0} true;
  $i150 := $trunc.bv64.bv32($i149);
  call {:cexpr "b"} boogie_si_record_bv32($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 168, 5} true;
  assume {:verifier.code 0} true;
  $i151 := $add.bv32($i150, $i150);
  call {:cexpr "b"} boogie_si_record_bv32($i151);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 170, 5} true;
  assume {:verifier.code 0} true;
  $i152 := $add.bv32($i139, $i139);
  call {:cexpr "c"} boogie_si_record_bv32($i152);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 171, 9} true;
  assume {:verifier.code 0} true;
  $i153 := $slt.bv32($i147, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 171, 7} true;
  assume {:verifier.code 0} true;
  $i154 := $i152;
  assume {:branchcond $i153} true;
  goto $bb91, $bb92;
$bb85:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 15} true;
  assume {:verifier.code 0} true;
  assume ($i140 == 1bv1);
  goto $bb86;
$bb86:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 162, 9} true;
  assume {:verifier.code 0} true;
  $i143 := $add.bv32($i137, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i143);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 163, 5} true;
  assume {:verifier.code 0} true;
  $i142 := $i143;
  goto $bb90;
$bb87:
  assume !(($i140 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 20} true;
  assume {:verifier.code 0} true;
  $i141 := $sgt.bv32($i136, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 9} true;
  assume {:verifier.code 0} true;
  $i142 := $i137;
  assume {:branchcond $i141} true;
  goto $bb88, $bb89;
$bb88:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 9} true;
  assume {:verifier.code 0} true;
  assume ($i141 == 1bv1);
  goto $bb86;
$bb89:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i141 == 1bv1));
  goto $bb90;
$bb90:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 164, 3} true;
  assume {:verifier.code 0} true;
  $i139 := $i142;
  goto $bb84;
$bb91:
  assume ($i153 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 11} true;
  assume {:verifier.code 0} true;
  $i155 := $slt.bv32($i151, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i155} true;
  goto $bb94, $bb96;
$bb92:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 171, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i153 == 1bv1));
  goto $bb93;
$bb93:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 176, 7} true;
  assume {:verifier.code 0} true;
  $i159 := $sext.bv32.bv64($i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 176, 9} true;
  assume {:verifier.code 0} true;
  $i160 := $srem.bv64($i159, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 176, 7} true;
  assume {:verifier.code 0} true;
  $i161 := $trunc.bv64.bv32($i160);
  call {:cexpr "a"} boogie_si_record_bv32($i161);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 177, 5} true;
  assume {:verifier.code 0} true;
  $i162 := $add.bv32($i161, $i161);
  call {:cexpr "a"} boogie_si_record_bv32($i162);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 178, 7} true;
  assume {:verifier.code 0} true;
  $i163 := $sext.bv32.bv64($i151);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 178, 9} true;
  assume {:verifier.code 0} true;
  $i164 := $srem.bv64($i163, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 178, 7} true;
  assume {:verifier.code 0} true;
  $i165 := $trunc.bv64.bv32($i164);
  call {:cexpr "b"} boogie_si_record_bv32($i165);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 179, 5} true;
  assume {:verifier.code 0} true;
  $i166 := $add.bv32($i165, $i165);
  call {:cexpr "b"} boogie_si_record_bv32($i166);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 181, 5} true;
  assume {:verifier.code 0} true;
  $i167 := $add.bv32($i154, $i154);
  call {:cexpr "c"} boogie_si_record_bv32($i167);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 182, 9} true;
  assume {:verifier.code 0} true;
  $i168 := $slt.bv32($i162, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 182, 7} true;
  assume {:verifier.code 0} true;
  $i169 := $i167;
  assume {:branchcond $i168} true;
  goto $bb100, $bb101;
$bb94:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 15} true;
  assume {:verifier.code 0} true;
  assume ($i155 == 1bv1);
  goto $bb95;
$bb95:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 9} true;
  assume {:verifier.code 0} true;
  $i158 := $add.bv32($i152, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i158);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 174, 5} true;
  assume {:verifier.code 0} true;
  $i157 := $i158;
  goto $bb99;
$bb96:
  assume !(($i155 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 20} true;
  assume {:verifier.code 0} true;
  $i156 := $sgt.bv32($i151, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 9} true;
  assume {:verifier.code 0} true;
  $i157 := $i152;
  assume {:branchcond $i156} true;
  goto $bb97, $bb98;
$bb97:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 9} true;
  assume {:verifier.code 0} true;
  assume ($i156 == 1bv1);
  goto $bb95;
$bb98:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i156 == 1bv1));
  goto $bb99;
$bb99:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 175, 3} true;
  assume {:verifier.code 0} true;
  $i154 := $i157;
  goto $bb93;
$bb100:
  assume ($i168 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 11} true;
  assume {:verifier.code 0} true;
  $i170 := $slt.bv32($i166, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i170} true;
  goto $bb103, $bb105;
$bb101:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 182, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i168 == 1bv1));
  goto $bb102;
$bb102:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 187, 7} true;
  assume {:verifier.code 0} true;
  $i174 := $sext.bv32.bv64($i162);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 187, 9} true;
  assume {:verifier.code 0} true;
  $i175 := $srem.bv64($i174, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 187, 7} true;
  assume {:verifier.code 0} true;
  $i176 := $trunc.bv64.bv32($i175);
  call {:cexpr "a"} boogie_si_record_bv32($i176);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 188, 5} true;
  assume {:verifier.code 0} true;
  $i177 := $add.bv32($i176, $i176);
  call {:cexpr "a"} boogie_si_record_bv32($i177);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 189, 7} true;
  assume {:verifier.code 0} true;
  $i178 := $sext.bv32.bv64($i166);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 189, 9} true;
  assume {:verifier.code 0} true;
  $i179 := $srem.bv64($i178, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 189, 7} true;
  assume {:verifier.code 0} true;
  $i180 := $trunc.bv64.bv32($i179);
  call {:cexpr "b"} boogie_si_record_bv32($i180);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 190, 5} true;
  assume {:verifier.code 0} true;
  $i181 := $add.bv32($i180, $i180);
  call {:cexpr "b"} boogie_si_record_bv32($i181);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 192, 5} true;
  assume {:verifier.code 0} true;
  $i182 := $add.bv32($i169, $i169);
  call {:cexpr "c"} boogie_si_record_bv32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 193, 9} true;
  assume {:verifier.code 0} true;
  $i183 := $slt.bv32($i177, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 193, 7} true;
  assume {:verifier.code 0} true;
  $i184 := $i182;
  assume {:branchcond $i183} true;
  goto $bb109, $bb110;
$bb103:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 15} true;
  assume {:verifier.code 0} true;
  assume ($i170 == 1bv1);
  goto $bb104;
$bb104:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 184, 9} true;
  assume {:verifier.code 0} true;
  $i173 := $add.bv32($i167, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i173);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 185, 5} true;
  assume {:verifier.code 0} true;
  $i172 := $i173;
  goto $bb108;
$bb105:
  assume !(($i170 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 20} true;
  assume {:verifier.code 0} true;
  $i171 := $sgt.bv32($i166, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 9} true;
  assume {:verifier.code 0} true;
  $i172 := $i167;
  assume {:branchcond $i171} true;
  goto $bb106, $bb107;
$bb106:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 9} true;
  assume {:verifier.code 0} true;
  assume ($i171 == 1bv1);
  goto $bb104;
$bb107:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i171 == 1bv1));
  goto $bb108;
$bb108:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 186, 3} true;
  assume {:verifier.code 0} true;
  $i169 := $i172;
  goto $bb102;
$bb109:
  assume ($i183 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 11} true;
  assume {:verifier.code 0} true;
  $i185 := $slt.bv32($i181, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i185} true;
  goto $bb112, $bb114;
$bb110:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 193, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i183 == 1bv1));
  goto $bb111;
$bb111:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 198, 7} true;
  assume {:verifier.code 0} true;
  $i189 := $sext.bv32.bv64($i177);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 198, 9} true;
  assume {:verifier.code 0} true;
  $i190 := $srem.bv64($i189, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 198, 7} true;
  assume {:verifier.code 0} true;
  $i191 := $trunc.bv64.bv32($i190);
  call {:cexpr "a"} boogie_si_record_bv32($i191);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 199, 5} true;
  assume {:verifier.code 0} true;
  $i192 := $add.bv32($i191, $i191);
  call {:cexpr "a"} boogie_si_record_bv32($i192);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 200, 7} true;
  assume {:verifier.code 0} true;
  $i193 := $sext.bv32.bv64($i181);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 200, 9} true;
  assume {:verifier.code 0} true;
  $i194 := $srem.bv64($i193, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 200, 7} true;
  assume {:verifier.code 0} true;
  $i195 := $trunc.bv64.bv32($i194);
  call {:cexpr "b"} boogie_si_record_bv32($i195);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 201, 5} true;
  assume {:verifier.code 0} true;
  $i196 := $add.bv32($i195, $i195);
  call {:cexpr "b"} boogie_si_record_bv32($i196);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 203, 5} true;
  assume {:verifier.code 0} true;
  $i197 := $add.bv32($i184, $i184);
  call {:cexpr "c"} boogie_si_record_bv32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 204, 9} true;
  assume {:verifier.code 0} true;
  $i198 := $slt.bv32($i192, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 204, 7} true;
  assume {:verifier.code 0} true;
  $i199 := $i197;
  assume {:branchcond $i198} true;
  goto $bb118, $bb119;
$bb112:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 15} true;
  assume {:verifier.code 0} true;
  assume ($i185 == 1bv1);
  goto $bb113;
$bb113:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 195, 9} true;
  assume {:verifier.code 0} true;
  $i188 := $add.bv32($i182, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i188);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 196, 5} true;
  assume {:verifier.code 0} true;
  $i187 := $i188;
  goto $bb117;
$bb114:
  assume !(($i185 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 20} true;
  assume {:verifier.code 0} true;
  $i186 := $sgt.bv32($i181, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 9} true;
  assume {:verifier.code 0} true;
  $i187 := $i182;
  assume {:branchcond $i186} true;
  goto $bb115, $bb116;
$bb115:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 9} true;
  assume {:verifier.code 0} true;
  assume ($i186 == 1bv1);
  goto $bb113;
$bb116:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i186 == 1bv1));
  goto $bb117;
$bb117:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 197, 3} true;
  assume {:verifier.code 0} true;
  $i184 := $i187;
  goto $bb111;
$bb118:
  assume ($i198 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 11} true;
  assume {:verifier.code 0} true;
  $i200 := $slt.bv32($i196, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i200} true;
  goto $bb121, $bb123;
$bb119:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 204, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i198 == 1bv1));
  goto $bb120;
$bb120:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 209, 7} true;
  assume {:verifier.code 0} true;
  $i204 := $sext.bv32.bv64($i192);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 209, 9} true;
  assume {:verifier.code 0} true;
  $i205 := $srem.bv64($i204, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 209, 7} true;
  assume {:verifier.code 0} true;
  $i206 := $trunc.bv64.bv32($i205);
  call {:cexpr "a"} boogie_si_record_bv32($i206);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 210, 5} true;
  assume {:verifier.code 0} true;
  $i207 := $add.bv32($i206, $i206);
  call {:cexpr "a"} boogie_si_record_bv32($i207);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 211, 7} true;
  assume {:verifier.code 0} true;
  $i208 := $sext.bv32.bv64($i196);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 211, 9} true;
  assume {:verifier.code 0} true;
  $i209 := $srem.bv64($i208, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 211, 7} true;
  assume {:verifier.code 0} true;
  $i210 := $trunc.bv64.bv32($i209);
  call {:cexpr "b"} boogie_si_record_bv32($i210);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 212, 5} true;
  assume {:verifier.code 0} true;
  $i211 := $add.bv32($i210, $i210);
  call {:cexpr "b"} boogie_si_record_bv32($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 214, 5} true;
  assume {:verifier.code 0} true;
  $i212 := $add.bv32($i199, $i199);
  call {:cexpr "c"} boogie_si_record_bv32($i212);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 215, 9} true;
  assume {:verifier.code 0} true;
  $i213 := $slt.bv32($i207, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 215, 7} true;
  assume {:verifier.code 0} true;
  $i214 := $i212;
  assume {:branchcond $i213} true;
  goto $bb127, $bb128;
$bb121:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 15} true;
  assume {:verifier.code 0} true;
  assume ($i200 == 1bv1);
  goto $bb122;
$bb122:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 206, 9} true;
  assume {:verifier.code 0} true;
  $i203 := $add.bv32($i197, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i203);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 207, 5} true;
  assume {:verifier.code 0} true;
  $i202 := $i203;
  goto $bb126;
$bb123:
  assume !(($i200 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 20} true;
  assume {:verifier.code 0} true;
  $i201 := $sgt.bv32($i196, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 9} true;
  assume {:verifier.code 0} true;
  $i202 := $i197;
  assume {:branchcond $i201} true;
  goto $bb124, $bb125;
$bb124:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 9} true;
  assume {:verifier.code 0} true;
  assume ($i201 == 1bv1);
  goto $bb122;
$bb125:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i201 == 1bv1));
  goto $bb126;
$bb126:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 208, 3} true;
  assume {:verifier.code 0} true;
  $i199 := $i202;
  goto $bb120;
$bb127:
  assume ($i213 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 11} true;
  assume {:verifier.code 0} true;
  $i215 := $slt.bv32($i211, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i215} true;
  goto $bb130, $bb132;
$bb128:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 215, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i213 == 1bv1));
  goto $bb129;
$bb129:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 7} true;
  assume {:verifier.code 0} true;
  $i219 := $sext.bv32.bv64($i207);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 9} true;
  assume {:verifier.code 0} true;
  $i220 := $srem.bv64($i219, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 7} true;
  assume {:verifier.code 0} true;
  $i221 := $trunc.bv64.bv32($i220);
  call {:cexpr "a"} boogie_si_record_bv32($i221);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 5} true;
  assume {:verifier.code 0} true;
  $i222 := $add.bv32($i221, $i221);
  call {:cexpr "a"} boogie_si_record_bv32($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 222, 7} true;
  assume {:verifier.code 0} true;
  $i223 := $sext.bv32.bv64($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 222, 9} true;
  assume {:verifier.code 0} true;
  $i224 := $srem.bv64($i223, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 222, 7} true;
  assume {:verifier.code 0} true;
  $i225 := $trunc.bv64.bv32($i224);
  call {:cexpr "b"} boogie_si_record_bv32($i225);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 223, 5} true;
  assume {:verifier.code 0} true;
  $i226 := $add.bv32($i225, $i225);
  call {:cexpr "b"} boogie_si_record_bv32($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 225, 5} true;
  assume {:verifier.code 0} true;
  $i227 := $add.bv32($i214, $i214);
  call {:cexpr "c"} boogie_si_record_bv32($i227);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 226, 9} true;
  assume {:verifier.code 0} true;
  $i228 := $slt.bv32($i222, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 226, 7} true;
  assume {:verifier.code 0} true;
  $i229 := $i227;
  assume {:branchcond $i228} true;
  goto $bb136, $bb137;
$bb130:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 15} true;
  assume {:verifier.code 0} true;
  assume ($i215 == 1bv1);
  goto $bb131;
$bb131:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 217, 9} true;
  assume {:verifier.code 0} true;
  $i218 := $add.bv32($i212, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i218);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 218, 5} true;
  assume {:verifier.code 0} true;
  $i217 := $i218;
  goto $bb135;
$bb132:
  assume !(($i215 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 20} true;
  assume {:verifier.code 0} true;
  $i216 := $sgt.bv32($i211, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 9} true;
  assume {:verifier.code 0} true;
  $i217 := $i212;
  assume {:branchcond $i216} true;
  goto $bb133, $bb134;
$bb133:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 9} true;
  assume {:verifier.code 0} true;
  assume ($i216 == 1bv1);
  goto $bb131;
$bb134:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i216 == 1bv1));
  goto $bb135;
$bb135:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 219, 3} true;
  assume {:verifier.code 0} true;
  $i214 := $i217;
  goto $bb129;
$bb136:
  assume ($i228 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 11} true;
  assume {:verifier.code 0} true;
  $i230 := $slt.bv32($i226, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i230} true;
  goto $bb139, $bb141;
$bb137:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 226, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i228 == 1bv1));
  goto $bb138;
$bb138:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 7} true;
  assume {:verifier.code 0} true;
  $i234 := $sext.bv32.bv64($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 9} true;
  assume {:verifier.code 0} true;
  $i235 := $srem.bv64($i234, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 7} true;
  assume {:verifier.code 0} true;
  $i236 := $trunc.bv64.bv32($i235);
  call {:cexpr "a"} boogie_si_record_bv32($i236);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 5} true;
  assume {:verifier.code 0} true;
  $i237 := $add.bv32($i236, $i236);
  call {:cexpr "a"} boogie_si_record_bv32($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 7} true;
  assume {:verifier.code 0} true;
  $i238 := $sext.bv32.bv64($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 9} true;
  assume {:verifier.code 0} true;
  $i239 := $srem.bv64($i238, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 7} true;
  assume {:verifier.code 0} true;
  $i240 := $trunc.bv64.bv32($i239);
  call {:cexpr "b"} boogie_si_record_bv32($i240);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 234, 5} true;
  assume {:verifier.code 0} true;
  $i241 := $add.bv32($i240, $i240);
  call {:cexpr "b"} boogie_si_record_bv32($i241);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 236, 5} true;
  assume {:verifier.code 0} true;
  $i242 := $add.bv32($i229, $i229);
  call {:cexpr "c"} boogie_si_record_bv32($i242);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 237, 9} true;
  assume {:verifier.code 0} true;
  $i243 := $slt.bv32($i237, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 237, 7} true;
  assume {:verifier.code 0} true;
  $i244 := $i242;
  assume {:branchcond $i243} true;
  goto $bb145, $bb146;
$bb139:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 15} true;
  assume {:verifier.code 0} true;
  assume ($i230 == 1bv1);
  goto $bb140;
$bb140:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 228, 9} true;
  assume {:verifier.code 0} true;
  $i233 := $add.bv32($i227, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 229, 5} true;
  assume {:verifier.code 0} true;
  $i232 := $i233;
  goto $bb144;
$bb141:
  assume !(($i230 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 20} true;
  assume {:verifier.code 0} true;
  $i231 := $sgt.bv32($i226, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 9} true;
  assume {:verifier.code 0} true;
  $i232 := $i227;
  assume {:branchcond $i231} true;
  goto $bb142, $bb143;
$bb142:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 9} true;
  assume {:verifier.code 0} true;
  assume ($i231 == 1bv1);
  goto $bb140;
$bb143:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i231 == 1bv1));
  goto $bb144;
$bb144:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 230, 3} true;
  assume {:verifier.code 0} true;
  $i229 := $i232;
  goto $bb138;
$bb145:
  assume ($i243 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 11} true;
  assume {:verifier.code 0} true;
  $i245 := $slt.bv32($i241, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i245} true;
  goto $bb148, $bb150;
$bb146:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 237, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i243 == 1bv1));
  goto $bb147;
$bb147:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 242, 7} true;
  assume {:verifier.code 0} true;
  $i249 := $sext.bv32.bv64($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 242, 9} true;
  assume {:verifier.code 0} true;
  $i250 := $srem.bv64($i249, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 242, 7} true;
  assume {:verifier.code 0} true;
  $i251 := $trunc.bv64.bv32($i250);
  call {:cexpr "a"} boogie_si_record_bv32($i251);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 243, 5} true;
  assume {:verifier.code 0} true;
  $i252 := $add.bv32($i251, $i251);
  call {:cexpr "a"} boogie_si_record_bv32($i252);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 244, 7} true;
  assume {:verifier.code 0} true;
  $i253 := $sext.bv32.bv64($i241);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 244, 9} true;
  assume {:verifier.code 0} true;
  $i254 := $srem.bv64($i253, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 244, 7} true;
  assume {:verifier.code 0} true;
  $i255 := $trunc.bv64.bv32($i254);
  call {:cexpr "b"} boogie_si_record_bv32($i255);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 245, 5} true;
  assume {:verifier.code 0} true;
  $i256 := $add.bv32($i255, $i255);
  call {:cexpr "b"} boogie_si_record_bv32($i256);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 5} true;
  assume {:verifier.code 0} true;
  $i257 := $add.bv32($i244, $i244);
  call {:cexpr "c"} boogie_si_record_bv32($i257);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 248, 9} true;
  assume {:verifier.code 0} true;
  $i258 := $slt.bv32($i252, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 248, 7} true;
  assume {:verifier.code 0} true;
  $i259 := $i257;
  assume {:branchcond $i258} true;
  goto $bb154, $bb155;
$bb148:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 15} true;
  assume {:verifier.code 0} true;
  assume ($i245 == 1bv1);
  goto $bb149;
$bb149:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 239, 9} true;
  assume {:verifier.code 0} true;
  $i248 := $add.bv32($i242, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i248);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 240, 5} true;
  assume {:verifier.code 0} true;
  $i247 := $i248;
  goto $bb153;
$bb150:
  assume !(($i245 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 20} true;
  assume {:verifier.code 0} true;
  $i246 := $sgt.bv32($i241, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 9} true;
  assume {:verifier.code 0} true;
  $i247 := $i242;
  assume {:branchcond $i246} true;
  goto $bb151, $bb152;
$bb151:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 9} true;
  assume {:verifier.code 0} true;
  assume ($i246 == 1bv1);
  goto $bb149;
$bb152:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i246 == 1bv1));
  goto $bb153;
$bb153:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 241, 3} true;
  assume {:verifier.code 0} true;
  $i244 := $i247;
  goto $bb147;
$bb154:
  assume ($i258 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 11} true;
  assume {:verifier.code 0} true;
  $i260 := $slt.bv32($i256, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i260} true;
  goto $bb157, $bb159;
$bb155:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 248, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i258 == 1bv1));
  goto $bb156;
$bb156:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 7} true;
  assume {:verifier.code 0} true;
  $i264 := $sext.bv32.bv64($i252);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 9} true;
  assume {:verifier.code 0} true;
  $i265 := $srem.bv64($i264, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 7} true;
  assume {:verifier.code 0} true;
  $i266 := $trunc.bv64.bv32($i265);
  call {:cexpr "a"} boogie_si_record_bv32($i266);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 254, 5} true;
  assume {:verifier.code 0} true;
  $i267 := $add.bv32($i266, $i266);
  call {:cexpr "a"} boogie_si_record_bv32($i267);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 255, 7} true;
  assume {:verifier.code 0} true;
  $i268 := $sext.bv32.bv64($i256);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 255, 9} true;
  assume {:verifier.code 0} true;
  $i269 := $srem.bv64($i268, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 255, 7} true;
  assume {:verifier.code 0} true;
  $i270 := $trunc.bv64.bv32($i269);
  call {:cexpr "b"} boogie_si_record_bv32($i270);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 5} true;
  assume {:verifier.code 0} true;
  $i271 := $add.bv32($i270, $i270);
  call {:cexpr "b"} boogie_si_record_bv32($i271);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 5} true;
  assume {:verifier.code 0} true;
  $i272 := $add.bv32($i259, $i259);
  call {:cexpr "c"} boogie_si_record_bv32($i272);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 259, 9} true;
  assume {:verifier.code 0} true;
  $i273 := $slt.bv32($i267, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 259, 7} true;
  assume {:verifier.code 0} true;
  $i274 := $i272;
  assume {:branchcond $i273} true;
  goto $bb163, $bb164;
$bb157:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 15} true;
  assume {:verifier.code 0} true;
  assume ($i260 == 1bv1);
  goto $bb158;
$bb158:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 250, 9} true;
  assume {:verifier.code 0} true;
  $i263 := $add.bv32($i257, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i263);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 251, 5} true;
  assume {:verifier.code 0} true;
  $i262 := $i263;
  goto $bb162;
$bb159:
  assume !(($i260 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 20} true;
  assume {:verifier.code 0} true;
  $i261 := $sgt.bv32($i256, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 9} true;
  assume {:verifier.code 0} true;
  $i262 := $i257;
  assume {:branchcond $i261} true;
  goto $bb160, $bb161;
$bb160:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 9} true;
  assume {:verifier.code 0} true;
  assume ($i261 == 1bv1);
  goto $bb158;
$bb161:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i261 == 1bv1));
  goto $bb162;
$bb162:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 252, 3} true;
  assume {:verifier.code 0} true;
  $i259 := $i262;
  goto $bb156;
$bb163:
  assume ($i273 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 11} true;
  assume {:verifier.code 0} true;
  $i275 := $slt.bv32($i271, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i275} true;
  goto $bb166, $bb168;
$bb164:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 259, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i273 == 1bv1));
  goto $bb165;
$bb165:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 264, 7} true;
  assume {:verifier.code 0} true;
  $i279 := $sext.bv32.bv64($i267);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 264, 9} true;
  assume {:verifier.code 0} true;
  $i280 := $srem.bv64($i279, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 264, 7} true;
  assume {:verifier.code 0} true;
  $i281 := $trunc.bv64.bv32($i280);
  call {:cexpr "a"} boogie_si_record_bv32($i281);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 265, 5} true;
  assume {:verifier.code 0} true;
  $i282 := $add.bv32($i281, $i281);
  call {:cexpr "a"} boogie_si_record_bv32($i282);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 266, 7} true;
  assume {:verifier.code 0} true;
  $i283 := $sext.bv32.bv64($i271);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 266, 9} true;
  assume {:verifier.code 0} true;
  $i284 := $srem.bv64($i283, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 266, 7} true;
  assume {:verifier.code 0} true;
  $i285 := $trunc.bv64.bv32($i284);
  call {:cexpr "b"} boogie_si_record_bv32($i285);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 267, 5} true;
  assume {:verifier.code 0} true;
  $i286 := $add.bv32($i285, $i285);
  call {:cexpr "b"} boogie_si_record_bv32($i286);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 269, 5} true;
  assume {:verifier.code 0} true;
  $i287 := $add.bv32($i274, $i274);
  call {:cexpr "c"} boogie_si_record_bv32($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 270, 9} true;
  assume {:verifier.code 0} true;
  $i288 := $slt.bv32($i282, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 270, 7} true;
  assume {:verifier.code 0} true;
  $i289 := $i287;
  assume {:branchcond $i288} true;
  goto $bb172, $bb173;
$bb166:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 15} true;
  assume {:verifier.code 0} true;
  assume ($i275 == 1bv1);
  goto $bb167;
$bb167:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 261, 9} true;
  assume {:verifier.code 0} true;
  $i278 := $add.bv32($i272, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i278);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 262, 5} true;
  assume {:verifier.code 0} true;
  $i277 := $i278;
  goto $bb171;
$bb168:
  assume !(($i275 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 20} true;
  assume {:verifier.code 0} true;
  $i276 := $sgt.bv32($i271, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 9} true;
  assume {:verifier.code 0} true;
  $i277 := $i272;
  assume {:branchcond $i276} true;
  goto $bb169, $bb170;
$bb169:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 9} true;
  assume {:verifier.code 0} true;
  assume ($i276 == 1bv1);
  goto $bb167;
$bb170:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i276 == 1bv1));
  goto $bb171;
$bb171:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 263, 3} true;
  assume {:verifier.code 0} true;
  $i274 := $i277;
  goto $bb165;
$bb172:
  assume ($i288 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 11} true;
  assume {:verifier.code 0} true;
  $i290 := $slt.bv32($i286, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i290} true;
  goto $bb175, $bb177;
$bb173:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 270, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i288 == 1bv1));
  goto $bb174;
$bb174:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 275, 7} true;
  assume {:verifier.code 0} true;
  $i294 := $sext.bv32.bv64($i282);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 275, 9} true;
  assume {:verifier.code 0} true;
  $i295 := $srem.bv64($i294, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 275, 7} true;
  assume {:verifier.code 0} true;
  $i296 := $trunc.bv64.bv32($i295);
  call {:cexpr "a"} boogie_si_record_bv32($i296);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 276, 5} true;
  assume {:verifier.code 0} true;
  $i297 := $add.bv32($i296, $i296);
  call {:cexpr "a"} boogie_si_record_bv32($i297);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 277, 7} true;
  assume {:verifier.code 0} true;
  $i298 := $sext.bv32.bv64($i286);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 277, 9} true;
  assume {:verifier.code 0} true;
  $i299 := $srem.bv64($i298, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 277, 7} true;
  assume {:verifier.code 0} true;
  $i300 := $trunc.bv64.bv32($i299);
  call {:cexpr "b"} boogie_si_record_bv32($i300);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 278, 5} true;
  assume {:verifier.code 0} true;
  $i301 := $add.bv32($i300, $i300);
  call {:cexpr "b"} boogie_si_record_bv32($i301);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 280, 5} true;
  assume {:verifier.code 0} true;
  $i302 := $add.bv32($i289, $i289);
  call {:cexpr "c"} boogie_si_record_bv32($i302);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 281, 9} true;
  assume {:verifier.code 0} true;
  $i303 := $slt.bv32($i297, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 281, 7} true;
  assume {:verifier.code 0} true;
  $i304 := $i302;
  assume {:branchcond $i303} true;
  goto $bb181, $bb182;
$bb175:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 15} true;
  assume {:verifier.code 0} true;
  assume ($i290 == 1bv1);
  goto $bb176;
$bb176:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 272, 9} true;
  assume {:verifier.code 0} true;
  $i293 := $add.bv32($i287, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i293);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 273, 5} true;
  assume {:verifier.code 0} true;
  $i292 := $i293;
  goto $bb180;
$bb177:
  assume !(($i290 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 20} true;
  assume {:verifier.code 0} true;
  $i291 := $sgt.bv32($i286, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 9} true;
  assume {:verifier.code 0} true;
  $i292 := $i287;
  assume {:branchcond $i291} true;
  goto $bb178, $bb179;
$bb178:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 9} true;
  assume {:verifier.code 0} true;
  assume ($i291 == 1bv1);
  goto $bb176;
$bb179:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i291 == 1bv1));
  goto $bb180;
$bb180:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 274, 3} true;
  assume {:verifier.code 0} true;
  $i289 := $i292;
  goto $bb174;
$bb181:
  assume ($i303 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 11} true;
  assume {:verifier.code 0} true;
  $i305 := $slt.bv32($i301, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i305} true;
  goto $bb184, $bb186;
$bb182:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 281, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i303 == 1bv1));
  goto $bb183;
$bb183:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 286, 7} true;
  assume {:verifier.code 0} true;
  $i309 := $sext.bv32.bv64($i297);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 286, 9} true;
  assume {:verifier.code 0} true;
  $i310 := $srem.bv64($i309, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 286, 7} true;
  assume {:verifier.code 0} true;
  $i311 := $trunc.bv64.bv32($i310);
  call {:cexpr "a"} boogie_si_record_bv32($i311);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 287, 5} true;
  assume {:verifier.code 0} true;
  $i312 := $add.bv32($i311, $i311);
  call {:cexpr "a"} boogie_si_record_bv32($i312);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 288, 7} true;
  assume {:verifier.code 0} true;
  $i313 := $sext.bv32.bv64($i301);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 288, 9} true;
  assume {:verifier.code 0} true;
  $i314 := $srem.bv64($i313, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 288, 7} true;
  assume {:verifier.code 0} true;
  $i315 := $trunc.bv64.bv32($i314);
  call {:cexpr "b"} boogie_si_record_bv32($i315);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 289, 5} true;
  assume {:verifier.code 0} true;
  $i316 := $add.bv32($i315, $i315);
  call {:cexpr "b"} boogie_si_record_bv32($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 291, 5} true;
  assume {:verifier.code 0} true;
  $i317 := $add.bv32($i304, $i304);
  call {:cexpr "c"} boogie_si_record_bv32($i317);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 292, 9} true;
  assume {:verifier.code 0} true;
  $i318 := $slt.bv32($i312, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 292, 7} true;
  assume {:verifier.code 0} true;
  $i319 := $i317;
  assume {:branchcond $i318} true;
  goto $bb190, $bb191;
$bb184:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 15} true;
  assume {:verifier.code 0} true;
  assume ($i305 == 1bv1);
  goto $bb185;
$bb185:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 283, 9} true;
  assume {:verifier.code 0} true;
  $i308 := $add.bv32($i302, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i308);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 284, 5} true;
  assume {:verifier.code 0} true;
  $i307 := $i308;
  goto $bb189;
$bb186:
  assume !(($i305 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 20} true;
  assume {:verifier.code 0} true;
  $i306 := $sgt.bv32($i301, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 9} true;
  assume {:verifier.code 0} true;
  $i307 := $i302;
  assume {:branchcond $i306} true;
  goto $bb187, $bb188;
$bb187:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 9} true;
  assume {:verifier.code 0} true;
  assume ($i306 == 1bv1);
  goto $bb185;
$bb188:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i306 == 1bv1));
  goto $bb189;
$bb189:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 285, 3} true;
  assume {:verifier.code 0} true;
  $i304 := $i307;
  goto $bb183;
$bb190:
  assume ($i318 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 11} true;
  assume {:verifier.code 0} true;
  $i320 := $slt.bv32($i316, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i320} true;
  goto $bb193, $bb195;
$bb191:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 292, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i318 == 1bv1));
  goto $bb192;
$bb192:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 297, 7} true;
  assume {:verifier.code 0} true;
  $i324 := $sext.bv32.bv64($i312);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 297, 9} true;
  assume {:verifier.code 0} true;
  $i325 := $srem.bv64($i324, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 297, 7} true;
  assume {:verifier.code 0} true;
  $i326 := $trunc.bv64.bv32($i325);
  call {:cexpr "a"} boogie_si_record_bv32($i326);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 298, 5} true;
  assume {:verifier.code 0} true;
  $i327 := $add.bv32($i326, $i326);
  call {:cexpr "a"} boogie_si_record_bv32($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 299, 7} true;
  assume {:verifier.code 0} true;
  $i328 := $sext.bv32.bv64($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 299, 9} true;
  assume {:verifier.code 0} true;
  $i329 := $srem.bv64($i328, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 299, 7} true;
  assume {:verifier.code 0} true;
  $i330 := $trunc.bv64.bv32($i329);
  call {:cexpr "b"} boogie_si_record_bv32($i330);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 300, 5} true;
  assume {:verifier.code 0} true;
  $i331 := $add.bv32($i330, $i330);
  call {:cexpr "b"} boogie_si_record_bv32($i331);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 302, 5} true;
  assume {:verifier.code 0} true;
  $i332 := $add.bv32($i319, $i319);
  call {:cexpr "c"} boogie_si_record_bv32($i332);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 303, 9} true;
  assume {:verifier.code 0} true;
  $i333 := $slt.bv32($i327, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 303, 7} true;
  assume {:verifier.code 0} true;
  $i334 := $i332;
  assume {:branchcond $i333} true;
  goto $bb199, $bb200;
$bb193:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 15} true;
  assume {:verifier.code 0} true;
  assume ($i320 == 1bv1);
  goto $bb194;
$bb194:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 294, 9} true;
  assume {:verifier.code 0} true;
  $i323 := $add.bv32($i317, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i323);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 295, 5} true;
  assume {:verifier.code 0} true;
  $i322 := $i323;
  goto $bb198;
$bb195:
  assume !(($i320 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 20} true;
  assume {:verifier.code 0} true;
  $i321 := $sgt.bv32($i316, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 9} true;
  assume {:verifier.code 0} true;
  $i322 := $i317;
  assume {:branchcond $i321} true;
  goto $bb196, $bb197;
$bb196:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 9} true;
  assume {:verifier.code 0} true;
  assume ($i321 == 1bv1);
  goto $bb194;
$bb197:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i321 == 1bv1));
  goto $bb198;
$bb198:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 296, 3} true;
  assume {:verifier.code 0} true;
  $i319 := $i322;
  goto $bb192;
$bb199:
  assume ($i333 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 11} true;
  assume {:verifier.code 0} true;
  $i335 := $slt.bv32($i331, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i335} true;
  goto $bb202, $bb204;
$bb200:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 303, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i333 == 1bv1));
  goto $bb201;
$bb201:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 308, 7} true;
  assume {:verifier.code 0} true;
  $i339 := $sext.bv32.bv64($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 308, 9} true;
  assume {:verifier.code 0} true;
  $i340 := $srem.bv64($i339, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 308, 7} true;
  assume {:verifier.code 0} true;
  $i341 := $trunc.bv64.bv32($i340);
  call {:cexpr "a"} boogie_si_record_bv32($i341);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 309, 5} true;
  assume {:verifier.code 0} true;
  $i342 := $add.bv32($i341, $i341);
  call {:cexpr "a"} boogie_si_record_bv32($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 310, 7} true;
  assume {:verifier.code 0} true;
  $i343 := $sext.bv32.bv64($i331);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 310, 9} true;
  assume {:verifier.code 0} true;
  $i344 := $srem.bv64($i343, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 310, 7} true;
  assume {:verifier.code 0} true;
  $i345 := $trunc.bv64.bv32($i344);
  call {:cexpr "b"} boogie_si_record_bv32($i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 311, 5} true;
  assume {:verifier.code 0} true;
  $i346 := $add.bv32($i345, $i345);
  call {:cexpr "b"} boogie_si_record_bv32($i346);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 313, 5} true;
  assume {:verifier.code 0} true;
  $i347 := $add.bv32($i334, $i334);
  call {:cexpr "c"} boogie_si_record_bv32($i347);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 314, 9} true;
  assume {:verifier.code 0} true;
  $i348 := $slt.bv32($i342, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 314, 7} true;
  assume {:verifier.code 0} true;
  $i349 := $i347;
  assume {:branchcond $i348} true;
  goto $bb208, $bb209;
$bb202:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 15} true;
  assume {:verifier.code 0} true;
  assume ($i335 == 1bv1);
  goto $bb203;
$bb203:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 305, 9} true;
  assume {:verifier.code 0} true;
  $i338 := $add.bv32($i332, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 306, 5} true;
  assume {:verifier.code 0} true;
  $i337 := $i338;
  goto $bb207;
$bb204:
  assume !(($i335 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 20} true;
  assume {:verifier.code 0} true;
  $i336 := $sgt.bv32($i331, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 9} true;
  assume {:verifier.code 0} true;
  $i337 := $i332;
  assume {:branchcond $i336} true;
  goto $bb205, $bb206;
$bb205:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 9} true;
  assume {:verifier.code 0} true;
  assume ($i336 == 1bv1);
  goto $bb203;
$bb206:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i336 == 1bv1));
  goto $bb207;
$bb207:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 307, 3} true;
  assume {:verifier.code 0} true;
  $i334 := $i337;
  goto $bb201;
$bb208:
  assume ($i348 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 11} true;
  assume {:verifier.code 0} true;
  $i350 := $slt.bv32($i346, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i350} true;
  goto $bb211, $bb213;
$bb209:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 314, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i348 == 1bv1));
  goto $bb210;
$bb210:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 319, 7} true;
  assume {:verifier.code 0} true;
  $i354 := $sext.bv32.bv64($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 319, 9} true;
  assume {:verifier.code 0} true;
  $i355 := $srem.bv64($i354, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 319, 7} true;
  assume {:verifier.code 0} true;
  $i356 := $trunc.bv64.bv32($i355);
  call {:cexpr "a"} boogie_si_record_bv32($i356);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 320, 5} true;
  assume {:verifier.code 0} true;
  $i357 := $add.bv32($i356, $i356);
  call {:cexpr "a"} boogie_si_record_bv32($i357);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 321, 7} true;
  assume {:verifier.code 0} true;
  $i358 := $sext.bv32.bv64($i346);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 321, 9} true;
  assume {:verifier.code 0} true;
  $i359 := $srem.bv64($i358, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 321, 7} true;
  assume {:verifier.code 0} true;
  $i360 := $trunc.bv64.bv32($i359);
  call {:cexpr "b"} boogie_si_record_bv32($i360);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 322, 5} true;
  assume {:verifier.code 0} true;
  $i361 := $add.bv32($i360, $i360);
  call {:cexpr "b"} boogie_si_record_bv32($i361);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 324, 5} true;
  assume {:verifier.code 0} true;
  $i362 := $add.bv32($i349, $i349);
  call {:cexpr "c"} boogie_si_record_bv32($i362);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 325, 9} true;
  assume {:verifier.code 0} true;
  $i363 := $slt.bv32($i357, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 325, 7} true;
  assume {:verifier.code 0} true;
  $i364 := $i362;
  assume {:branchcond $i363} true;
  goto $bb217, $bb218;
$bb211:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 15} true;
  assume {:verifier.code 0} true;
  assume ($i350 == 1bv1);
  goto $bb212;
$bb212:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 316, 9} true;
  assume {:verifier.code 0} true;
  $i353 := $add.bv32($i347, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i353);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 317, 5} true;
  assume {:verifier.code 0} true;
  $i352 := $i353;
  goto $bb216;
$bb213:
  assume !(($i350 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 20} true;
  assume {:verifier.code 0} true;
  $i351 := $sgt.bv32($i346, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 9} true;
  assume {:verifier.code 0} true;
  $i352 := $i347;
  assume {:branchcond $i351} true;
  goto $bb214, $bb215;
$bb214:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 9} true;
  assume {:verifier.code 0} true;
  assume ($i351 == 1bv1);
  goto $bb212;
$bb215:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i351 == 1bv1));
  goto $bb216;
$bb216:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 318, 3} true;
  assume {:verifier.code 0} true;
  $i349 := $i352;
  goto $bb210;
$bb217:
  assume ($i363 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 11} true;
  assume {:verifier.code 0} true;
  $i365 := $slt.bv32($i361, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i365} true;
  goto $bb220, $bb222;
$bb218:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 325, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i363 == 1bv1));
  goto $bb219;
$bb219:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 330, 7} true;
  assume {:verifier.code 0} true;
  $i369 := $sext.bv32.bv64($i357);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 330, 9} true;
  assume {:verifier.code 0} true;
  $i370 := $srem.bv64($i369, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 330, 7} true;
  assume {:verifier.code 0} true;
  $i371 := $trunc.bv64.bv32($i370);
  call {:cexpr "a"} boogie_si_record_bv32($i371);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 331, 5} true;
  assume {:verifier.code 0} true;
  $i372 := $add.bv32($i371, $i371);
  call {:cexpr "a"} boogie_si_record_bv32($i372);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 332, 7} true;
  assume {:verifier.code 0} true;
  $i373 := $sext.bv32.bv64($i361);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 332, 9} true;
  assume {:verifier.code 0} true;
  $i374 := $srem.bv64($i373, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 332, 7} true;
  assume {:verifier.code 0} true;
  $i375 := $trunc.bv64.bv32($i374);
  call {:cexpr "b"} boogie_si_record_bv32($i375);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 333, 5} true;
  assume {:verifier.code 0} true;
  $i376 := $add.bv32($i375, $i375);
  call {:cexpr "b"} boogie_si_record_bv32($i376);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 335, 5} true;
  assume {:verifier.code 0} true;
  $i377 := $add.bv32($i364, $i364);
  call {:cexpr "c"} boogie_si_record_bv32($i377);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 336, 9} true;
  assume {:verifier.code 0} true;
  $i378 := $slt.bv32($i372, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 336, 7} true;
  assume {:verifier.code 0} true;
  $i379 := $i377;
  assume {:branchcond $i378} true;
  goto $bb226, $bb227;
$bb220:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 15} true;
  assume {:verifier.code 0} true;
  assume ($i365 == 1bv1);
  goto $bb221;
$bb221:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 327, 9} true;
  assume {:verifier.code 0} true;
  $i368 := $add.bv32($i362, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i368);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 328, 5} true;
  assume {:verifier.code 0} true;
  $i367 := $i368;
  goto $bb225;
$bb222:
  assume !(($i365 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 20} true;
  assume {:verifier.code 0} true;
  $i366 := $sgt.bv32($i361, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 9} true;
  assume {:verifier.code 0} true;
  $i367 := $i362;
  assume {:branchcond $i366} true;
  goto $bb223, $bb224;
$bb223:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 9} true;
  assume {:verifier.code 0} true;
  assume ($i366 == 1bv1);
  goto $bb221;
$bb224:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i366 == 1bv1));
  goto $bb225;
$bb225:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 329, 3} true;
  assume {:verifier.code 0} true;
  $i364 := $i367;
  goto $bb219;
$bb226:
  assume ($i378 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 11} true;
  assume {:verifier.code 0} true;
  $i380 := $slt.bv32($i376, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i380} true;
  goto $bb229, $bb231;
$bb227:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 336, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i378 == 1bv1));
  goto $bb228;
$bb228:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 341, 7} true;
  assume {:verifier.code 0} true;
  $i384 := $sext.bv32.bv64($i372);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 341, 9} true;
  assume {:verifier.code 0} true;
  $i385 := $srem.bv64($i384, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 341, 7} true;
  assume {:verifier.code 0} true;
  $i386 := $trunc.bv64.bv32($i385);
  call {:cexpr "a"} boogie_si_record_bv32($i386);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 342, 5} true;
  assume {:verifier.code 0} true;
  $i387 := $add.bv32($i386, $i386);
  call {:cexpr "a"} boogie_si_record_bv32($i387);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 343, 7} true;
  assume {:verifier.code 0} true;
  $i388 := $sext.bv32.bv64($i376);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 343, 9} true;
  assume {:verifier.code 0} true;
  $i389 := $srem.bv64($i388, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 343, 7} true;
  assume {:verifier.code 0} true;
  $i390 := $trunc.bv64.bv32($i389);
  call {:cexpr "b"} boogie_si_record_bv32($i390);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 344, 5} true;
  assume {:verifier.code 0} true;
  $i391 := $add.bv32($i390, $i390);
  call {:cexpr "b"} boogie_si_record_bv32($i391);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 346, 5} true;
  assume {:verifier.code 0} true;
  $i392 := $add.bv32($i379, $i379);
  call {:cexpr "c"} boogie_si_record_bv32($i392);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 347, 9} true;
  assume {:verifier.code 0} true;
  $i393 := $slt.bv32($i387, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 347, 7} true;
  assume {:verifier.code 0} true;
  $i394 := $i392;
  assume {:branchcond $i393} true;
  goto $bb235, $bb236;
$bb229:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 15} true;
  assume {:verifier.code 0} true;
  assume ($i380 == 1bv1);
  goto $bb230;
$bb230:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 338, 9} true;
  assume {:verifier.code 0} true;
  $i383 := $add.bv32($i377, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i383);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 339, 5} true;
  assume {:verifier.code 0} true;
  $i382 := $i383;
  goto $bb234;
$bb231:
  assume !(($i380 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 20} true;
  assume {:verifier.code 0} true;
  $i381 := $sgt.bv32($i376, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 9} true;
  assume {:verifier.code 0} true;
  $i382 := $i377;
  assume {:branchcond $i381} true;
  goto $bb232, $bb233;
$bb232:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 9} true;
  assume {:verifier.code 0} true;
  assume ($i381 == 1bv1);
  goto $bb230;
$bb233:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i381 == 1bv1));
  goto $bb234;
$bb234:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 340, 3} true;
  assume {:verifier.code 0} true;
  $i379 := $i382;
  goto $bb228;
$bb235:
  assume ($i393 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 11} true;
  assume {:verifier.code 0} true;
  $i395 := $slt.bv32($i391, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i395} true;
  goto $bb238, $bb240;
$bb236:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 347, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i393 == 1bv1));
  goto $bb237;
$bb237:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 352, 7} true;
  assume {:verifier.code 0} true;
  $i399 := $sext.bv32.bv64($i387);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 352, 9} true;
  assume {:verifier.code 0} true;
  $i400 := $srem.bv64($i399, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 352, 7} true;
  assume {:verifier.code 0} true;
  $i401 := $trunc.bv64.bv32($i400);
  call {:cexpr "a"} boogie_si_record_bv32($i401);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 353, 5} true;
  assume {:verifier.code 0} true;
  $i402 := $add.bv32($i401, $i401);
  call {:cexpr "a"} boogie_si_record_bv32($i402);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 354, 7} true;
  assume {:verifier.code 0} true;
  $i403 := $sext.bv32.bv64($i391);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 354, 9} true;
  assume {:verifier.code 0} true;
  $i404 := $srem.bv64($i403, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 354, 7} true;
  assume {:verifier.code 0} true;
  $i405 := $trunc.bv64.bv32($i404);
  call {:cexpr "b"} boogie_si_record_bv32($i405);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 355, 5} true;
  assume {:verifier.code 0} true;
  $i406 := $add.bv32($i405, $i405);
  call {:cexpr "b"} boogie_si_record_bv32($i406);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 357, 5} true;
  assume {:verifier.code 0} true;
  $i407 := $add.bv32($i394, $i394);
  call {:cexpr "c"} boogie_si_record_bv32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 358, 9} true;
  assume {:verifier.code 0} true;
  $i408 := $slt.bv32($i402, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 358, 7} true;
  assume {:verifier.code 0} true;
  $i409 := $i407;
  assume {:branchcond $i408} true;
  goto $bb244, $bb245;
$bb238:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 15} true;
  assume {:verifier.code 0} true;
  assume ($i395 == 1bv1);
  goto $bb239;
$bb239:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 349, 9} true;
  assume {:verifier.code 0} true;
  $i398 := $add.bv32($i392, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i398);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 350, 5} true;
  assume {:verifier.code 0} true;
  $i397 := $i398;
  goto $bb243;
$bb240:
  assume !(($i395 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 20} true;
  assume {:verifier.code 0} true;
  $i396 := $sgt.bv32($i391, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 9} true;
  assume {:verifier.code 0} true;
  $i397 := $i392;
  assume {:branchcond $i396} true;
  goto $bb241, $bb242;
$bb241:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 9} true;
  assume {:verifier.code 0} true;
  assume ($i396 == 1bv1);
  goto $bb239;
$bb242:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i396 == 1bv1));
  goto $bb243;
$bb243:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 351, 3} true;
  assume {:verifier.code 0} true;
  $i394 := $i397;
  goto $bb237;
$bb244:
  assume ($i408 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 11} true;
  assume {:verifier.code 0} true;
  $i410 := $slt.bv32($i406, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i410} true;
  goto $bb247, $bb249;
$bb245:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 358, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i408 == 1bv1));
  goto $bb246;
$bb246:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 363, 7} true;
  assume {:verifier.code 0} true;
  $i414 := $sext.bv32.bv64($i402);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 363, 9} true;
  assume {:verifier.code 0} true;
  $i415 := $srem.bv64($i414, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 363, 7} true;
  assume {:verifier.code 0} true;
  $i416 := $trunc.bv64.bv32($i415);
  call {:cexpr "a"} boogie_si_record_bv32($i416);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 364, 5} true;
  assume {:verifier.code 0} true;
  $i417 := $add.bv32($i416, $i416);
  call {:cexpr "a"} boogie_si_record_bv32($i417);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 365, 7} true;
  assume {:verifier.code 0} true;
  $i418 := $sext.bv32.bv64($i406);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 365, 9} true;
  assume {:verifier.code 0} true;
  $i419 := $srem.bv64($i418, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 365, 7} true;
  assume {:verifier.code 0} true;
  $i420 := $trunc.bv64.bv32($i419);
  call {:cexpr "b"} boogie_si_record_bv32($i420);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 366, 5} true;
  assume {:verifier.code 0} true;
  $i421 := $add.bv32($i420, $i420);
  call {:cexpr "b"} boogie_si_record_bv32($i421);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 368, 5} true;
  assume {:verifier.code 0} true;
  $i422 := $add.bv32($i409, $i409);
  call {:cexpr "c"} boogie_si_record_bv32($i422);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 369, 9} true;
  assume {:verifier.code 0} true;
  $i423 := $slt.bv32($i417, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 369, 7} true;
  assume {:verifier.code 0} true;
  $i424 := $i422;
  assume {:branchcond $i423} true;
  goto $bb253, $bb254;
$bb247:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 15} true;
  assume {:verifier.code 0} true;
  assume ($i410 == 1bv1);
  goto $bb248;
$bb248:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 360, 9} true;
  assume {:verifier.code 0} true;
  $i413 := $add.bv32($i407, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i413);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 361, 5} true;
  assume {:verifier.code 0} true;
  $i412 := $i413;
  goto $bb252;
$bb249:
  assume !(($i410 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 20} true;
  assume {:verifier.code 0} true;
  $i411 := $sgt.bv32($i406, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 9} true;
  assume {:verifier.code 0} true;
  $i412 := $i407;
  assume {:branchcond $i411} true;
  goto $bb250, $bb251;
$bb250:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 9} true;
  assume {:verifier.code 0} true;
  assume ($i411 == 1bv1);
  goto $bb248;
$bb251:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i411 == 1bv1));
  goto $bb252;
$bb252:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 362, 3} true;
  assume {:verifier.code 0} true;
  $i409 := $i412;
  goto $bb246;
$bb253:
  assume ($i423 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 11} true;
  assume {:verifier.code 0} true;
  $i425 := $slt.bv32($i421, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i425} true;
  goto $bb256, $bb258;
$bb254:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 369, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i423 == 1bv1));
  goto $bb255;
$bb255:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 374, 7} true;
  assume {:verifier.code 0} true;
  $i429 := $sext.bv32.bv64($i417);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 374, 9} true;
  assume {:verifier.code 0} true;
  $i430 := $srem.bv64($i429, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 374, 7} true;
  assume {:verifier.code 0} true;
  $i431 := $trunc.bv64.bv32($i430);
  call {:cexpr "a"} boogie_si_record_bv32($i431);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 375, 5} true;
  assume {:verifier.code 0} true;
  $i432 := $add.bv32($i431, $i431);
  call {:cexpr "a"} boogie_si_record_bv32($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 376, 7} true;
  assume {:verifier.code 0} true;
  $i433 := $sext.bv32.bv64($i421);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 376, 9} true;
  assume {:verifier.code 0} true;
  $i434 := $srem.bv64($i433, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 376, 7} true;
  assume {:verifier.code 0} true;
  $i435 := $trunc.bv64.bv32($i434);
  call {:cexpr "b"} boogie_si_record_bv32($i435);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 377, 5} true;
  assume {:verifier.code 0} true;
  $i436 := $add.bv32($i435, $i435);
  call {:cexpr "b"} boogie_si_record_bv32($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 379, 5} true;
  assume {:verifier.code 0} true;
  $i437 := $add.bv32($i424, $i424);
  call {:cexpr "c"} boogie_si_record_bv32($i437);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 380, 9} true;
  assume {:verifier.code 0} true;
  $i438 := $slt.bv32($i432, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 380, 7} true;
  assume {:verifier.code 0} true;
  $i439 := $i437;
  assume {:branchcond $i438} true;
  goto $bb262, $bb263;
$bb256:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 15} true;
  assume {:verifier.code 0} true;
  assume ($i425 == 1bv1);
  goto $bb257;
$bb257:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 371, 9} true;
  assume {:verifier.code 0} true;
  $i428 := $add.bv32($i422, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i428);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 372, 5} true;
  assume {:verifier.code 0} true;
  $i427 := $i428;
  goto $bb261;
$bb258:
  assume !(($i425 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 20} true;
  assume {:verifier.code 0} true;
  $i426 := $sgt.bv32($i421, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 9} true;
  assume {:verifier.code 0} true;
  $i427 := $i422;
  assume {:branchcond $i426} true;
  goto $bb259, $bb260;
$bb259:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 9} true;
  assume {:verifier.code 0} true;
  assume ($i426 == 1bv1);
  goto $bb257;
$bb260:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i426 == 1bv1));
  goto $bb261;
$bb261:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 373, 3} true;
  assume {:verifier.code 0} true;
  $i424 := $i427;
  goto $bb255;
$bb262:
  assume ($i438 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 11} true;
  assume {:verifier.code 0} true;
  $i440 := $slt.bv32($i436, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i440} true;
  goto $bb265, $bb267;
$bb263:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 380, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i438 == 1bv1));
  goto $bb264;
$bb264:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 385, 7} true;
  assume {:verifier.code 0} true;
  $i444 := $sext.bv32.bv64($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 385, 9} true;
  assume {:verifier.code 0} true;
  $i445 := $srem.bv64($i444, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 385, 7} true;
  assume {:verifier.code 0} true;
  $i446 := $trunc.bv64.bv32($i445);
  call {:cexpr "a"} boogie_si_record_bv32($i446);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 386, 5} true;
  assume {:verifier.code 0} true;
  $i447 := $add.bv32($i446, $i446);
  call {:cexpr "a"} boogie_si_record_bv32($i447);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 387, 7} true;
  assume {:verifier.code 0} true;
  $i448 := $sext.bv32.bv64($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 387, 9} true;
  assume {:verifier.code 0} true;
  $i449 := $srem.bv64($i448, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 387, 7} true;
  assume {:verifier.code 0} true;
  $i450 := $trunc.bv64.bv32($i449);
  call {:cexpr "b"} boogie_si_record_bv32($i450);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 388, 5} true;
  assume {:verifier.code 0} true;
  $i451 := $add.bv32($i450, $i450);
  call {:cexpr "b"} boogie_si_record_bv32($i451);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 390, 5} true;
  assume {:verifier.code 0} true;
  $i452 := $add.bv32($i439, $i439);
  call {:cexpr "c"} boogie_si_record_bv32($i452);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 391, 9} true;
  assume {:verifier.code 0} true;
  $i453 := $slt.bv32($i447, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 391, 7} true;
  assume {:verifier.code 0} true;
  $i454 := $i452;
  assume {:branchcond $i453} true;
  goto $bb271, $bb272;
$bb265:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 15} true;
  assume {:verifier.code 0} true;
  assume ($i440 == 1bv1);
  goto $bb266;
$bb266:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 382, 9} true;
  assume {:verifier.code 0} true;
  $i443 := $add.bv32($i437, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i443);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 383, 5} true;
  assume {:verifier.code 0} true;
  $i442 := $i443;
  goto $bb270;
$bb267:
  assume !(($i440 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 20} true;
  assume {:verifier.code 0} true;
  $i441 := $sgt.bv32($i436, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 9} true;
  assume {:verifier.code 0} true;
  $i442 := $i437;
  assume {:branchcond $i441} true;
  goto $bb268, $bb269;
$bb268:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 9} true;
  assume {:verifier.code 0} true;
  assume ($i441 == 1bv1);
  goto $bb266;
$bb269:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i441 == 1bv1));
  goto $bb270;
$bb270:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 384, 3} true;
  assume {:verifier.code 0} true;
  $i439 := $i442;
  goto $bb264;
$bb271:
  assume ($i453 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 11} true;
  assume {:verifier.code 0} true;
  $i455 := $slt.bv32($i451, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i455} true;
  goto $bb274, $bb276;
$bb272:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 391, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i453 == 1bv1));
  goto $bb273;
$bb273:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 396, 7} true;
  assume {:verifier.code 0} true;
  $i459 := $sext.bv32.bv64($i447);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 396, 9} true;
  assume {:verifier.code 0} true;
  $i460 := $srem.bv64($i459, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 396, 7} true;
  assume {:verifier.code 0} true;
  $i461 := $trunc.bv64.bv32($i460);
  call {:cexpr "a"} boogie_si_record_bv32($i461);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 397, 5} true;
  assume {:verifier.code 0} true;
  $i462 := $add.bv32($i461, $i461);
  call {:cexpr "a"} boogie_si_record_bv32($i462);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 398, 7} true;
  assume {:verifier.code 0} true;
  $i463 := $sext.bv32.bv64($i451);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 398, 9} true;
  assume {:verifier.code 0} true;
  $i464 := $srem.bv64($i463, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 398, 7} true;
  assume {:verifier.code 0} true;
  $i465 := $trunc.bv64.bv32($i464);
  call {:cexpr "b"} boogie_si_record_bv32($i465);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 399, 5} true;
  assume {:verifier.code 0} true;
  $i466 := $add.bv32($i465, $i465);
  call {:cexpr "b"} boogie_si_record_bv32($i466);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 401, 5} true;
  assume {:verifier.code 0} true;
  $i467 := $add.bv32($i454, $i454);
  call {:cexpr "c"} boogie_si_record_bv32($i467);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 402, 9} true;
  assume {:verifier.code 0} true;
  $i468 := $slt.bv32($i462, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 402, 7} true;
  assume {:verifier.code 0} true;
  $i469 := $i467;
  assume {:branchcond $i468} true;
  goto $bb280, $bb281;
$bb274:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 15} true;
  assume {:verifier.code 0} true;
  assume ($i455 == 1bv1);
  goto $bb275;
$bb275:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 393, 9} true;
  assume {:verifier.code 0} true;
  $i458 := $add.bv32($i452, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i458);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 394, 5} true;
  assume {:verifier.code 0} true;
  $i457 := $i458;
  goto $bb279;
$bb276:
  assume !(($i455 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 20} true;
  assume {:verifier.code 0} true;
  $i456 := $sgt.bv32($i451, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 9} true;
  assume {:verifier.code 0} true;
  $i457 := $i452;
  assume {:branchcond $i456} true;
  goto $bb277, $bb278;
$bb277:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 9} true;
  assume {:verifier.code 0} true;
  assume ($i456 == 1bv1);
  goto $bb275;
$bb278:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i456 == 1bv1));
  goto $bb279;
$bb279:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 395, 3} true;
  assume {:verifier.code 0} true;
  $i454 := $i457;
  goto $bb273;
$bb280:
  assume ($i468 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 11} true;
  assume {:verifier.code 0} true;
  $i470 := $slt.bv32($i466, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i470} true;
  goto $bb283, $bb285;
$bb281:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 402, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i468 == 1bv1));
  goto $bb282;
$bb282:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 407, 7} true;
  assume {:verifier.code 0} true;
  $i474 := $sext.bv32.bv64($i462);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 407, 9} true;
  assume {:verifier.code 0} true;
  $i475 := $srem.bv64($i474, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 407, 7} true;
  assume {:verifier.code 0} true;
  $i476 := $trunc.bv64.bv32($i475);
  call {:cexpr "a"} boogie_si_record_bv32($i476);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 408, 5} true;
  assume {:verifier.code 0} true;
  $i477 := $add.bv32($i476, $i476);
  call {:cexpr "a"} boogie_si_record_bv32($i477);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 409, 7} true;
  assume {:verifier.code 0} true;
  $i478 := $sext.bv32.bv64($i466);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 409, 9} true;
  assume {:verifier.code 0} true;
  $i479 := $srem.bv64($i478, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 409, 7} true;
  assume {:verifier.code 0} true;
  $i480 := $trunc.bv64.bv32($i479);
  call {:cexpr "b"} boogie_si_record_bv32($i480);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 410, 5} true;
  assume {:verifier.code 0} true;
  $i481 := $add.bv32($i480, $i480);
  call {:cexpr "b"} boogie_si_record_bv32($i481);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 412, 5} true;
  assume {:verifier.code 0} true;
  $i482 := $add.bv32($i469, $i469);
  call {:cexpr "c"} boogie_si_record_bv32($i482);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 413, 9} true;
  assume {:verifier.code 0} true;
  $i483 := $slt.bv32($i477, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 413, 7} true;
  assume {:verifier.code 0} true;
  $i484 := $i482;
  assume {:branchcond $i483} true;
  goto $bb289, $bb290;
$bb283:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 15} true;
  assume {:verifier.code 0} true;
  assume ($i470 == 1bv1);
  goto $bb284;
$bb284:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 404, 9} true;
  assume {:verifier.code 0} true;
  $i473 := $add.bv32($i467, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i473);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 405, 5} true;
  assume {:verifier.code 0} true;
  $i472 := $i473;
  goto $bb288;
$bb285:
  assume !(($i470 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 20} true;
  assume {:verifier.code 0} true;
  $i471 := $sgt.bv32($i466, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 9} true;
  assume {:verifier.code 0} true;
  $i472 := $i467;
  assume {:branchcond $i471} true;
  goto $bb286, $bb287;
$bb286:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 9} true;
  assume {:verifier.code 0} true;
  assume ($i471 == 1bv1);
  goto $bb284;
$bb287:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i471 == 1bv1));
  goto $bb288;
$bb288:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 406, 3} true;
  assume {:verifier.code 0} true;
  $i469 := $i472;
  goto $bb282;
$bb289:
  assume ($i483 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 11} true;
  assume {:verifier.code 0} true;
  $i485 := $slt.bv32($i481, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i485} true;
  goto $bb292, $bb294;
$bb290:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 413, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i483 == 1bv1));
  goto $bb291;
$bb291:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 418, 7} true;
  assume {:verifier.code 0} true;
  $i489 := $sext.bv32.bv64($i477);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 418, 9} true;
  assume {:verifier.code 0} true;
  $i490 := $srem.bv64($i489, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 418, 7} true;
  assume {:verifier.code 0} true;
  $i491 := $trunc.bv64.bv32($i490);
  call {:cexpr "a"} boogie_si_record_bv32($i491);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 419, 5} true;
  assume {:verifier.code 0} true;
  $i492 := $add.bv32($i491, $i491);
  call {:cexpr "a"} boogie_si_record_bv32($i492);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 420, 7} true;
  assume {:verifier.code 0} true;
  $i493 := $sext.bv32.bv64($i481);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 420, 9} true;
  assume {:verifier.code 0} true;
  $i494 := $srem.bv64($i493, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 420, 7} true;
  assume {:verifier.code 0} true;
  $i495 := $trunc.bv64.bv32($i494);
  call {:cexpr "b"} boogie_si_record_bv32($i495);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 421, 5} true;
  assume {:verifier.code 0} true;
  $i496 := $add.bv32($i495, $i495);
  call {:cexpr "b"} boogie_si_record_bv32($i496);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 423, 5} true;
  assume {:verifier.code 0} true;
  $i497 := $add.bv32($i484, $i484);
  call {:cexpr "c"} boogie_si_record_bv32($i497);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 424, 9} true;
  assume {:verifier.code 0} true;
  $i498 := $slt.bv32($i492, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 424, 7} true;
  assume {:verifier.code 0} true;
  $i499 := $i497;
  assume {:branchcond $i498} true;
  goto $bb298, $bb299;
$bb292:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 15} true;
  assume {:verifier.code 0} true;
  assume ($i485 == 1bv1);
  goto $bb293;
$bb293:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 415, 9} true;
  assume {:verifier.code 0} true;
  $i488 := $add.bv32($i482, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i488);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 416, 5} true;
  assume {:verifier.code 0} true;
  $i487 := $i488;
  goto $bb297;
$bb294:
  assume !(($i485 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 20} true;
  assume {:verifier.code 0} true;
  $i486 := $sgt.bv32($i481, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 9} true;
  assume {:verifier.code 0} true;
  $i487 := $i482;
  assume {:branchcond $i486} true;
  goto $bb295, $bb296;
$bb295:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 9} true;
  assume {:verifier.code 0} true;
  assume ($i486 == 1bv1);
  goto $bb293;
$bb296:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i486 == 1bv1));
  goto $bb297;
$bb297:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 417, 3} true;
  assume {:verifier.code 0} true;
  $i484 := $i487;
  goto $bb291;
$bb298:
  assume ($i498 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 11} true;
  assume {:verifier.code 0} true;
  $i500 := $slt.bv32($i496, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i500} true;
  goto $bb301, $bb303;
$bb299:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 424, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i498 == 1bv1));
  goto $bb300;
$bb300:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 429, 7} true;
  assume {:verifier.code 0} true;
  $i504 := $sext.bv32.bv64($i492);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 429, 9} true;
  assume {:verifier.code 0} true;
  $i505 := $srem.bv64($i504, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 429, 7} true;
  assume {:verifier.code 0} true;
  $i506 := $trunc.bv64.bv32($i505);
  call {:cexpr "a"} boogie_si_record_bv32($i506);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 430, 5} true;
  assume {:verifier.code 0} true;
  $i507 := $add.bv32($i506, $i506);
  call {:cexpr "a"} boogie_si_record_bv32($i507);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 431, 7} true;
  assume {:verifier.code 0} true;
  $i508 := $sext.bv32.bv64($i496);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 431, 9} true;
  assume {:verifier.code 0} true;
  $i509 := $srem.bv64($i508, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 431, 7} true;
  assume {:verifier.code 0} true;
  $i510 := $trunc.bv64.bv32($i509);
  call {:cexpr "b"} boogie_si_record_bv32($i510);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 432, 5} true;
  assume {:verifier.code 0} true;
  $i511 := $add.bv32($i510, $i510);
  call {:cexpr "b"} boogie_si_record_bv32($i511);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 434, 5} true;
  assume {:verifier.code 0} true;
  $i512 := $add.bv32($i499, $i499);
  call {:cexpr "c"} boogie_si_record_bv32($i512);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 435, 9} true;
  assume {:verifier.code 0} true;
  $i513 := $slt.bv32($i507, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 435, 7} true;
  assume {:verifier.code 0} true;
  $i514 := $i512;
  assume {:branchcond $i513} true;
  goto $bb307, $bb308;
$bb301:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 15} true;
  assume {:verifier.code 0} true;
  assume ($i500 == 1bv1);
  goto $bb302;
$bb302:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 426, 9} true;
  assume {:verifier.code 0} true;
  $i503 := $add.bv32($i497, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i503);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 427, 5} true;
  assume {:verifier.code 0} true;
  $i502 := $i503;
  goto $bb306;
$bb303:
  assume !(($i500 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 20} true;
  assume {:verifier.code 0} true;
  $i501 := $sgt.bv32($i496, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 9} true;
  assume {:verifier.code 0} true;
  $i502 := $i497;
  assume {:branchcond $i501} true;
  goto $bb304, $bb305;
$bb304:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 9} true;
  assume {:verifier.code 0} true;
  assume ($i501 == 1bv1);
  goto $bb302;
$bb305:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i501 == 1bv1));
  goto $bb306;
$bb306:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 428, 3} true;
  assume {:verifier.code 0} true;
  $i499 := $i502;
  goto $bb300;
$bb307:
  assume ($i513 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 11} true;
  assume {:verifier.code 0} true;
  $i515 := $slt.bv32($i511, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i515} true;
  goto $bb310, $bb312;
$bb308:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 435, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i513 == 1bv1));
  goto $bb309;
$bb309:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 440, 7} true;
  assume {:verifier.code 0} true;
  $i519 := $sext.bv32.bv64($i507);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 440, 9} true;
  assume {:verifier.code 0} true;
  $i520 := $srem.bv64($i519, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 440, 7} true;
  assume {:verifier.code 0} true;
  $i521 := $trunc.bv64.bv32($i520);
  call {:cexpr "a"} boogie_si_record_bv32($i521);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 441, 5} true;
  assume {:verifier.code 0} true;
  $i522 := $add.bv32($i521, $i521);
  call {:cexpr "a"} boogie_si_record_bv32($i522);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 442, 7} true;
  assume {:verifier.code 0} true;
  $i523 := $sext.bv32.bv64($i511);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 442, 9} true;
  assume {:verifier.code 0} true;
  $i524 := $srem.bv64($i523, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 442, 7} true;
  assume {:verifier.code 0} true;
  $i525 := $trunc.bv64.bv32($i524);
  call {:cexpr "b"} boogie_si_record_bv32($i525);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 443, 5} true;
  assume {:verifier.code 0} true;
  $i526 := $add.bv32($i525, $i525);
  call {:cexpr "b"} boogie_si_record_bv32($i526);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 445, 5} true;
  assume {:verifier.code 0} true;
  $i527 := $add.bv32($i514, $i514);
  call {:cexpr "c"} boogie_si_record_bv32($i527);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 446, 9} true;
  assume {:verifier.code 0} true;
  $i528 := $slt.bv32($i522, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 446, 7} true;
  assume {:verifier.code 0} true;
  $i529 := $i527;
  assume {:branchcond $i528} true;
  goto $bb316, $bb317;
$bb310:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 15} true;
  assume {:verifier.code 0} true;
  assume ($i515 == 1bv1);
  goto $bb311;
$bb311:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 437, 9} true;
  assume {:verifier.code 0} true;
  $i518 := $add.bv32($i512, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i518);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 438, 5} true;
  assume {:verifier.code 0} true;
  $i517 := $i518;
  goto $bb315;
$bb312:
  assume !(($i515 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 20} true;
  assume {:verifier.code 0} true;
  $i516 := $sgt.bv32($i511, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 9} true;
  assume {:verifier.code 0} true;
  $i517 := $i512;
  assume {:branchcond $i516} true;
  goto $bb313, $bb314;
$bb313:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 9} true;
  assume {:verifier.code 0} true;
  assume ($i516 == 1bv1);
  goto $bb311;
$bb314:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i516 == 1bv1));
  goto $bb315;
$bb315:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 439, 3} true;
  assume {:verifier.code 0} true;
  $i514 := $i517;
  goto $bb309;
$bb316:
  assume ($i528 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 11} true;
  assume {:verifier.code 0} true;
  $i530 := $slt.bv32($i526, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i530} true;
  goto $bb319, $bb321;
$bb317:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 446, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i528 == 1bv1));
  goto $bb318;
$bb318:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 451, 7} true;
  assume {:verifier.code 0} true;
  $i534 := $sext.bv32.bv64($i522);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 451, 9} true;
  assume {:verifier.code 0} true;
  $i535 := $srem.bv64($i534, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 451, 7} true;
  assume {:verifier.code 0} true;
  $i536 := $trunc.bv64.bv32($i535);
  call {:cexpr "a"} boogie_si_record_bv32($i536);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 452, 5} true;
  assume {:verifier.code 0} true;
  $i537 := $add.bv32($i536, $i536);
  call {:cexpr "a"} boogie_si_record_bv32($i537);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 453, 7} true;
  assume {:verifier.code 0} true;
  $i538 := $sext.bv32.bv64($i526);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 453, 9} true;
  assume {:verifier.code 0} true;
  $i539 := $srem.bv64($i538, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 453, 7} true;
  assume {:verifier.code 0} true;
  $i540 := $trunc.bv64.bv32($i539);
  call {:cexpr "b"} boogie_si_record_bv32($i540);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 454, 5} true;
  assume {:verifier.code 0} true;
  $i541 := $add.bv32($i540, $i540);
  call {:cexpr "b"} boogie_si_record_bv32($i541);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 456, 5} true;
  assume {:verifier.code 0} true;
  $i542 := $add.bv32($i529, $i529);
  call {:cexpr "c"} boogie_si_record_bv32($i542);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 457, 9} true;
  assume {:verifier.code 0} true;
  $i543 := $slt.bv32($i537, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 457, 7} true;
  assume {:verifier.code 0} true;
  $i544 := $i542;
  assume {:branchcond $i543} true;
  goto $bb325, $bb326;
$bb319:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 15} true;
  assume {:verifier.code 0} true;
  assume ($i530 == 1bv1);
  goto $bb320;
$bb320:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 448, 9} true;
  assume {:verifier.code 0} true;
  $i533 := $add.bv32($i527, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i533);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 449, 5} true;
  assume {:verifier.code 0} true;
  $i532 := $i533;
  goto $bb324;
$bb321:
  assume !(($i530 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 20} true;
  assume {:verifier.code 0} true;
  $i531 := $sgt.bv32($i526, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 9} true;
  assume {:verifier.code 0} true;
  $i532 := $i527;
  assume {:branchcond $i531} true;
  goto $bb322, $bb323;
$bb322:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 9} true;
  assume {:verifier.code 0} true;
  assume ($i531 == 1bv1);
  goto $bb320;
$bb323:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i531 == 1bv1));
  goto $bb324;
$bb324:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 450, 3} true;
  assume {:verifier.code 0} true;
  $i529 := $i532;
  goto $bb318;
$bb325:
  assume ($i543 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 11} true;
  assume {:verifier.code 0} true;
  $i545 := $slt.bv32($i541, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i545} true;
  goto $bb328, $bb330;
$bb326:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 457, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i543 == 1bv1));
  goto $bb327;
$bb327:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 462, 7} true;
  assume {:verifier.code 0} true;
  $i549 := $sext.bv32.bv64($i537);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 462, 9} true;
  assume {:verifier.code 0} true;
  $i550 := $srem.bv64($i549, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 462, 7} true;
  assume {:verifier.code 0} true;
  $i551 := $trunc.bv64.bv32($i550);
  call {:cexpr "a"} boogie_si_record_bv32($i551);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 463, 5} true;
  assume {:verifier.code 0} true;
  $i552 := $add.bv32($i551, $i551);
  call {:cexpr "a"} boogie_si_record_bv32($i552);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 464, 7} true;
  assume {:verifier.code 0} true;
  $i553 := $sext.bv32.bv64($i541);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 464, 9} true;
  assume {:verifier.code 0} true;
  $i554 := $srem.bv64($i553, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 464, 7} true;
  assume {:verifier.code 0} true;
  $i555 := $trunc.bv64.bv32($i554);
  call {:cexpr "b"} boogie_si_record_bv32($i555);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 465, 5} true;
  assume {:verifier.code 0} true;
  $i556 := $add.bv32($i555, $i555);
  call {:cexpr "b"} boogie_si_record_bv32($i556);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 467, 5} true;
  assume {:verifier.code 0} true;
  $i557 := $add.bv32($i544, $i544);
  call {:cexpr "c"} boogie_si_record_bv32($i557);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 468, 9} true;
  assume {:verifier.code 0} true;
  $i558 := $slt.bv32($i552, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 468, 7} true;
  assume {:verifier.code 0} true;
  $i559 := $i557;
  assume {:branchcond $i558} true;
  goto $bb334, $bb335;
$bb328:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 15} true;
  assume {:verifier.code 0} true;
  assume ($i545 == 1bv1);
  goto $bb329;
$bb329:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 459, 9} true;
  assume {:verifier.code 0} true;
  $i548 := $add.bv32($i542, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i548);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 460, 5} true;
  assume {:verifier.code 0} true;
  $i547 := $i548;
  goto $bb333;
$bb330:
  assume !(($i545 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 20} true;
  assume {:verifier.code 0} true;
  $i546 := $sgt.bv32($i541, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 9} true;
  assume {:verifier.code 0} true;
  $i547 := $i542;
  assume {:branchcond $i546} true;
  goto $bb331, $bb332;
$bb331:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 9} true;
  assume {:verifier.code 0} true;
  assume ($i546 == 1bv1);
  goto $bb329;
$bb332:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i546 == 1bv1));
  goto $bb333;
$bb333:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 461, 3} true;
  assume {:verifier.code 0} true;
  $i544 := $i547;
  goto $bb327;
$bb334:
  assume ($i558 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 11} true;
  assume {:verifier.code 0} true;
  $i560 := $slt.bv32($i556, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i560} true;
  goto $bb337, $bb339;
$bb335:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 468, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i558 == 1bv1));
  goto $bb336;
$bb336:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 473, 7} true;
  assume {:verifier.code 0} true;
  $i564 := $sext.bv32.bv64($i552);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 473, 9} true;
  assume {:verifier.code 0} true;
  $i565 := $srem.bv64($i564, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 473, 7} true;
  assume {:verifier.code 0} true;
  $i566 := $trunc.bv64.bv32($i565);
  call {:cexpr "a"} boogie_si_record_bv32($i566);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 474, 5} true;
  assume {:verifier.code 0} true;
  $i567 := $add.bv32($i566, $i566);
  call {:cexpr "a"} boogie_si_record_bv32($i567);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 475, 7} true;
  assume {:verifier.code 0} true;
  $i568 := $sext.bv32.bv64($i556);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 475, 9} true;
  assume {:verifier.code 0} true;
  $i569 := $srem.bv64($i568, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 475, 7} true;
  assume {:verifier.code 0} true;
  $i570 := $trunc.bv64.bv32($i569);
  call {:cexpr "b"} boogie_si_record_bv32($i570);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 476, 5} true;
  assume {:verifier.code 0} true;
  $i571 := $add.bv32($i570, $i570);
  call {:cexpr "b"} boogie_si_record_bv32($i571);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 478, 5} true;
  assume {:verifier.code 0} true;
  $i572 := $add.bv32($i559, $i559);
  call {:cexpr "c"} boogie_si_record_bv32($i572);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 479, 9} true;
  assume {:verifier.code 0} true;
  $i573 := $slt.bv32($i567, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 479, 7} true;
  assume {:verifier.code 0} true;
  $i574 := $i572;
  assume {:branchcond $i573} true;
  goto $bb343, $bb344;
$bb337:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 15} true;
  assume {:verifier.code 0} true;
  assume ($i560 == 1bv1);
  goto $bb338;
$bb338:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 470, 9} true;
  assume {:verifier.code 0} true;
  $i563 := $add.bv32($i557, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i563);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 471, 5} true;
  assume {:verifier.code 0} true;
  $i562 := $i563;
  goto $bb342;
$bb339:
  assume !(($i560 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 20} true;
  assume {:verifier.code 0} true;
  $i561 := $sgt.bv32($i556, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 9} true;
  assume {:verifier.code 0} true;
  $i562 := $i557;
  assume {:branchcond $i561} true;
  goto $bb340, $bb341;
$bb340:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 9} true;
  assume {:verifier.code 0} true;
  assume ($i561 == 1bv1);
  goto $bb338;
$bb341:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i561 == 1bv1));
  goto $bb342;
$bb342:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 472, 3} true;
  assume {:verifier.code 0} true;
  $i559 := $i562;
  goto $bb336;
$bb343:
  assume ($i573 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 11} true;
  assume {:verifier.code 0} true;
  $i575 := $slt.bv32($i571, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i575} true;
  goto $bb346, $bb348;
$bb344:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 479, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i573 == 1bv1));
  goto $bb345;
$bb345:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 484, 7} true;
  assume {:verifier.code 0} true;
  $i579 := $sext.bv32.bv64($i567);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 484, 9} true;
  assume {:verifier.code 0} true;
  $i580 := $srem.bv64($i579, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 484, 7} true;
  assume {:verifier.code 0} true;
  $i581 := $trunc.bv64.bv32($i580);
  call {:cexpr "a"} boogie_si_record_bv32($i581);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 485, 5} true;
  assume {:verifier.code 0} true;
  $i582 := $add.bv32($i581, $i581);
  call {:cexpr "a"} boogie_si_record_bv32($i582);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 486, 7} true;
  assume {:verifier.code 0} true;
  $i583 := $sext.bv32.bv64($i571);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 486, 9} true;
  assume {:verifier.code 0} true;
  $i584 := $srem.bv64($i583, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 486, 7} true;
  assume {:verifier.code 0} true;
  $i585 := $trunc.bv64.bv32($i584);
  call {:cexpr "b"} boogie_si_record_bv32($i585);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 487, 5} true;
  assume {:verifier.code 0} true;
  $i586 := $add.bv32($i585, $i585);
  call {:cexpr "b"} boogie_si_record_bv32($i586);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 489, 5} true;
  assume {:verifier.code 0} true;
  $i587 := $add.bv32($i574, $i574);
  call {:cexpr "c"} boogie_si_record_bv32($i587);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 490, 9} true;
  assume {:verifier.code 0} true;
  $i588 := $slt.bv32($i582, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 490, 7} true;
  assume {:verifier.code 0} true;
  $i589 := $i587;
  assume {:branchcond $i588} true;
  goto $bb352, $bb353;
$bb346:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 15} true;
  assume {:verifier.code 0} true;
  assume ($i575 == 1bv1);
  goto $bb347;
$bb347:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 481, 9} true;
  assume {:verifier.code 0} true;
  $i578 := $add.bv32($i572, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i578);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 482, 5} true;
  assume {:verifier.code 0} true;
  $i577 := $i578;
  goto $bb351;
$bb348:
  assume !(($i575 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 20} true;
  assume {:verifier.code 0} true;
  $i576 := $sgt.bv32($i571, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 9} true;
  assume {:verifier.code 0} true;
  $i577 := $i572;
  assume {:branchcond $i576} true;
  goto $bb349, $bb350;
$bb349:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 9} true;
  assume {:verifier.code 0} true;
  assume ($i576 == 1bv1);
  goto $bb347;
$bb350:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i576 == 1bv1));
  goto $bb351;
$bb351:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 483, 3} true;
  assume {:verifier.code 0} true;
  $i574 := $i577;
  goto $bb345;
$bb352:
  assume ($i588 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 11} true;
  assume {:verifier.code 0} true;
  $i590 := $slt.bv32($i586, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i590} true;
  goto $bb355, $bb357;
$bb353:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 490, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i588 == 1bv1));
  goto $bb354;
$bb354:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 495, 7} true;
  assume {:verifier.code 0} true;
  $i594 := $sext.bv32.bv64($i582);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 495, 9} true;
  assume {:verifier.code 0} true;
  $i595 := $srem.bv64($i594, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 495, 7} true;
  assume {:verifier.code 0} true;
  $i596 := $trunc.bv64.bv32($i595);
  call {:cexpr "a"} boogie_si_record_bv32($i596);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 496, 5} true;
  assume {:verifier.code 0} true;
  $i597 := $add.bv32($i596, $i596);
  call {:cexpr "a"} boogie_si_record_bv32($i597);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 497, 7} true;
  assume {:verifier.code 0} true;
  $i598 := $sext.bv32.bv64($i586);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 497, 9} true;
  assume {:verifier.code 0} true;
  $i599 := $srem.bv64($i598, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 497, 7} true;
  assume {:verifier.code 0} true;
  $i600 := $trunc.bv64.bv32($i599);
  call {:cexpr "b"} boogie_si_record_bv32($i600);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 498, 5} true;
  assume {:verifier.code 0} true;
  $i601 := $add.bv32($i600, $i600);
  call {:cexpr "b"} boogie_si_record_bv32($i601);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 500, 5} true;
  assume {:verifier.code 0} true;
  $i602 := $add.bv32($i589, $i589);
  call {:cexpr "c"} boogie_si_record_bv32($i602);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 501, 9} true;
  assume {:verifier.code 0} true;
  $i603 := $slt.bv32($i597, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 501, 7} true;
  assume {:verifier.code 0} true;
  $i604 := $i602;
  assume {:branchcond $i603} true;
  goto $bb361, $bb362;
$bb355:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 15} true;
  assume {:verifier.code 0} true;
  assume ($i590 == 1bv1);
  goto $bb356;
$bb356:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 492, 9} true;
  assume {:verifier.code 0} true;
  $i593 := $add.bv32($i587, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i593);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 493, 5} true;
  assume {:verifier.code 0} true;
  $i592 := $i593;
  goto $bb360;
$bb357:
  assume !(($i590 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 20} true;
  assume {:verifier.code 0} true;
  $i591 := $sgt.bv32($i586, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 9} true;
  assume {:verifier.code 0} true;
  $i592 := $i587;
  assume {:branchcond $i591} true;
  goto $bb358, $bb359;
$bb358:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 9} true;
  assume {:verifier.code 0} true;
  assume ($i591 == 1bv1);
  goto $bb356;
$bb359:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i591 == 1bv1));
  goto $bb360;
$bb360:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 494, 3} true;
  assume {:verifier.code 0} true;
  $i589 := $i592;
  goto $bb354;
$bb361:
  assume ($i603 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 11} true;
  assume {:verifier.code 0} true;
  $i605 := $slt.bv32($i601, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i605} true;
  goto $bb364, $bb366;
$bb362:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 501, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i603 == 1bv1));
  goto $bb363;
$bb363:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 506, 7} true;
  assume {:verifier.code 0} true;
  $i609 := $sext.bv32.bv64($i597);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 506, 9} true;
  assume {:verifier.code 0} true;
  $i610 := $srem.bv64($i609, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 506, 7} true;
  assume {:verifier.code 0} true;
  $i611 := $trunc.bv64.bv32($i610);
  call {:cexpr "a"} boogie_si_record_bv32($i611);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 507, 5} true;
  assume {:verifier.code 0} true;
  $i612 := $add.bv32($i611, $i611);
  call {:cexpr "a"} boogie_si_record_bv32($i612);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 508, 7} true;
  assume {:verifier.code 0} true;
  $i613 := $sext.bv32.bv64($i601);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 508, 9} true;
  assume {:verifier.code 0} true;
  $i614 := $srem.bv64($i613, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 508, 7} true;
  assume {:verifier.code 0} true;
  $i615 := $trunc.bv64.bv32($i614);
  call {:cexpr "b"} boogie_si_record_bv32($i615);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 509, 5} true;
  assume {:verifier.code 0} true;
  $i616 := $add.bv32($i615, $i615);
  call {:cexpr "b"} boogie_si_record_bv32($i616);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 511, 5} true;
  assume {:verifier.code 0} true;
  $i617 := $add.bv32($i604, $i604);
  call {:cexpr "c"} boogie_si_record_bv32($i617);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 512, 9} true;
  assume {:verifier.code 0} true;
  $i618 := $slt.bv32($i612, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 512, 7} true;
  assume {:verifier.code 0} true;
  $i619 := $i617;
  assume {:branchcond $i618} true;
  goto $bb370, $bb371;
$bb364:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 15} true;
  assume {:verifier.code 0} true;
  assume ($i605 == 1bv1);
  goto $bb365;
$bb365:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 503, 9} true;
  assume {:verifier.code 0} true;
  $i608 := $add.bv32($i602, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i608);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 504, 5} true;
  assume {:verifier.code 0} true;
  $i607 := $i608;
  goto $bb369;
$bb366:
  assume !(($i605 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 20} true;
  assume {:verifier.code 0} true;
  $i606 := $sgt.bv32($i601, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 9} true;
  assume {:verifier.code 0} true;
  $i607 := $i602;
  assume {:branchcond $i606} true;
  goto $bb367, $bb368;
$bb367:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 9} true;
  assume {:verifier.code 0} true;
  assume ($i606 == 1bv1);
  goto $bb365;
$bb368:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i606 == 1bv1));
  goto $bb369;
$bb369:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 505, 3} true;
  assume {:verifier.code 0} true;
  $i604 := $i607;
  goto $bb363;
$bb370:
  assume ($i618 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 11} true;
  assume {:verifier.code 0} true;
  $i620 := $slt.bv32($i616, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i620} true;
  goto $bb373, $bb375;
$bb371:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 512, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i618 == 1bv1));
  goto $bb372;
$bb372:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 517, 7} true;
  assume {:verifier.code 0} true;
  $i624 := $sext.bv32.bv64($i612);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 517, 9} true;
  assume {:verifier.code 0} true;
  $i625 := $srem.bv64($i624, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 517, 7} true;
  assume {:verifier.code 0} true;
  $i626 := $trunc.bv64.bv32($i625);
  call {:cexpr "a"} boogie_si_record_bv32($i626);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 518, 5} true;
  assume {:verifier.code 0} true;
  $i627 := $add.bv32($i626, $i626);
  call {:cexpr "a"} boogie_si_record_bv32($i627);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 519, 7} true;
  assume {:verifier.code 0} true;
  $i628 := $sext.bv32.bv64($i616);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 519, 9} true;
  assume {:verifier.code 0} true;
  $i629 := $srem.bv64($i628, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 519, 7} true;
  assume {:verifier.code 0} true;
  $i630 := $trunc.bv64.bv32($i629);
  call {:cexpr "b"} boogie_si_record_bv32($i630);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 520, 5} true;
  assume {:verifier.code 0} true;
  $i631 := $add.bv32($i630, $i630);
  call {:cexpr "b"} boogie_si_record_bv32($i631);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 522, 5} true;
  assume {:verifier.code 0} true;
  $i632 := $add.bv32($i619, $i619);
  call {:cexpr "c"} boogie_si_record_bv32($i632);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 523, 9} true;
  assume {:verifier.code 0} true;
  $i633 := $slt.bv32($i627, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 523, 7} true;
  assume {:verifier.code 0} true;
  $i634 := $i632;
  assume {:branchcond $i633} true;
  goto $bb379, $bb380;
$bb373:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 15} true;
  assume {:verifier.code 0} true;
  assume ($i620 == 1bv1);
  goto $bb374;
$bb374:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 514, 9} true;
  assume {:verifier.code 0} true;
  $i623 := $add.bv32($i617, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i623);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 515, 5} true;
  assume {:verifier.code 0} true;
  $i622 := $i623;
  goto $bb378;
$bb375:
  assume !(($i620 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 20} true;
  assume {:verifier.code 0} true;
  $i621 := $sgt.bv32($i616, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 9} true;
  assume {:verifier.code 0} true;
  $i622 := $i617;
  assume {:branchcond $i621} true;
  goto $bb376, $bb377;
$bb376:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 9} true;
  assume {:verifier.code 0} true;
  assume ($i621 == 1bv1);
  goto $bb374;
$bb377:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i621 == 1bv1));
  goto $bb378;
$bb378:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 516, 3} true;
  assume {:verifier.code 0} true;
  $i619 := $i622;
  goto $bb372;
$bb379:
  assume ($i633 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 11} true;
  assume {:verifier.code 0} true;
  $i635 := $slt.bv32($i631, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i635} true;
  goto $bb382, $bb384;
$bb380:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 523, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i633 == 1bv1));
  goto $bb381;
$bb381:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 7} true;
  assume {:verifier.code 0} true;
  $i639 := $sext.bv32.bv64($i627);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 9} true;
  assume {:verifier.code 0} true;
  $i640 := $srem.bv64($i639, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 7} true;
  assume {:verifier.code 0} true;
  $i641 := $trunc.bv64.bv32($i640);
  call {:cexpr "a"} boogie_si_record_bv32($i641);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 529, 5} true;
  assume {:verifier.code 0} true;
  $i642 := $add.bv32($i641, $i641);
  call {:cexpr "a"} boogie_si_record_bv32($i642);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 530, 7} true;
  assume {:verifier.code 0} true;
  $i643 := $sext.bv32.bv64($i631);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 530, 9} true;
  assume {:verifier.code 0} true;
  $i644 := $srem.bv64($i643, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 530, 7} true;
  assume {:verifier.code 0} true;
  $i645 := $trunc.bv64.bv32($i644);
  call {:cexpr "b"} boogie_si_record_bv32($i645);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 531, 5} true;
  assume {:verifier.code 0} true;
  $i646 := $add.bv32($i645, $i645);
  call {:cexpr "b"} boogie_si_record_bv32($i646);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 533, 5} true;
  assume {:verifier.code 0} true;
  $i647 := $add.bv32($i634, $i634);
  call {:cexpr "c"} boogie_si_record_bv32($i647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 534, 9} true;
  assume {:verifier.code 0} true;
  $i648 := $slt.bv32($i642, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 534, 7} true;
  assume {:verifier.code 0} true;
  $i649 := $i647;
  assume {:branchcond $i648} true;
  goto $bb388, $bb389;
$bb382:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 15} true;
  assume {:verifier.code 0} true;
  assume ($i635 == 1bv1);
  goto $bb383;
$bb383:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 525, 9} true;
  assume {:verifier.code 0} true;
  $i638 := $add.bv32($i632, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i638);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 526, 5} true;
  assume {:verifier.code 0} true;
  $i637 := $i638;
  goto $bb387;
$bb384:
  assume !(($i635 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 20} true;
  assume {:verifier.code 0} true;
  $i636 := $sgt.bv32($i631, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 9} true;
  assume {:verifier.code 0} true;
  $i637 := $i632;
  assume {:branchcond $i636} true;
  goto $bb385, $bb386;
$bb385:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 9} true;
  assume {:verifier.code 0} true;
  assume ($i636 == 1bv1);
  goto $bb383;
$bb386:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i636 == 1bv1));
  goto $bb387;
$bb387:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 527, 3} true;
  assume {:verifier.code 0} true;
  $i634 := $i637;
  goto $bb381;
$bb388:
  assume ($i648 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 11} true;
  assume {:verifier.code 0} true;
  $i650 := $slt.bv32($i646, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i650} true;
  goto $bb391, $bb393;
$bb389:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 534, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i648 == 1bv1));
  goto $bb390;
$bb390:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 7} true;
  assume {:verifier.code 0} true;
  $i654 := $sext.bv32.bv64($i642);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 9} true;
  assume {:verifier.code 0} true;
  $i655 := $srem.bv64($i654, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 7} true;
  assume {:verifier.code 0} true;
  $i656 := $trunc.bv64.bv32($i655);
  call {:cexpr "a"} boogie_si_record_bv32($i656);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 540, 5} true;
  assume {:verifier.code 0} true;
  $i657 := $add.bv32($i656, $i656);
  call {:cexpr "a"} boogie_si_record_bv32($i657);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 541, 7} true;
  assume {:verifier.code 0} true;
  $i658 := $sext.bv32.bv64($i646);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 541, 9} true;
  assume {:verifier.code 0} true;
  $i659 := $srem.bv64($i658, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 541, 7} true;
  assume {:verifier.code 0} true;
  $i660 := $trunc.bv64.bv32($i659);
  call {:cexpr "b"} boogie_si_record_bv32($i660);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 542, 5} true;
  assume {:verifier.code 0} true;
  $i661 := $add.bv32($i660, $i660);
  call {:cexpr "b"} boogie_si_record_bv32($i661);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 544, 5} true;
  assume {:verifier.code 0} true;
  $i662 := $add.bv32($i649, $i649);
  call {:cexpr "c"} boogie_si_record_bv32($i662);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 545, 9} true;
  assume {:verifier.code 0} true;
  $i663 := $slt.bv32($i657, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 545, 7} true;
  assume {:verifier.code 0} true;
  $i664 := $i662;
  assume {:branchcond $i663} true;
  goto $bb397, $bb398;
$bb391:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 15} true;
  assume {:verifier.code 0} true;
  assume ($i650 == 1bv1);
  goto $bb392;
$bb392:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 536, 9} true;
  assume {:verifier.code 0} true;
  $i653 := $add.bv32($i647, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i653);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 537, 5} true;
  assume {:verifier.code 0} true;
  $i652 := $i653;
  goto $bb396;
$bb393:
  assume !(($i650 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 20} true;
  assume {:verifier.code 0} true;
  $i651 := $sgt.bv32($i646, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 9} true;
  assume {:verifier.code 0} true;
  $i652 := $i647;
  assume {:branchcond $i651} true;
  goto $bb394, $bb395;
$bb394:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 9} true;
  assume {:verifier.code 0} true;
  assume ($i651 == 1bv1);
  goto $bb392;
$bb395:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i651 == 1bv1));
  goto $bb396;
$bb396:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 538, 3} true;
  assume {:verifier.code 0} true;
  $i649 := $i652;
  goto $bb390;
$bb397:
  assume ($i663 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 11} true;
  assume {:verifier.code 0} true;
  $i665 := $slt.bv32($i661, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i665} true;
  goto $bb400, $bb402;
$bb398:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 545, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i663 == 1bv1));
  goto $bb399;
$bb399:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 550, 7} true;
  assume {:verifier.code 0} true;
  $i669 := $sext.bv32.bv64($i657);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 550, 9} true;
  assume {:verifier.code 0} true;
  $i670 := $srem.bv64($i669, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 550, 7} true;
  assume {:verifier.code 0} true;
  $i671 := $trunc.bv64.bv32($i670);
  call {:cexpr "a"} boogie_si_record_bv32($i671);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 551, 5} true;
  assume {:verifier.code 0} true;
  $i672 := $add.bv32($i671, $i671);
  call {:cexpr "a"} boogie_si_record_bv32($i672);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 552, 7} true;
  assume {:verifier.code 0} true;
  $i673 := $sext.bv32.bv64($i661);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 552, 9} true;
  assume {:verifier.code 0} true;
  $i674 := $srem.bv64($i673, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 552, 7} true;
  assume {:verifier.code 0} true;
  $i675 := $trunc.bv64.bv32($i674);
  call {:cexpr "b"} boogie_si_record_bv32($i675);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 553, 5} true;
  assume {:verifier.code 0} true;
  $i676 := $add.bv32($i675, $i675);
  call {:cexpr "b"} boogie_si_record_bv32($i676);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 555, 5} true;
  assume {:verifier.code 0} true;
  $i677 := $add.bv32($i664, $i664);
  call {:cexpr "c"} boogie_si_record_bv32($i677);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 556, 9} true;
  assume {:verifier.code 0} true;
  $i678 := $slt.bv32($i672, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 556, 7} true;
  assume {:verifier.code 0} true;
  $i679 := $i677;
  assume {:branchcond $i678} true;
  goto $bb406, $bb407;
$bb400:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 15} true;
  assume {:verifier.code 0} true;
  assume ($i665 == 1bv1);
  goto $bb401;
$bb401:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 547, 9} true;
  assume {:verifier.code 0} true;
  $i668 := $add.bv32($i662, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i668);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 5} true;
  assume {:verifier.code 0} true;
  $i667 := $i668;
  goto $bb405;
$bb402:
  assume !(($i665 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 20} true;
  assume {:verifier.code 0} true;
  $i666 := $sgt.bv32($i661, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 9} true;
  assume {:verifier.code 0} true;
  $i667 := $i662;
  assume {:branchcond $i666} true;
  goto $bb403, $bb404;
$bb403:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 9} true;
  assume {:verifier.code 0} true;
  assume ($i666 == 1bv1);
  goto $bb401;
$bb404:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i666 == 1bv1));
  goto $bb405;
$bb405:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 549, 3} true;
  assume {:verifier.code 0} true;
  $i664 := $i667;
  goto $bb399;
$bb406:
  assume ($i678 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 11} true;
  assume {:verifier.code 0} true;
  $i680 := $slt.bv32($i676, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i680} true;
  goto $bb409, $bb411;
$bb407:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 556, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i678 == 1bv1));
  goto $bb408;
$bb408:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 561, 7} true;
  assume {:verifier.code 0} true;
  $i684 := $sext.bv32.bv64($i672);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 561, 9} true;
  assume {:verifier.code 0} true;
  $i685 := $srem.bv64($i684, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 561, 7} true;
  assume {:verifier.code 0} true;
  $i686 := $trunc.bv64.bv32($i685);
  call {:cexpr "a"} boogie_si_record_bv32($i686);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 562, 5} true;
  assume {:verifier.code 0} true;
  $i687 := $add.bv32($i686, $i686);
  call {:cexpr "a"} boogie_si_record_bv32($i687);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 563, 7} true;
  assume {:verifier.code 0} true;
  $i688 := $sext.bv32.bv64($i676);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 563, 9} true;
  assume {:verifier.code 0} true;
  $i689 := $srem.bv64($i688, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 563, 7} true;
  assume {:verifier.code 0} true;
  $i690 := $trunc.bv64.bv32($i689);
  call {:cexpr "b"} boogie_si_record_bv32($i690);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 564, 5} true;
  assume {:verifier.code 0} true;
  $i691 := $add.bv32($i690, $i690);
  call {:cexpr "b"} boogie_si_record_bv32($i691);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 566, 5} true;
  assume {:verifier.code 0} true;
  $i692 := $add.bv32($i679, $i679);
  call {:cexpr "c"} boogie_si_record_bv32($i692);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 567, 9} true;
  assume {:verifier.code 0} true;
  $i693 := $slt.bv32($i687, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 567, 7} true;
  assume {:verifier.code 0} true;
  $i694 := $i692;
  assume {:branchcond $i693} true;
  goto $bb415, $bb416;
$bb409:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 15} true;
  assume {:verifier.code 0} true;
  assume ($i680 == 1bv1);
  goto $bb410;
$bb410:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 558, 9} true;
  assume {:verifier.code 0} true;
  $i683 := $add.bv32($i677, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i683);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 559, 5} true;
  assume {:verifier.code 0} true;
  $i682 := $i683;
  goto $bb414;
$bb411:
  assume !(($i680 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 20} true;
  assume {:verifier.code 0} true;
  $i681 := $sgt.bv32($i676, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 9} true;
  assume {:verifier.code 0} true;
  $i682 := $i677;
  assume {:branchcond $i681} true;
  goto $bb412, $bb413;
$bb412:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 9} true;
  assume {:verifier.code 0} true;
  assume ($i681 == 1bv1);
  goto $bb410;
$bb413:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i681 == 1bv1));
  goto $bb414;
$bb414:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 560, 3} true;
  assume {:verifier.code 0} true;
  $i679 := $i682;
  goto $bb408;
$bb415:
  assume ($i693 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 11} true;
  assume {:verifier.code 0} true;
  $i695 := $slt.bv32($i691, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i695} true;
  goto $bb418, $bb420;
$bb416:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 567, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i693 == 1bv1));
  goto $bb417;
$bb417:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 572, 7} true;
  assume {:verifier.code 0} true;
  $i699 := $sext.bv32.bv64($i687);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 572, 9} true;
  assume {:verifier.code 0} true;
  $i700 := $srem.bv64($i699, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 572, 7} true;
  assume {:verifier.code 0} true;
  $i701 := $trunc.bv64.bv32($i700);
  call {:cexpr "a"} boogie_si_record_bv32($i701);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 573, 5} true;
  assume {:verifier.code 0} true;
  $i702 := $add.bv32($i701, $i701);
  call {:cexpr "a"} boogie_si_record_bv32($i702);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 574, 7} true;
  assume {:verifier.code 0} true;
  $i703 := $sext.bv32.bv64($i691);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 574, 9} true;
  assume {:verifier.code 0} true;
  $i704 := $srem.bv64($i703, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 574, 7} true;
  assume {:verifier.code 0} true;
  $i705 := $trunc.bv64.bv32($i704);
  call {:cexpr "b"} boogie_si_record_bv32($i705);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 575, 5} true;
  assume {:verifier.code 0} true;
  $i706 := $add.bv32($i705, $i705);
  call {:cexpr "b"} boogie_si_record_bv32($i706);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 577, 5} true;
  assume {:verifier.code 0} true;
  $i707 := $add.bv32($i694, $i694);
  call {:cexpr "c"} boogie_si_record_bv32($i707);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 578, 9} true;
  assume {:verifier.code 0} true;
  $i708 := $slt.bv32($i702, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 578, 7} true;
  assume {:verifier.code 0} true;
  $i709 := $i707;
  assume {:branchcond $i708} true;
  goto $bb424, $bb425;
$bb418:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 15} true;
  assume {:verifier.code 0} true;
  assume ($i695 == 1bv1);
  goto $bb419;
$bb419:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 569, 9} true;
  assume {:verifier.code 0} true;
  $i698 := $add.bv32($i692, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i698);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 570, 5} true;
  assume {:verifier.code 0} true;
  $i697 := $i698;
  goto $bb423;
$bb420:
  assume !(($i695 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 20} true;
  assume {:verifier.code 0} true;
  $i696 := $sgt.bv32($i691, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 9} true;
  assume {:verifier.code 0} true;
  $i697 := $i692;
  assume {:branchcond $i696} true;
  goto $bb421, $bb422;
$bb421:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 9} true;
  assume {:verifier.code 0} true;
  assume ($i696 == 1bv1);
  goto $bb419;
$bb422:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i696 == 1bv1));
  goto $bb423;
$bb423:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 571, 3} true;
  assume {:verifier.code 0} true;
  $i694 := $i697;
  goto $bb417;
$bb424:
  assume ($i708 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 11} true;
  assume {:verifier.code 0} true;
  $i710 := $slt.bv32($i706, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i710} true;
  goto $bb427, $bb429;
$bb425:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 578, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i708 == 1bv1));
  goto $bb426;
$bb426:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 583, 7} true;
  assume {:verifier.code 0} true;
  $i714 := $sext.bv32.bv64($i702);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 583, 9} true;
  assume {:verifier.code 0} true;
  $i715 := $srem.bv64($i714, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 583, 7} true;
  assume {:verifier.code 0} true;
  $i716 := $trunc.bv64.bv32($i715);
  call {:cexpr "a"} boogie_si_record_bv32($i716);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 584, 5} true;
  assume {:verifier.code 0} true;
  $i717 := $add.bv32($i716, $i716);
  call {:cexpr "a"} boogie_si_record_bv32($i717);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 585, 7} true;
  assume {:verifier.code 0} true;
  $i718 := $sext.bv32.bv64($i706);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 585, 9} true;
  assume {:verifier.code 0} true;
  $i719 := $srem.bv64($i718, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 585, 7} true;
  assume {:verifier.code 0} true;
  $i720 := $trunc.bv64.bv32($i719);
  call {:cexpr "b"} boogie_si_record_bv32($i720);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 586, 5} true;
  assume {:verifier.code 0} true;
  $i721 := $add.bv32($i720, $i720);
  call {:cexpr "b"} boogie_si_record_bv32($i721);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 588, 5} true;
  assume {:verifier.code 0} true;
  $i722 := $add.bv32($i709, $i709);
  call {:cexpr "c"} boogie_si_record_bv32($i722);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 589, 9} true;
  assume {:verifier.code 0} true;
  $i723 := $slt.bv32($i717, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 589, 7} true;
  assume {:verifier.code 0} true;
  $i724 := $i722;
  assume {:branchcond $i723} true;
  goto $bb433, $bb434;
$bb427:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 15} true;
  assume {:verifier.code 0} true;
  assume ($i710 == 1bv1);
  goto $bb428;
$bb428:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 580, 9} true;
  assume {:verifier.code 0} true;
  $i713 := $add.bv32($i707, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i713);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 581, 5} true;
  assume {:verifier.code 0} true;
  $i712 := $i713;
  goto $bb432;
$bb429:
  assume !(($i710 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 20} true;
  assume {:verifier.code 0} true;
  $i711 := $sgt.bv32($i706, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 9} true;
  assume {:verifier.code 0} true;
  $i712 := $i707;
  assume {:branchcond $i711} true;
  goto $bb430, $bb431;
$bb430:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 9} true;
  assume {:verifier.code 0} true;
  assume ($i711 == 1bv1);
  goto $bb428;
$bb431:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i711 == 1bv1));
  goto $bb432;
$bb432:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 582, 3} true;
  assume {:verifier.code 0} true;
  $i709 := $i712;
  goto $bb426;
$bb433:
  assume ($i723 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 11} true;
  assume {:verifier.code 0} true;
  $i725 := $slt.bv32($i721, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i725} true;
  goto $bb436, $bb438;
$bb434:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 589, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i723 == 1bv1));
  goto $bb435;
$bb435:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 594, 7} true;
  assume {:verifier.code 0} true;
  $i729 := $sext.bv32.bv64($i717);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 594, 9} true;
  assume {:verifier.code 0} true;
  $i730 := $srem.bv64($i729, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 594, 7} true;
  assume {:verifier.code 0} true;
  $i731 := $trunc.bv64.bv32($i730);
  call {:cexpr "a"} boogie_si_record_bv32($i731);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 595, 5} true;
  assume {:verifier.code 0} true;
  $i732 := $add.bv32($i731, $i731);
  call {:cexpr "a"} boogie_si_record_bv32($i732);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 596, 7} true;
  assume {:verifier.code 0} true;
  $i733 := $sext.bv32.bv64($i721);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 596, 9} true;
  assume {:verifier.code 0} true;
  $i734 := $srem.bv64($i733, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 596, 7} true;
  assume {:verifier.code 0} true;
  $i735 := $trunc.bv64.bv32($i734);
  call {:cexpr "b"} boogie_si_record_bv32($i735);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 597, 5} true;
  assume {:verifier.code 0} true;
  $i736 := $add.bv32($i735, $i735);
  call {:cexpr "b"} boogie_si_record_bv32($i736);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 599, 5} true;
  assume {:verifier.code 0} true;
  $i737 := $add.bv32($i724, $i724);
  call {:cexpr "c"} boogie_si_record_bv32($i737);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 600, 9} true;
  assume {:verifier.code 0} true;
  $i738 := $slt.bv32($i732, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 600, 7} true;
  assume {:verifier.code 0} true;
  $i739 := $i737;
  assume {:branchcond $i738} true;
  goto $bb442, $bb443;
$bb436:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 15} true;
  assume {:verifier.code 0} true;
  assume ($i725 == 1bv1);
  goto $bb437;
$bb437:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 591, 9} true;
  assume {:verifier.code 0} true;
  $i728 := $add.bv32($i722, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i728);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 592, 5} true;
  assume {:verifier.code 0} true;
  $i727 := $i728;
  goto $bb441;
$bb438:
  assume !(($i725 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 20} true;
  assume {:verifier.code 0} true;
  $i726 := $sgt.bv32($i721, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 9} true;
  assume {:verifier.code 0} true;
  $i727 := $i722;
  assume {:branchcond $i726} true;
  goto $bb439, $bb440;
$bb439:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 9} true;
  assume {:verifier.code 0} true;
  assume ($i726 == 1bv1);
  goto $bb437;
$bb440:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i726 == 1bv1));
  goto $bb441;
$bb441:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 593, 3} true;
  assume {:verifier.code 0} true;
  $i724 := $i727;
  goto $bb435;
$bb442:
  assume ($i738 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 11} true;
  assume {:verifier.code 0} true;
  $i740 := $slt.bv32($i736, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i740} true;
  goto $bb445, $bb447;
$bb443:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 600, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i738 == 1bv1));
  goto $bb444;
$bb444:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 605, 7} true;
  assume {:verifier.code 0} true;
  $i744 := $sext.bv32.bv64($i732);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 605, 9} true;
  assume {:verifier.code 0} true;
  $i745 := $srem.bv64($i744, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 605, 7} true;
  assume {:verifier.code 0} true;
  $i746 := $trunc.bv64.bv32($i745);
  call {:cexpr "a"} boogie_si_record_bv32($i746);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 606, 5} true;
  assume {:verifier.code 0} true;
  $i747 := $add.bv32($i746, $i746);
  call {:cexpr "a"} boogie_si_record_bv32($i747);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 607, 7} true;
  assume {:verifier.code 0} true;
  $i748 := $sext.bv32.bv64($i736);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 607, 9} true;
  assume {:verifier.code 0} true;
  $i749 := $srem.bv64($i748, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 607, 7} true;
  assume {:verifier.code 0} true;
  $i750 := $trunc.bv64.bv32($i749);
  call {:cexpr "b"} boogie_si_record_bv32($i750);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 608, 5} true;
  assume {:verifier.code 0} true;
  $i751 := $add.bv32($i750, $i750);
  call {:cexpr "b"} boogie_si_record_bv32($i751);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 610, 5} true;
  assume {:verifier.code 0} true;
  $i752 := $add.bv32($i739, $i739);
  call {:cexpr "c"} boogie_si_record_bv32($i752);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 611, 9} true;
  assume {:verifier.code 0} true;
  $i753 := $slt.bv32($i747, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 611, 7} true;
  assume {:verifier.code 0} true;
  $i754 := $i752;
  assume {:branchcond $i753} true;
  goto $bb451, $bb452;
$bb445:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 15} true;
  assume {:verifier.code 0} true;
  assume ($i740 == 1bv1);
  goto $bb446;
$bb446:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 602, 9} true;
  assume {:verifier.code 0} true;
  $i743 := $add.bv32($i737, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i743);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 603, 5} true;
  assume {:verifier.code 0} true;
  $i742 := $i743;
  goto $bb450;
$bb447:
  assume !(($i740 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 20} true;
  assume {:verifier.code 0} true;
  $i741 := $sgt.bv32($i736, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 9} true;
  assume {:verifier.code 0} true;
  $i742 := $i737;
  assume {:branchcond $i741} true;
  goto $bb448, $bb449;
$bb448:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 9} true;
  assume {:verifier.code 0} true;
  assume ($i741 == 1bv1);
  goto $bb446;
$bb449:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i741 == 1bv1));
  goto $bb450;
$bb450:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 604, 3} true;
  assume {:verifier.code 0} true;
  $i739 := $i742;
  goto $bb444;
$bb451:
  assume ($i753 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 11} true;
  assume {:verifier.code 0} true;
  $i755 := $slt.bv32($i751, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i755} true;
  goto $bb454, $bb456;
$bb452:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 611, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i753 == 1bv1));
  goto $bb453;
$bb453:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 616, 7} true;
  assume {:verifier.code 0} true;
  $i759 := $sext.bv32.bv64($i747);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 616, 9} true;
  assume {:verifier.code 0} true;
  $i760 := $srem.bv64($i759, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 616, 7} true;
  assume {:verifier.code 0} true;
  $i761 := $trunc.bv64.bv32($i760);
  call {:cexpr "a"} boogie_si_record_bv32($i761);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 617, 5} true;
  assume {:verifier.code 0} true;
  $i762 := $add.bv32($i761, $i761);
  call {:cexpr "a"} boogie_si_record_bv32($i762);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 618, 7} true;
  assume {:verifier.code 0} true;
  $i763 := $sext.bv32.bv64($i751);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 618, 9} true;
  assume {:verifier.code 0} true;
  $i764 := $srem.bv64($i763, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 618, 7} true;
  assume {:verifier.code 0} true;
  $i765 := $trunc.bv64.bv32($i764);
  call {:cexpr "b"} boogie_si_record_bv32($i765);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 619, 5} true;
  assume {:verifier.code 0} true;
  $i766 := $add.bv32($i765, $i765);
  call {:cexpr "b"} boogie_si_record_bv32($i766);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 621, 5} true;
  assume {:verifier.code 0} true;
  $i767 := $add.bv32($i754, $i754);
  call {:cexpr "c"} boogie_si_record_bv32($i767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 622, 9} true;
  assume {:verifier.code 0} true;
  $i768 := $slt.bv32($i762, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 622, 7} true;
  assume {:verifier.code 0} true;
  $i769 := $i767;
  assume {:branchcond $i768} true;
  goto $bb460, $bb461;
$bb454:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 15} true;
  assume {:verifier.code 0} true;
  assume ($i755 == 1bv1);
  goto $bb455;
$bb455:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 613, 9} true;
  assume {:verifier.code 0} true;
  $i758 := $add.bv32($i752, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i758);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 614, 5} true;
  assume {:verifier.code 0} true;
  $i757 := $i758;
  goto $bb459;
$bb456:
  assume !(($i755 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 20} true;
  assume {:verifier.code 0} true;
  $i756 := $sgt.bv32($i751, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 9} true;
  assume {:verifier.code 0} true;
  $i757 := $i752;
  assume {:branchcond $i756} true;
  goto $bb457, $bb458;
$bb457:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 9} true;
  assume {:verifier.code 0} true;
  assume ($i756 == 1bv1);
  goto $bb455;
$bb458:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i756 == 1bv1));
  goto $bb459;
$bb459:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 615, 3} true;
  assume {:verifier.code 0} true;
  $i754 := $i757;
  goto $bb453;
$bb460:
  assume ($i768 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 11} true;
  assume {:verifier.code 0} true;
  $i770 := $slt.bv32($i766, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i770} true;
  goto $bb463, $bb465;
$bb461:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 622, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i768 == 1bv1));
  goto $bb462;
$bb462:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 627, 7} true;
  assume {:verifier.code 0} true;
  $i774 := $sext.bv32.bv64($i762);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 627, 9} true;
  assume {:verifier.code 0} true;
  $i775 := $srem.bv64($i774, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 627, 7} true;
  assume {:verifier.code 0} true;
  $i776 := $trunc.bv64.bv32($i775);
  call {:cexpr "a"} boogie_si_record_bv32($i776);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 628, 5} true;
  assume {:verifier.code 0} true;
  $i777 := $add.bv32($i776, $i776);
  call {:cexpr "a"} boogie_si_record_bv32($i777);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 629, 7} true;
  assume {:verifier.code 0} true;
  $i778 := $sext.bv32.bv64($i766);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 629, 9} true;
  assume {:verifier.code 0} true;
  $i779 := $srem.bv64($i778, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 629, 7} true;
  assume {:verifier.code 0} true;
  $i780 := $trunc.bv64.bv32($i779);
  call {:cexpr "b"} boogie_si_record_bv32($i780);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 630, 5} true;
  assume {:verifier.code 0} true;
  $i781 := $add.bv32($i780, $i780);
  call {:cexpr "b"} boogie_si_record_bv32($i781);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 632, 5} true;
  assume {:verifier.code 0} true;
  $i782 := $add.bv32($i769, $i769);
  call {:cexpr "c"} boogie_si_record_bv32($i782);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 633, 9} true;
  assume {:verifier.code 0} true;
  $i783 := $slt.bv32($i777, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 633, 7} true;
  assume {:verifier.code 0} true;
  $i784 := $i782;
  assume {:branchcond $i783} true;
  goto $bb469, $bb470;
$bb463:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 15} true;
  assume {:verifier.code 0} true;
  assume ($i770 == 1bv1);
  goto $bb464;
$bb464:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 624, 9} true;
  assume {:verifier.code 0} true;
  $i773 := $add.bv32($i767, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i773);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 625, 5} true;
  assume {:verifier.code 0} true;
  $i772 := $i773;
  goto $bb468;
$bb465:
  assume !(($i770 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 20} true;
  assume {:verifier.code 0} true;
  $i771 := $sgt.bv32($i766, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 9} true;
  assume {:verifier.code 0} true;
  $i772 := $i767;
  assume {:branchcond $i771} true;
  goto $bb466, $bb467;
$bb466:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 9} true;
  assume {:verifier.code 0} true;
  assume ($i771 == 1bv1);
  goto $bb464;
$bb467:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i771 == 1bv1));
  goto $bb468;
$bb468:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 626, 3} true;
  assume {:verifier.code 0} true;
  $i769 := $i772;
  goto $bb462;
$bb469:
  assume ($i783 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 11} true;
  assume {:verifier.code 0} true;
  $i785 := $slt.bv32($i781, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i785} true;
  goto $bb472, $bb474;
$bb470:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 633, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i783 == 1bv1));
  goto $bb471;
$bb471:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 638, 7} true;
  assume {:verifier.code 0} true;
  $i789 := $sext.bv32.bv64($i777);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 638, 9} true;
  assume {:verifier.code 0} true;
  $i790 := $srem.bv64($i789, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 638, 7} true;
  assume {:verifier.code 0} true;
  $i791 := $trunc.bv64.bv32($i790);
  call {:cexpr "a"} boogie_si_record_bv32($i791);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 639, 5} true;
  assume {:verifier.code 0} true;
  $i792 := $add.bv32($i791, $i791);
  call {:cexpr "a"} boogie_si_record_bv32($i792);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 640, 7} true;
  assume {:verifier.code 0} true;
  $i793 := $sext.bv32.bv64($i781);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 640, 9} true;
  assume {:verifier.code 0} true;
  $i794 := $srem.bv64($i793, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 640, 7} true;
  assume {:verifier.code 0} true;
  $i795 := $trunc.bv64.bv32($i794);
  call {:cexpr "b"} boogie_si_record_bv32($i795);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 641, 5} true;
  assume {:verifier.code 0} true;
  $i796 := $add.bv32($i795, $i795);
  call {:cexpr "b"} boogie_si_record_bv32($i796);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 643, 5} true;
  assume {:verifier.code 0} true;
  $i797 := $add.bv32($i784, $i784);
  call {:cexpr "c"} boogie_si_record_bv32($i797);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 644, 9} true;
  assume {:verifier.code 0} true;
  $i798 := $slt.bv32($i792, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 644, 7} true;
  assume {:verifier.code 0} true;
  $i799 := $i797;
  assume {:branchcond $i798} true;
  goto $bb478, $bb479;
$bb472:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 15} true;
  assume {:verifier.code 0} true;
  assume ($i785 == 1bv1);
  goto $bb473;
$bb473:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 635, 9} true;
  assume {:verifier.code 0} true;
  $i788 := $add.bv32($i782, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i788);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 636, 5} true;
  assume {:verifier.code 0} true;
  $i787 := $i788;
  goto $bb477;
$bb474:
  assume !(($i785 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 20} true;
  assume {:verifier.code 0} true;
  $i786 := $sgt.bv32($i781, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 9} true;
  assume {:verifier.code 0} true;
  $i787 := $i782;
  assume {:branchcond $i786} true;
  goto $bb475, $bb476;
$bb475:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 9} true;
  assume {:verifier.code 0} true;
  assume ($i786 == 1bv1);
  goto $bb473;
$bb476:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i786 == 1bv1));
  goto $bb477;
$bb477:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 637, 3} true;
  assume {:verifier.code 0} true;
  $i784 := $i787;
  goto $bb471;
$bb478:
  assume ($i798 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 11} true;
  assume {:verifier.code 0} true;
  $i800 := $slt.bv32($i796, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i800} true;
  goto $bb481, $bb483;
$bb479:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 644, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i798 == 1bv1));
  goto $bb480;
$bb480:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 649, 7} true;
  assume {:verifier.code 0} true;
  $i804 := $sext.bv32.bv64($i792);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 649, 9} true;
  assume {:verifier.code 0} true;
  $i805 := $srem.bv64($i804, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 649, 7} true;
  assume {:verifier.code 0} true;
  $i806 := $trunc.bv64.bv32($i805);
  call {:cexpr "a"} boogie_si_record_bv32($i806);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 650, 5} true;
  assume {:verifier.code 0} true;
  $i807 := $add.bv32($i806, $i806);
  call {:cexpr "a"} boogie_si_record_bv32($i807);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 651, 7} true;
  assume {:verifier.code 0} true;
  $i808 := $sext.bv32.bv64($i796);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 651, 9} true;
  assume {:verifier.code 0} true;
  $i809 := $srem.bv64($i808, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 651, 7} true;
  assume {:verifier.code 0} true;
  $i810 := $trunc.bv64.bv32($i809);
  call {:cexpr "b"} boogie_si_record_bv32($i810);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 652, 5} true;
  assume {:verifier.code 0} true;
  $i811 := $add.bv32($i810, $i810);
  call {:cexpr "b"} boogie_si_record_bv32($i811);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 654, 5} true;
  assume {:verifier.code 0} true;
  $i812 := $add.bv32($i799, $i799);
  call {:cexpr "c"} boogie_si_record_bv32($i812);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 655, 9} true;
  assume {:verifier.code 0} true;
  $i813 := $slt.bv32($i807, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 655, 7} true;
  assume {:verifier.code 0} true;
  $i814 := $i812;
  assume {:branchcond $i813} true;
  goto $bb487, $bb488;
$bb481:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 15} true;
  assume {:verifier.code 0} true;
  assume ($i800 == 1bv1);
  goto $bb482;
$bb482:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 646, 9} true;
  assume {:verifier.code 0} true;
  $i803 := $add.bv32($i797, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i803);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 647, 5} true;
  assume {:verifier.code 0} true;
  $i802 := $i803;
  goto $bb486;
$bb483:
  assume !(($i800 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 20} true;
  assume {:verifier.code 0} true;
  $i801 := $sgt.bv32($i796, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 9} true;
  assume {:verifier.code 0} true;
  $i802 := $i797;
  assume {:branchcond $i801} true;
  goto $bb484, $bb485;
$bb484:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 9} true;
  assume {:verifier.code 0} true;
  assume ($i801 == 1bv1);
  goto $bb482;
$bb485:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i801 == 1bv1));
  goto $bb486;
$bb486:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 648, 3} true;
  assume {:verifier.code 0} true;
  $i799 := $i802;
  goto $bb480;
$bb487:
  assume ($i813 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 11} true;
  assume {:verifier.code 0} true;
  $i815 := $slt.bv32($i811, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i815} true;
  goto $bb490, $bb492;
$bb488:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 655, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i813 == 1bv1));
  goto $bb489;
$bb489:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 660, 7} true;
  assume {:verifier.code 0} true;
  $i819 := $sext.bv32.bv64($i807);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 660, 9} true;
  assume {:verifier.code 0} true;
  $i820 := $srem.bv64($i819, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 660, 7} true;
  assume {:verifier.code 0} true;
  $i821 := $trunc.bv64.bv32($i820);
  call {:cexpr "a"} boogie_si_record_bv32($i821);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 661, 5} true;
  assume {:verifier.code 0} true;
  $i822 := $add.bv32($i821, $i821);
  call {:cexpr "a"} boogie_si_record_bv32($i822);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 662, 7} true;
  assume {:verifier.code 0} true;
  $i823 := $sext.bv32.bv64($i811);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 662, 9} true;
  assume {:verifier.code 0} true;
  $i824 := $srem.bv64($i823, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 662, 7} true;
  assume {:verifier.code 0} true;
  $i825 := $trunc.bv64.bv32($i824);
  call {:cexpr "b"} boogie_si_record_bv32($i825);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 663, 5} true;
  assume {:verifier.code 0} true;
  $i826 := $add.bv32($i825, $i825);
  call {:cexpr "b"} boogie_si_record_bv32($i826);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 665, 5} true;
  assume {:verifier.code 0} true;
  $i827 := $add.bv32($i814, $i814);
  call {:cexpr "c"} boogie_si_record_bv32($i827);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 666, 9} true;
  assume {:verifier.code 0} true;
  $i828 := $slt.bv32($i822, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 666, 7} true;
  assume {:verifier.code 0} true;
  $i829 := $i827;
  assume {:branchcond $i828} true;
  goto $bb496, $bb497;
$bb490:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 15} true;
  assume {:verifier.code 0} true;
  assume ($i815 == 1bv1);
  goto $bb491;
$bb491:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 657, 9} true;
  assume {:verifier.code 0} true;
  $i818 := $add.bv32($i812, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i818);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 658, 5} true;
  assume {:verifier.code 0} true;
  $i817 := $i818;
  goto $bb495;
$bb492:
  assume !(($i815 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 20} true;
  assume {:verifier.code 0} true;
  $i816 := $sgt.bv32($i811, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 9} true;
  assume {:verifier.code 0} true;
  $i817 := $i812;
  assume {:branchcond $i816} true;
  goto $bb493, $bb494;
$bb493:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 9} true;
  assume {:verifier.code 0} true;
  assume ($i816 == 1bv1);
  goto $bb491;
$bb494:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i816 == 1bv1));
  goto $bb495;
$bb495:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 659, 3} true;
  assume {:verifier.code 0} true;
  $i814 := $i817;
  goto $bb489;
$bb496:
  assume ($i828 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 11} true;
  assume {:verifier.code 0} true;
  $i830 := $slt.bv32($i826, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i830} true;
  goto $bb499, $bb501;
$bb497:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 666, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i828 == 1bv1));
  goto $bb498;
$bb498:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 671, 7} true;
  assume {:verifier.code 0} true;
  $i834 := $sext.bv32.bv64($i822);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 671, 9} true;
  assume {:verifier.code 0} true;
  $i835 := $srem.bv64($i834, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 671, 7} true;
  assume {:verifier.code 0} true;
  $i836 := $trunc.bv64.bv32($i835);
  call {:cexpr "a"} boogie_si_record_bv32($i836);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 672, 5} true;
  assume {:verifier.code 0} true;
  $i837 := $add.bv32($i836, $i836);
  call {:cexpr "a"} boogie_si_record_bv32($i837);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 673, 7} true;
  assume {:verifier.code 0} true;
  $i838 := $sext.bv32.bv64($i826);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 673, 9} true;
  assume {:verifier.code 0} true;
  $i839 := $srem.bv64($i838, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 673, 7} true;
  assume {:verifier.code 0} true;
  $i840 := $trunc.bv64.bv32($i839);
  call {:cexpr "b"} boogie_si_record_bv32($i840);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 674, 5} true;
  assume {:verifier.code 0} true;
  $i841 := $add.bv32($i840, $i840);
  call {:cexpr "b"} boogie_si_record_bv32($i841);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 676, 5} true;
  assume {:verifier.code 0} true;
  $i842 := $add.bv32($i829, $i829);
  call {:cexpr "c"} boogie_si_record_bv32($i842);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 677, 9} true;
  assume {:verifier.code 0} true;
  $i843 := $slt.bv32($i837, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 677, 7} true;
  assume {:verifier.code 0} true;
  $i844 := $i842;
  assume {:branchcond $i843} true;
  goto $bb505, $bb506;
$bb499:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 15} true;
  assume {:verifier.code 0} true;
  assume ($i830 == 1bv1);
  goto $bb500;
$bb500:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 668, 9} true;
  assume {:verifier.code 0} true;
  $i833 := $add.bv32($i827, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i833);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 669, 5} true;
  assume {:verifier.code 0} true;
  $i832 := $i833;
  goto $bb504;
$bb501:
  assume !(($i830 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 20} true;
  assume {:verifier.code 0} true;
  $i831 := $sgt.bv32($i826, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 9} true;
  assume {:verifier.code 0} true;
  $i832 := $i827;
  assume {:branchcond $i831} true;
  goto $bb502, $bb503;
$bb502:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 9} true;
  assume {:verifier.code 0} true;
  assume ($i831 == 1bv1);
  goto $bb500;
$bb503:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i831 == 1bv1));
  goto $bb504;
$bb504:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 670, 3} true;
  assume {:verifier.code 0} true;
  $i829 := $i832;
  goto $bb498;
$bb505:
  assume ($i843 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 11} true;
  assume {:verifier.code 0} true;
  $i845 := $slt.bv32($i841, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i845} true;
  goto $bb508, $bb510;
$bb506:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 677, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i843 == 1bv1));
  goto $bb507;
$bb507:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 682, 7} true;
  assume {:verifier.code 0} true;
  $i849 := $sext.bv32.bv64($i837);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 682, 9} true;
  assume {:verifier.code 0} true;
  $i850 := $srem.bv64($i849, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 682, 7} true;
  assume {:verifier.code 0} true;
  $i851 := $trunc.bv64.bv32($i850);
  call {:cexpr "a"} boogie_si_record_bv32($i851);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 683, 5} true;
  assume {:verifier.code 0} true;
  $i852 := $add.bv32($i851, $i851);
  call {:cexpr "a"} boogie_si_record_bv32($i852);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 684, 7} true;
  assume {:verifier.code 0} true;
  $i853 := $sext.bv32.bv64($i841);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 684, 9} true;
  assume {:verifier.code 0} true;
  $i854 := $srem.bv64($i853, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 684, 7} true;
  assume {:verifier.code 0} true;
  $i855 := $trunc.bv64.bv32($i854);
  call {:cexpr "b"} boogie_si_record_bv32($i855);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 685, 5} true;
  assume {:verifier.code 0} true;
  $i856 := $add.bv32($i855, $i855);
  call {:cexpr "b"} boogie_si_record_bv32($i856);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 687, 5} true;
  assume {:verifier.code 0} true;
  $i857 := $add.bv32($i844, $i844);
  call {:cexpr "c"} boogie_si_record_bv32($i857);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 688, 9} true;
  assume {:verifier.code 0} true;
  $i858 := $slt.bv32($i852, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 688, 7} true;
  assume {:verifier.code 0} true;
  $i859 := $i857;
  assume {:branchcond $i858} true;
  goto $bb514, $bb515;
$bb508:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 15} true;
  assume {:verifier.code 0} true;
  assume ($i845 == 1bv1);
  goto $bb509;
$bb509:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 679, 9} true;
  assume {:verifier.code 0} true;
  $i848 := $add.bv32($i842, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i848);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 680, 5} true;
  assume {:verifier.code 0} true;
  $i847 := $i848;
  goto $bb513;
$bb510:
  assume !(($i845 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 20} true;
  assume {:verifier.code 0} true;
  $i846 := $sgt.bv32($i841, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 9} true;
  assume {:verifier.code 0} true;
  $i847 := $i842;
  assume {:branchcond $i846} true;
  goto $bb511, $bb512;
$bb511:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 9} true;
  assume {:verifier.code 0} true;
  assume ($i846 == 1bv1);
  goto $bb509;
$bb512:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i846 == 1bv1));
  goto $bb513;
$bb513:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 681, 3} true;
  assume {:verifier.code 0} true;
  $i844 := $i847;
  goto $bb507;
$bb514:
  assume ($i858 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 11} true;
  assume {:verifier.code 0} true;
  $i860 := $slt.bv32($i856, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i860} true;
  goto $bb517, $bb519;
$bb515:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 688, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i858 == 1bv1));
  goto $bb516;
$bb516:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 693, 7} true;
  assume {:verifier.code 0} true;
  $i864 := $sext.bv32.bv64($i852);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 693, 9} true;
  assume {:verifier.code 0} true;
  $i865 := $srem.bv64($i864, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 693, 7} true;
  assume {:verifier.code 0} true;
  $i866 := $trunc.bv64.bv32($i865);
  call {:cexpr "a"} boogie_si_record_bv32($i866);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 694, 5} true;
  assume {:verifier.code 0} true;
  $i867 := $add.bv32($i866, $i866);
  call {:cexpr "a"} boogie_si_record_bv32($i867);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 695, 7} true;
  assume {:verifier.code 0} true;
  $i868 := $sext.bv32.bv64($i856);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 695, 9} true;
  assume {:verifier.code 0} true;
  $i869 := $srem.bv64($i868, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 695, 7} true;
  assume {:verifier.code 0} true;
  $i870 := $trunc.bv64.bv32($i869);
  call {:cexpr "b"} boogie_si_record_bv32($i870);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 696, 5} true;
  assume {:verifier.code 0} true;
  $i871 := $add.bv32($i870, $i870);
  call {:cexpr "b"} boogie_si_record_bv32($i871);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 698, 5} true;
  assume {:verifier.code 0} true;
  $i872 := $add.bv32($i859, $i859);
  call {:cexpr "c"} boogie_si_record_bv32($i872);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 699, 9} true;
  assume {:verifier.code 0} true;
  $i873 := $slt.bv32($i867, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 699, 7} true;
  assume {:verifier.code 0} true;
  $i874 := $i872;
  assume {:branchcond $i873} true;
  goto $bb523, $bb524;
$bb517:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 15} true;
  assume {:verifier.code 0} true;
  assume ($i860 == 1bv1);
  goto $bb518;
$bb518:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 690, 9} true;
  assume {:verifier.code 0} true;
  $i863 := $add.bv32($i857, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i863);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 691, 5} true;
  assume {:verifier.code 0} true;
  $i862 := $i863;
  goto $bb522;
$bb519:
  assume !(($i860 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 20} true;
  assume {:verifier.code 0} true;
  $i861 := $sgt.bv32($i856, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 9} true;
  assume {:verifier.code 0} true;
  $i862 := $i857;
  assume {:branchcond $i861} true;
  goto $bb520, $bb521;
$bb520:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 9} true;
  assume {:verifier.code 0} true;
  assume ($i861 == 1bv1);
  goto $bb518;
$bb521:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i861 == 1bv1));
  goto $bb522;
$bb522:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 692, 3} true;
  assume {:verifier.code 0} true;
  $i859 := $i862;
  goto $bb516;
$bb523:
  assume ($i873 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 11} true;
  assume {:verifier.code 0} true;
  $i875 := $slt.bv32($i871, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i875} true;
  goto $bb526, $bb528;
$bb524:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 699, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i873 == 1bv1));
  goto $bb525;
$bb525:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 704, 7} true;
  assume {:verifier.code 0} true;
  $i879 := $sext.bv32.bv64($i867);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 704, 9} true;
  assume {:verifier.code 0} true;
  $i880 := $srem.bv64($i879, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 704, 7} true;
  assume {:verifier.code 0} true;
  $i881 := $trunc.bv64.bv32($i880);
  call {:cexpr "a"} boogie_si_record_bv32($i881);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 705, 5} true;
  assume {:verifier.code 0} true;
  $i882 := $add.bv32($i881, $i881);
  call {:cexpr "a"} boogie_si_record_bv32($i882);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 706, 7} true;
  assume {:verifier.code 0} true;
  $i883 := $sext.bv32.bv64($i871);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 706, 9} true;
  assume {:verifier.code 0} true;
  $i884 := $srem.bv64($i883, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 706, 7} true;
  assume {:verifier.code 0} true;
  $i885 := $trunc.bv64.bv32($i884);
  call {:cexpr "b"} boogie_si_record_bv32($i885);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 707, 5} true;
  assume {:verifier.code 0} true;
  $i886 := $add.bv32($i885, $i885);
  call {:cexpr "b"} boogie_si_record_bv32($i886);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 709, 5} true;
  assume {:verifier.code 0} true;
  $i887 := $add.bv32($i874, $i874);
  call {:cexpr "c"} boogie_si_record_bv32($i887);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 710, 9} true;
  assume {:verifier.code 0} true;
  $i888 := $slt.bv32($i882, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 710, 7} true;
  assume {:verifier.code 0} true;
  $i889 := $i887;
  assume {:branchcond $i888} true;
  goto $bb532, $bb533;
$bb526:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 15} true;
  assume {:verifier.code 0} true;
  assume ($i875 == 1bv1);
  goto $bb527;
$bb527:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 701, 9} true;
  assume {:verifier.code 0} true;
  $i878 := $add.bv32($i872, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i878);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 702, 5} true;
  assume {:verifier.code 0} true;
  $i877 := $i878;
  goto $bb531;
$bb528:
  assume !(($i875 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 20} true;
  assume {:verifier.code 0} true;
  $i876 := $sgt.bv32($i871, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 9} true;
  assume {:verifier.code 0} true;
  $i877 := $i872;
  assume {:branchcond $i876} true;
  goto $bb529, $bb530;
$bb529:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 9} true;
  assume {:verifier.code 0} true;
  assume ($i876 == 1bv1);
  goto $bb527;
$bb530:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i876 == 1bv1));
  goto $bb531;
$bb531:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 703, 3} true;
  assume {:verifier.code 0} true;
  $i874 := $i877;
  goto $bb525;
$bb532:
  assume ($i888 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 11} true;
  assume {:verifier.code 0} true;
  $i890 := $slt.bv32($i886, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i890} true;
  goto $bb535, $bb537;
$bb533:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 710, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i888 == 1bv1));
  goto $bb534;
$bb534:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 715, 7} true;
  assume {:verifier.code 0} true;
  $i894 := $sext.bv32.bv64($i882);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 715, 9} true;
  assume {:verifier.code 0} true;
  $i895 := $srem.bv64($i894, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 715, 7} true;
  assume {:verifier.code 0} true;
  $i896 := $trunc.bv64.bv32($i895);
  call {:cexpr "a"} boogie_si_record_bv32($i896);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 716, 5} true;
  assume {:verifier.code 0} true;
  $i897 := $add.bv32($i896, $i896);
  call {:cexpr "a"} boogie_si_record_bv32($i897);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 717, 7} true;
  assume {:verifier.code 0} true;
  $i898 := $sext.bv32.bv64($i886);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 717, 9} true;
  assume {:verifier.code 0} true;
  $i899 := $srem.bv64($i898, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 717, 7} true;
  assume {:verifier.code 0} true;
  $i900 := $trunc.bv64.bv32($i899);
  call {:cexpr "b"} boogie_si_record_bv32($i900);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 718, 5} true;
  assume {:verifier.code 0} true;
  $i901 := $add.bv32($i900, $i900);
  call {:cexpr "b"} boogie_si_record_bv32($i901);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 720, 5} true;
  assume {:verifier.code 0} true;
  $i902 := $add.bv32($i889, $i889);
  call {:cexpr "c"} boogie_si_record_bv32($i902);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 721, 9} true;
  assume {:verifier.code 0} true;
  $i903 := $slt.bv32($i897, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 721, 7} true;
  assume {:verifier.code 0} true;
  $i904 := $i902;
  assume {:branchcond $i903} true;
  goto $bb541, $bb542;
$bb535:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 15} true;
  assume {:verifier.code 0} true;
  assume ($i890 == 1bv1);
  goto $bb536;
$bb536:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 712, 9} true;
  assume {:verifier.code 0} true;
  $i893 := $add.bv32($i887, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i893);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 713, 5} true;
  assume {:verifier.code 0} true;
  $i892 := $i893;
  goto $bb540;
$bb537:
  assume !(($i890 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 20} true;
  assume {:verifier.code 0} true;
  $i891 := $sgt.bv32($i886, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 9} true;
  assume {:verifier.code 0} true;
  $i892 := $i887;
  assume {:branchcond $i891} true;
  goto $bb538, $bb539;
$bb538:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 9} true;
  assume {:verifier.code 0} true;
  assume ($i891 == 1bv1);
  goto $bb536;
$bb539:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i891 == 1bv1));
  goto $bb540;
$bb540:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 714, 3} true;
  assume {:verifier.code 0} true;
  $i889 := $i892;
  goto $bb534;
$bb541:
  assume ($i903 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 11} true;
  assume {:verifier.code 0} true;
  $i905 := $slt.bv32($i901, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i905} true;
  goto $bb544, $bb546;
$bb542:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 721, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i903 == 1bv1));
  goto $bb543;
$bb543:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 726, 7} true;
  assume {:verifier.code 0} true;
  $i909 := $sext.bv32.bv64($i897);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 726, 9} true;
  assume {:verifier.code 0} true;
  $i910 := $srem.bv64($i909, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 726, 7} true;
  assume {:verifier.code 0} true;
  $i911 := $trunc.bv64.bv32($i910);
  call {:cexpr "a"} boogie_si_record_bv32($i911);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 727, 5} true;
  assume {:verifier.code 0} true;
  $i912 := $add.bv32($i911, $i911);
  call {:cexpr "a"} boogie_si_record_bv32($i912);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 728, 7} true;
  assume {:verifier.code 0} true;
  $i913 := $sext.bv32.bv64($i901);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 728, 9} true;
  assume {:verifier.code 0} true;
  $i914 := $srem.bv64($i913, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 728, 7} true;
  assume {:verifier.code 0} true;
  $i915 := $trunc.bv64.bv32($i914);
  call {:cexpr "b"} boogie_si_record_bv32($i915);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 729, 5} true;
  assume {:verifier.code 0} true;
  $i916 := $add.bv32($i915, $i915);
  call {:cexpr "b"} boogie_si_record_bv32($i916);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 731, 5} true;
  assume {:verifier.code 0} true;
  $i917 := $add.bv32($i904, $i904);
  call {:cexpr "c"} boogie_si_record_bv32($i917);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 732, 9} true;
  assume {:verifier.code 0} true;
  $i918 := $slt.bv32($i912, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 732, 7} true;
  assume {:verifier.code 0} true;
  $i919 := $i917;
  assume {:branchcond $i918} true;
  goto $bb550, $bb551;
$bb544:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 15} true;
  assume {:verifier.code 0} true;
  assume ($i905 == 1bv1);
  goto $bb545;
$bb545:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 723, 9} true;
  assume {:verifier.code 0} true;
  $i908 := $add.bv32($i902, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i908);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 724, 5} true;
  assume {:verifier.code 0} true;
  $i907 := $i908;
  goto $bb549;
$bb546:
  assume !(($i905 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 20} true;
  assume {:verifier.code 0} true;
  $i906 := $sgt.bv32($i901, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 9} true;
  assume {:verifier.code 0} true;
  $i907 := $i902;
  assume {:branchcond $i906} true;
  goto $bb547, $bb548;
$bb547:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 9} true;
  assume {:verifier.code 0} true;
  assume ($i906 == 1bv1);
  goto $bb545;
$bb548:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i906 == 1bv1));
  goto $bb549;
$bb549:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 725, 3} true;
  assume {:verifier.code 0} true;
  $i904 := $i907;
  goto $bb543;
$bb550:
  assume ($i918 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 11} true;
  assume {:verifier.code 0} true;
  $i920 := $slt.bv32($i916, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i920} true;
  goto $bb553, $bb555;
$bb551:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 732, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i918 == 1bv1));
  goto $bb552;
$bb552:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 737, 7} true;
  assume {:verifier.code 0} true;
  $i924 := $sext.bv32.bv64($i912);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 737, 9} true;
  assume {:verifier.code 0} true;
  $i925 := $srem.bv64($i924, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 737, 7} true;
  assume {:verifier.code 0} true;
  $i926 := $trunc.bv64.bv32($i925);
  call {:cexpr "a"} boogie_si_record_bv32($i926);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 738, 5} true;
  assume {:verifier.code 0} true;
  $i927 := $add.bv32($i926, $i926);
  call {:cexpr "a"} boogie_si_record_bv32($i927);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 739, 7} true;
  assume {:verifier.code 0} true;
  $i928 := $sext.bv32.bv64($i916);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 739, 9} true;
  assume {:verifier.code 0} true;
  $i929 := $srem.bv64($i928, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 739, 7} true;
  assume {:verifier.code 0} true;
  $i930 := $trunc.bv64.bv32($i929);
  call {:cexpr "b"} boogie_si_record_bv32($i930);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 740, 5} true;
  assume {:verifier.code 0} true;
  $i931 := $add.bv32($i930, $i930);
  call {:cexpr "b"} boogie_si_record_bv32($i931);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 742, 5} true;
  assume {:verifier.code 0} true;
  $i932 := $add.bv32($i919, $i919);
  call {:cexpr "c"} boogie_si_record_bv32($i932);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 743, 9} true;
  assume {:verifier.code 0} true;
  $i933 := $slt.bv32($i927, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 743, 7} true;
  assume {:verifier.code 0} true;
  $i934 := $i932;
  assume {:branchcond $i933} true;
  goto $bb559, $bb560;
$bb553:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 15} true;
  assume {:verifier.code 0} true;
  assume ($i920 == 1bv1);
  goto $bb554;
$bb554:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 734, 9} true;
  assume {:verifier.code 0} true;
  $i923 := $add.bv32($i917, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i923);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 735, 5} true;
  assume {:verifier.code 0} true;
  $i922 := $i923;
  goto $bb558;
$bb555:
  assume !(($i920 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 20} true;
  assume {:verifier.code 0} true;
  $i921 := $sgt.bv32($i916, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 9} true;
  assume {:verifier.code 0} true;
  $i922 := $i917;
  assume {:branchcond $i921} true;
  goto $bb556, $bb557;
$bb556:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 9} true;
  assume {:verifier.code 0} true;
  assume ($i921 == 1bv1);
  goto $bb554;
$bb557:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i921 == 1bv1));
  goto $bb558;
$bb558:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 736, 3} true;
  assume {:verifier.code 0} true;
  $i919 := $i922;
  goto $bb552;
$bb559:
  assume ($i933 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 11} true;
  assume {:verifier.code 0} true;
  $i935 := $slt.bv32($i931, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i935} true;
  goto $bb562, $bb564;
$bb560:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 743, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i933 == 1bv1));
  goto $bb561;
$bb561:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 748, 7} true;
  assume {:verifier.code 0} true;
  $i939 := $sext.bv32.bv64($i927);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 748, 9} true;
  assume {:verifier.code 0} true;
  $i940 := $srem.bv64($i939, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 748, 7} true;
  assume {:verifier.code 0} true;
  $i941 := $trunc.bv64.bv32($i940);
  call {:cexpr "a"} boogie_si_record_bv32($i941);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 749, 5} true;
  assume {:verifier.code 0} true;
  $i942 := $add.bv32($i941, $i941);
  call {:cexpr "a"} boogie_si_record_bv32($i942);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 750, 7} true;
  assume {:verifier.code 0} true;
  $i943 := $sext.bv32.bv64($i931);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 750, 9} true;
  assume {:verifier.code 0} true;
  $i944 := $srem.bv64($i943, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 750, 7} true;
  assume {:verifier.code 0} true;
  $i945 := $trunc.bv64.bv32($i944);
  call {:cexpr "b"} boogie_si_record_bv32($i945);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 751, 5} true;
  assume {:verifier.code 0} true;
  $i946 := $add.bv32($i945, $i945);
  call {:cexpr "b"} boogie_si_record_bv32($i946);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 753, 5} true;
  assume {:verifier.code 0} true;
  $i947 := $add.bv32($i934, $i934);
  call {:cexpr "c"} boogie_si_record_bv32($i947);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 754, 9} true;
  assume {:verifier.code 0} true;
  $i948 := $slt.bv32($i942, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 754, 7} true;
  assume {:verifier.code 0} true;
  $i949 := $i947;
  assume {:branchcond $i948} true;
  goto $bb568, $bb569;
$bb562:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 15} true;
  assume {:verifier.code 0} true;
  assume ($i935 == 1bv1);
  goto $bb563;
$bb563:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 745, 9} true;
  assume {:verifier.code 0} true;
  $i938 := $add.bv32($i932, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i938);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 746, 5} true;
  assume {:verifier.code 0} true;
  $i937 := $i938;
  goto $bb567;
$bb564:
  assume !(($i935 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 20} true;
  assume {:verifier.code 0} true;
  $i936 := $sgt.bv32($i931, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 9} true;
  assume {:verifier.code 0} true;
  $i937 := $i932;
  assume {:branchcond $i936} true;
  goto $bb565, $bb566;
$bb565:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 9} true;
  assume {:verifier.code 0} true;
  assume ($i936 == 1bv1);
  goto $bb563;
$bb566:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i936 == 1bv1));
  goto $bb567;
$bb567:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 747, 3} true;
  assume {:verifier.code 0} true;
  $i934 := $i937;
  goto $bb561;
$bb568:
  assume ($i948 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 11} true;
  assume {:verifier.code 0} true;
  $i950 := $slt.bv32($i946, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i950} true;
  goto $bb571, $bb573;
$bb569:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 754, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i948 == 1bv1));
  goto $bb570;
$bb570:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 764, 3} true;
  assume {:verifier.code 0} true;
  $r := $i949;
  $exn := false;
  return;
$bb571:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 15} true;
  assume {:verifier.code 0} true;
  assume ($i950 == 1bv1);
  goto $bb572;
$bb572:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 756, 9} true;
  assume {:verifier.code 0} true;
  $i953 := $add.bv32($i947, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i953);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 757, 5} true;
  assume {:verifier.code 0} true;
  $i952 := $i953;
  goto $bb576;
$bb573:
  assume !(($i950 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 20} true;
  assume {:verifier.code 0} true;
  $i951 := $sgt.bv32($i946, 2147483647bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 9} true;
  assume {:verifier.code 0} true;
  $i952 := $i947;
  assume {:branchcond $i951} true;
  goto $bb574, $bb575;
$bb574:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 9} true;
  assume {:verifier.code 0} true;
  assume ($i951 == 1bv1);
  goto $bb572;
$bb575:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i951 == 1bv1));
  goto $bb576;
$bb576:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 758, 3} true;
  assume {:verifier.code 0} true;
  $i949 := $i952;
  goto $bb570;
}
const __SMACK_and64: ref;
axiom (__SMACK_and64 == $sub.ref(0, 10320));
procedure  __SMACK_and64($i0: bv64, $i1: bv64)
  returns ($r: bv64)
{
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv64;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 65} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_and64:arg:a"} boogie_si_record_bv64($i0);
  call {:cexpr "__SMACK_and64:arg:b"} boogie_si_record_bv64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 65} true;
  assume {:verifier.code 1} true;
  $i2 := $trunc.bv64.bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 68} true;
  assume {:verifier.code 1} true;
  $i3 := $trunc.bv64.bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 51} true;
  assume {:verifier.code 1} true;
  call $i4 := __SMACK_and32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_and32"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 45} true;
  assume {:verifier.code 0} true;
  $i5 := $sext.bv32.bv64($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 38} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_and16: ref;
axiom (__SMACK_and16 == $sub.ref(0, 11352));
procedure  __SMACK_and16($i0: bv16, $i1: bv16)
  returns ($r: bv16)
{
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv16;
  var $i6: bv32;
  var $i7: bv1;
  var $i9: bv32;
  var $i10: bv1;
  var $i11: bv32;
  var $i12: bv1;
  var $i14: bv32;
  var $i15: bv32;
  var $i16: bv16;
  var $i13: bv16;
  var $i8: bv16;
  var $i17: bv32;
  var $i18: bv32;
  var $i19: bv16;
  var $i20: bv32;
  var $i21: bv32;
  var $i22: bv32;
  var $i23: bv16;
  var $i24: bv32;
  var $i25: bv32;
  var $i26: bv16;
  var $i27: bv32;
  var $i28: bv32;
  var $i29: bv32;
  var $i30: bv16;
  var $i31: bv32;
  var $i32: bv32;
  var $i33: bv32;
  var $i34: bv16;
  var $i35: bv32;
  var $i36: bv1;
  var $i38: bv32;
  var $i39: bv1;
  var $i40: bv32;
  var $i41: bv1;
  var $i43: bv32;
  var $i44: bv32;
  var $i45: bv16;
  var $i42: bv16;
  var $i37: bv16;
  var $i46: bv32;
  var $i47: bv32;
  var $i48: bv16;
  var $i49: bv32;
  var $i50: bv32;
  var $i51: bv32;
  var $i52: bv16;
  var $i53: bv32;
  var $i54: bv32;
  var $i55: bv16;
  var $i56: bv32;
  var $i57: bv32;
  var $i58: bv32;
  var $i59: bv16;
  var $i60: bv32;
  var $i61: bv32;
  var $i62: bv32;
  var $i63: bv16;
  var $i64: bv32;
  var $i65: bv1;
  var $i67: bv32;
  var $i68: bv1;
  var $i69: bv32;
  var $i70: bv1;
  var $i72: bv32;
  var $i73: bv32;
  var $i74: bv16;
  var $i71: bv16;
  var $i66: bv16;
  var $i75: bv32;
  var $i76: bv32;
  var $i77: bv16;
  var $i78: bv32;
  var $i79: bv32;
  var $i80: bv32;
  var $i81: bv16;
  var $i82: bv32;
  var $i83: bv32;
  var $i84: bv16;
  var $i85: bv32;
  var $i86: bv32;
  var $i87: bv32;
  var $i88: bv16;
  var $i89: bv32;
  var $i90: bv32;
  var $i91: bv32;
  var $i92: bv16;
  var $i93: bv32;
  var $i94: bv1;
  var $i96: bv32;
  var $i97: bv1;
  var $i98: bv32;
  var $i99: bv1;
  var $i101: bv32;
  var $i102: bv32;
  var $i103: bv16;
  var $i100: bv16;
  var $i95: bv16;
  var $i104: bv32;
  var $i105: bv32;
  var $i106: bv16;
  var $i107: bv32;
  var $i108: bv32;
  var $i109: bv32;
  var $i110: bv16;
  var $i111: bv32;
  var $i112: bv32;
  var $i113: bv16;
  var $i114: bv32;
  var $i115: bv32;
  var $i116: bv32;
  var $i117: bv16;
  var $i118: bv32;
  var $i119: bv32;
  var $i120: bv32;
  var $i121: bv16;
  var $i122: bv32;
  var $i123: bv1;
  var $i125: bv32;
  var $i126: bv1;
  var $i127: bv32;
  var $i128: bv1;
  var $i130: bv32;
  var $i131: bv32;
  var $i132: bv16;
  var $i129: bv16;
  var $i124: bv16;
  var $i133: bv32;
  var $i134: bv32;
  var $i135: bv16;
  var $i136: bv32;
  var $i137: bv32;
  var $i138: bv32;
  var $i139: bv16;
  var $i140: bv32;
  var $i141: bv32;
  var $i142: bv16;
  var $i143: bv32;
  var $i144: bv32;
  var $i145: bv32;
  var $i146: bv16;
  var $i147: bv32;
  var $i148: bv32;
  var $i149: bv32;
  var $i150: bv16;
  var $i151: bv32;
  var $i152: bv1;
  var $i154: bv32;
  var $i155: bv1;
  var $i156: bv32;
  var $i157: bv1;
  var $i159: bv32;
  var $i160: bv32;
  var $i161: bv16;
  var $i158: bv16;
  var $i153: bv16;
  var $i162: bv32;
  var $i163: bv32;
  var $i164: bv16;
  var $i165: bv32;
  var $i166: bv32;
  var $i167: bv32;
  var $i168: bv16;
  var $i169: bv32;
  var $i170: bv32;
  var $i171: bv16;
  var $i172: bv32;
  var $i173: bv32;
  var $i174: bv32;
  var $i175: bv16;
  var $i176: bv32;
  var $i177: bv32;
  var $i178: bv32;
  var $i179: bv16;
  var $i180: bv32;
  var $i181: bv1;
  var $i183: bv32;
  var $i184: bv1;
  var $i185: bv32;
  var $i186: bv1;
  var $i188: bv32;
  var $i189: bv32;
  var $i190: bv16;
  var $i187: bv16;
  var $i182: bv16;
  var $i191: bv32;
  var $i192: bv32;
  var $i193: bv16;
  var $i194: bv32;
  var $i195: bv32;
  var $i196: bv32;
  var $i197: bv16;
  var $i198: bv32;
  var $i199: bv32;
  var $i200: bv16;
  var $i201: bv32;
  var $i202: bv32;
  var $i203: bv32;
  var $i204: bv16;
  var $i205: bv32;
  var $i206: bv32;
  var $i207: bv32;
  var $i208: bv16;
  var $i209: bv32;
  var $i210: bv1;
  var $i212: bv32;
  var $i213: bv1;
  var $i214: bv32;
  var $i215: bv1;
  var $i217: bv32;
  var $i218: bv32;
  var $i219: bv16;
  var $i216: bv16;
  var $i211: bv16;
  var $i220: bv32;
  var $i221: bv32;
  var $i222: bv16;
  var $i223: bv32;
  var $i224: bv32;
  var $i225: bv32;
  var $i226: bv16;
  var $i227: bv32;
  var $i228: bv32;
  var $i229: bv16;
  var $i230: bv32;
  var $i231: bv32;
  var $i232: bv32;
  var $i233: bv16;
  var $i234: bv32;
  var $i235: bv32;
  var $i236: bv32;
  var $i237: bv16;
  var $i238: bv32;
  var $i239: bv1;
  var $i241: bv32;
  var $i242: bv1;
  var $i243: bv32;
  var $i244: bv1;
  var $i246: bv32;
  var $i247: bv32;
  var $i248: bv16;
  var $i245: bv16;
  var $i240: bv16;
  var $i249: bv32;
  var $i250: bv32;
  var $i251: bv16;
  var $i252: bv32;
  var $i253: bv32;
  var $i254: bv32;
  var $i255: bv16;
  var $i256: bv32;
  var $i257: bv32;
  var $i258: bv16;
  var $i259: bv32;
  var $i260: bv32;
  var $i261: bv32;
  var $i262: bv16;
  var $i263: bv32;
  var $i264: bv32;
  var $i265: bv32;
  var $i266: bv16;
  var $i267: bv32;
  var $i268: bv1;
  var $i270: bv32;
  var $i271: bv1;
  var $i272: bv32;
  var $i273: bv1;
  var $i275: bv32;
  var $i276: bv32;
  var $i277: bv16;
  var $i274: bv16;
  var $i269: bv16;
  var $i278: bv32;
  var $i279: bv32;
  var $i280: bv16;
  var $i281: bv32;
  var $i282: bv32;
  var $i283: bv32;
  var $i284: bv16;
  var $i285: bv32;
  var $i286: bv32;
  var $i287: bv16;
  var $i288: bv32;
  var $i289: bv32;
  var $i290: bv32;
  var $i291: bv16;
  var $i292: bv32;
  var $i293: bv32;
  var $i294: bv32;
  var $i295: bv16;
  var $i296: bv32;
  var $i297: bv1;
  var $i299: bv32;
  var $i300: bv1;
  var $i301: bv32;
  var $i302: bv1;
  var $i304: bv32;
  var $i305: bv32;
  var $i306: bv16;
  var $i303: bv16;
  var $i298: bv16;
  var $i307: bv32;
  var $i308: bv32;
  var $i309: bv16;
  var $i310: bv32;
  var $i311: bv32;
  var $i312: bv32;
  var $i313: bv16;
  var $i314: bv32;
  var $i315: bv32;
  var $i316: bv16;
  var $i317: bv32;
  var $i318: bv32;
  var $i319: bv32;
  var $i320: bv16;
  var $i321: bv32;
  var $i322: bv32;
  var $i323: bv32;
  var $i324: bv16;
  var $i325: bv32;
  var $i326: bv1;
  var $i328: bv32;
  var $i329: bv1;
  var $i330: bv32;
  var $i331: bv1;
  var $i333: bv32;
  var $i334: bv32;
  var $i335: bv16;
  var $i332: bv16;
  var $i327: bv16;
  var $i336: bv32;
  var $i337: bv32;
  var $i338: bv16;
  var $i339: bv32;
  var $i340: bv32;
  var $i341: bv32;
  var $i342: bv16;
  var $i343: bv32;
  var $i344: bv32;
  var $i345: bv16;
  var $i346: bv32;
  var $i347: bv32;
  var $i348: bv32;
  var $i349: bv16;
  var $i350: bv32;
  var $i351: bv32;
  var $i352: bv32;
  var $i353: bv16;
  var $i354: bv32;
  var $i355: bv1;
  var $i357: bv32;
  var $i358: bv1;
  var $i359: bv32;
  var $i360: bv1;
  var $i362: bv32;
  var $i363: bv32;
  var $i364: bv16;
  var $i361: bv16;
  var $i356: bv16;
  var $i365: bv32;
  var $i366: bv32;
  var $i367: bv16;
  var $i368: bv32;
  var $i369: bv32;
  var $i370: bv32;
  var $i371: bv16;
  var $i372: bv32;
  var $i373: bv32;
  var $i374: bv16;
  var $i375: bv32;
  var $i376: bv32;
  var $i377: bv32;
  var $i378: bv16;
  var $i379: bv32;
  var $i380: bv32;
  var $i381: bv32;
  var $i382: bv16;
  var $i383: bv32;
  var $i384: bv1;
  var $i386: bv32;
  var $i387: bv1;
  var $i388: bv32;
  var $i389: bv1;
  var $i391: bv32;
  var $i392: bv32;
  var $i393: bv16;
  var $i390: bv16;
  var $i385: bv16;
  var $i394: bv32;
  var $i395: bv32;
  var $i396: bv16;
  var $i397: bv32;
  var $i398: bv32;
  var $i399: bv32;
  var $i400: bv16;
  var $i401: bv32;
  var $i402: bv32;
  var $i403: bv16;
  var $i404: bv32;
  var $i405: bv32;
  var $i406: bv32;
  var $i407: bv16;
  var $i408: bv32;
  var $i409: bv32;
  var $i410: bv32;
  var $i411: bv16;
  var $i412: bv32;
  var $i413: bv1;
  var $i415: bv32;
  var $i416: bv1;
  var $i417: bv32;
  var $i418: bv1;
  var $i420: bv32;
  var $i421: bv32;
  var $i422: bv16;
  var $i419: bv16;
  var $i414: bv16;
  var $i423: bv32;
  var $i424: bv32;
  var $i425: bv16;
  var $i426: bv32;
  var $i427: bv32;
  var $i428: bv32;
  var $i429: bv16;
  var $i430: bv32;
  var $i431: bv32;
  var $i432: bv16;
  var $i433: bv32;
  var $i434: bv32;
  var $i435: bv32;
  var $i436: bv16;
  var $i437: bv32;
  var $i438: bv32;
  var $i439: bv32;
  var $i440: bv16;
  var $i441: bv32;
  var $i442: bv1;
  var $i444: bv32;
  var $i445: bv1;
  var $i446: bv32;
  var $i447: bv1;
  var $i449: bv32;
  var $i450: bv32;
  var $i451: bv16;
  var $i448: bv16;
  var $i443: bv16;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 8} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 8} true;
  assume {:verifier.code 0} true;
  $i2 := $sext.bv16.bv32(0bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 5} true;
  assume {:verifier.code 0} true;
  $i3 := $sext.bv16.bv32(0bv16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 5} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv32($i3, $i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.bv32.bv16($i4);
  call {:cexpr "c"} boogie_si_record_bv16($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $sext.bv16.bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $slt.bv32($i6, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $i5;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 9} true;
  assume {:verifier.code 0} true;
  $i9 := $sext.bv16.bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $slt.bv32($i9, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb4, $bb6;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i7 == 1bv1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 778, 7} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.bv16.bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 778, 9} true;
  assume {:verifier.code 0} true;
  $i18 := $srem.bv32($i17, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 778, 7} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.bv32.bv16($i18);
  call {:cexpr "a"} boogie_si_record_bv16($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 779, 8} true;
  assume {:verifier.code 0} true;
  $i20 := $sext.bv16.bv32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 779, 5} true;
  assume {:verifier.code 0} true;
  $i21 := $sext.bv16.bv32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 779, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $add.bv32($i21, $i20);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 779, 5} true;
  assume {:verifier.code 0} true;
  $i23 := $trunc.bv32.bv16($i22);
  call {:cexpr "a"} boogie_si_record_bv16($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 780, 7} true;
  assume {:verifier.code 0} true;
  $i24 := $sext.bv16.bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 780, 9} true;
  assume {:verifier.code 0} true;
  $i25 := $srem.bv32($i24, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 780, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $trunc.bv32.bv16($i25);
  call {:cexpr "b"} boogie_si_record_bv16($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 781, 8} true;
  assume {:verifier.code 0} true;
  $i27 := $sext.bv16.bv32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 781, 5} true;
  assume {:verifier.code 0} true;
  $i28 := $sext.bv16.bv32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 781, 5} true;
  assume {:verifier.code 0} true;
  $i29 := $add.bv32($i28, $i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 781, 5} true;
  assume {:verifier.code 0} true;
  $i30 := $trunc.bv32.bv16($i29);
  call {:cexpr "b"} boogie_si_record_bv16($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 783, 8} true;
  assume {:verifier.code 0} true;
  $i31 := $sext.bv16.bv32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 783, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $sext.bv16.bv32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 783, 5} true;
  assume {:verifier.code 0} true;
  $i33 := $add.bv32($i32, $i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 783, 5} true;
  assume {:verifier.code 0} true;
  $i34 := $trunc.bv32.bv16($i33);
  call {:cexpr "c"} boogie_si_record_bv16($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 7} true;
  assume {:verifier.code 0} true;
  $i35 := $sext.bv16.bv32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 9} true;
  assume {:verifier.code 0} true;
  $i36 := $slt.bv32($i35, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 7} true;
  assume {:verifier.code 0} true;
  $i37 := $i34;
  assume {:branchcond $i36} true;
  goto $bb10, $bb11;
$bb4:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 15} true;
  assume {:verifier.code 0} true;
  assume ($i10 == 1bv1);
  goto $bb5;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 775, 9} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.bv16.bv32($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 775, 9} true;
  assume {:verifier.code 0} true;
  $i15 := $add.bv32($i14, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 775, 9} true;
  assume {:verifier.code 0} true;
  $i16 := $trunc.bv32.bv16($i15);
  call {:cexpr "c"} boogie_si_record_bv16($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 776, 5} true;
  assume {:verifier.code 0} true;
  $i13 := $i16;
  goto $bb9;
$bb6:
  assume !(($i10 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 18} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.bv16.bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 20} true;
  assume {:verifier.code 0} true;
  $i12 := $sgt.bv32($i11, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 9} true;
  assume {:verifier.code 0} true;
  $i13 := $i5;
  assume {:branchcond $i12} true;
  goto $bb7, $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 9} true;
  assume {:verifier.code 0} true;
  assume ($i12 == 1bv1);
  goto $bb5;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i12 == 1bv1));
  goto $bb9;
$bb9:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 777, 3} true;
  assume {:verifier.code 0} true;
  $i8 := $i13;
  goto $bb3;
$bb10:
  assume ($i36 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 9} true;
  assume {:verifier.code 0} true;
  $i38 := $sext.bv16.bv32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 11} true;
  assume {:verifier.code 0} true;
  $i39 := $slt.bv32($i38, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb13, $bb15;
$bb11:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i36 == 1bv1));
  goto $bb12;
$bb12:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 789, 7} true;
  assume {:verifier.code 0} true;
  $i46 := $sext.bv16.bv32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 789, 9} true;
  assume {:verifier.code 0} true;
  $i47 := $srem.bv32($i46, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 789, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $trunc.bv32.bv16($i47);
  call {:cexpr "a"} boogie_si_record_bv16($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 790, 8} true;
  assume {:verifier.code 0} true;
  $i49 := $sext.bv16.bv32($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 790, 5} true;
  assume {:verifier.code 0} true;
  $i50 := $sext.bv16.bv32($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 790, 5} true;
  assume {:verifier.code 0} true;
  $i51 := $add.bv32($i50, $i49);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 790, 5} true;
  assume {:verifier.code 0} true;
  $i52 := $trunc.bv32.bv16($i51);
  call {:cexpr "a"} boogie_si_record_bv16($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 791, 7} true;
  assume {:verifier.code 0} true;
  $i53 := $sext.bv16.bv32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 791, 9} true;
  assume {:verifier.code 0} true;
  $i54 := $srem.bv32($i53, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 791, 7} true;
  assume {:verifier.code 0} true;
  $i55 := $trunc.bv32.bv16($i54);
  call {:cexpr "b"} boogie_si_record_bv16($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 792, 8} true;
  assume {:verifier.code 0} true;
  $i56 := $sext.bv16.bv32($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 792, 5} true;
  assume {:verifier.code 0} true;
  $i57 := $sext.bv16.bv32($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 792, 5} true;
  assume {:verifier.code 0} true;
  $i58 := $add.bv32($i57, $i56);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 792, 5} true;
  assume {:verifier.code 0} true;
  $i59 := $trunc.bv32.bv16($i58);
  call {:cexpr "b"} boogie_si_record_bv16($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 794, 8} true;
  assume {:verifier.code 0} true;
  $i60 := $sext.bv16.bv32($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 794, 5} true;
  assume {:verifier.code 0} true;
  $i61 := $sext.bv16.bv32($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 794, 5} true;
  assume {:verifier.code 0} true;
  $i62 := $add.bv32($i61, $i60);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 794, 5} true;
  assume {:verifier.code 0} true;
  $i63 := $trunc.bv32.bv16($i62);
  call {:cexpr "c"} boogie_si_record_bv16($i63);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 795, 7} true;
  assume {:verifier.code 0} true;
  $i64 := $sext.bv16.bv32($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 795, 9} true;
  assume {:verifier.code 0} true;
  $i65 := $slt.bv32($i64, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 795, 7} true;
  assume {:verifier.code 0} true;
  $i66 := $i63;
  assume {:branchcond $i65} true;
  goto $bb19, $bb20;
$bb13:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 15} true;
  assume {:verifier.code 0} true;
  assume ($i39 == 1bv1);
  goto $bb14;
$bb14:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 786, 9} true;
  assume {:verifier.code 0} true;
  $i43 := $sext.bv16.bv32($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 786, 9} true;
  assume {:verifier.code 0} true;
  $i44 := $add.bv32($i43, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 786, 9} true;
  assume {:verifier.code 0} true;
  $i45 := $trunc.bv32.bv16($i44);
  call {:cexpr "c"} boogie_si_record_bv16($i45);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 787, 5} true;
  assume {:verifier.code 0} true;
  $i42 := $i45;
  goto $bb18;
$bb15:
  assume !(($i39 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 18} true;
  assume {:verifier.code 0} true;
  $i40 := $sext.bv16.bv32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 20} true;
  assume {:verifier.code 0} true;
  $i41 := $sgt.bv32($i40, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 9} true;
  assume {:verifier.code 0} true;
  $i42 := $i34;
  assume {:branchcond $i41} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 9} true;
  assume {:verifier.code 0} true;
  assume ($i41 == 1bv1);
  goto $bb14;
$bb17:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i41 == 1bv1));
  goto $bb18;
$bb18:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 788, 3} true;
  assume {:verifier.code 0} true;
  $i37 := $i42;
  goto $bb12;
$bb19:
  assume ($i65 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 9} true;
  assume {:verifier.code 0} true;
  $i67 := $sext.bv16.bv32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 11} true;
  assume {:verifier.code 0} true;
  $i68 := $slt.bv32($i67, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb22, $bb24;
$bb20:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 795, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i65 == 1bv1));
  goto $bb21;
$bb21:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 800, 7} true;
  assume {:verifier.code 0} true;
  $i75 := $sext.bv16.bv32($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 800, 9} true;
  assume {:verifier.code 0} true;
  $i76 := $srem.bv32($i75, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 800, 7} true;
  assume {:verifier.code 0} true;
  $i77 := $trunc.bv32.bv16($i76);
  call {:cexpr "a"} boogie_si_record_bv16($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 801, 8} true;
  assume {:verifier.code 0} true;
  $i78 := $sext.bv16.bv32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 801, 5} true;
  assume {:verifier.code 0} true;
  $i79 := $sext.bv16.bv32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 801, 5} true;
  assume {:verifier.code 0} true;
  $i80 := $add.bv32($i79, $i78);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 801, 5} true;
  assume {:verifier.code 0} true;
  $i81 := $trunc.bv32.bv16($i80);
  call {:cexpr "a"} boogie_si_record_bv16($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 802, 7} true;
  assume {:verifier.code 0} true;
  $i82 := $sext.bv16.bv32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 802, 9} true;
  assume {:verifier.code 0} true;
  $i83 := $srem.bv32($i82, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 802, 7} true;
  assume {:verifier.code 0} true;
  $i84 := $trunc.bv32.bv16($i83);
  call {:cexpr "b"} boogie_si_record_bv16($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 803, 8} true;
  assume {:verifier.code 0} true;
  $i85 := $sext.bv16.bv32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 803, 5} true;
  assume {:verifier.code 0} true;
  $i86 := $sext.bv16.bv32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 803, 5} true;
  assume {:verifier.code 0} true;
  $i87 := $add.bv32($i86, $i85);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 803, 5} true;
  assume {:verifier.code 0} true;
  $i88 := $trunc.bv32.bv16($i87);
  call {:cexpr "b"} boogie_si_record_bv16($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 805, 8} true;
  assume {:verifier.code 0} true;
  $i89 := $sext.bv16.bv32($i66);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 805, 5} true;
  assume {:verifier.code 0} true;
  $i90 := $sext.bv16.bv32($i66);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 805, 5} true;
  assume {:verifier.code 0} true;
  $i91 := $add.bv32($i90, $i89);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 805, 5} true;
  assume {:verifier.code 0} true;
  $i92 := $trunc.bv32.bv16($i91);
  call {:cexpr "c"} boogie_si_record_bv16($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 806, 7} true;
  assume {:verifier.code 0} true;
  $i93 := $sext.bv16.bv32($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 806, 9} true;
  assume {:verifier.code 0} true;
  $i94 := $slt.bv32($i93, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 806, 7} true;
  assume {:verifier.code 0} true;
  $i95 := $i92;
  assume {:branchcond $i94} true;
  goto $bb28, $bb29;
$bb22:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 15} true;
  assume {:verifier.code 0} true;
  assume ($i68 == 1bv1);
  goto $bb23;
$bb23:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 797, 9} true;
  assume {:verifier.code 0} true;
  $i72 := $sext.bv16.bv32($i63);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 797, 9} true;
  assume {:verifier.code 0} true;
  $i73 := $add.bv32($i72, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 797, 9} true;
  assume {:verifier.code 0} true;
  $i74 := $trunc.bv32.bv16($i73);
  call {:cexpr "c"} boogie_si_record_bv16($i74);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 798, 5} true;
  assume {:verifier.code 0} true;
  $i71 := $i74;
  goto $bb27;
$bb24:
  assume !(($i68 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 18} true;
  assume {:verifier.code 0} true;
  $i69 := $sext.bv16.bv32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 20} true;
  assume {:verifier.code 0} true;
  $i70 := $sgt.bv32($i69, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 9} true;
  assume {:verifier.code 0} true;
  $i71 := $i63;
  assume {:branchcond $i70} true;
  goto $bb25, $bb26;
$bb25:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 9} true;
  assume {:verifier.code 0} true;
  assume ($i70 == 1bv1);
  goto $bb23;
$bb26:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i70 == 1bv1));
  goto $bb27;
$bb27:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 799, 3} true;
  assume {:verifier.code 0} true;
  $i66 := $i71;
  goto $bb21;
$bb28:
  assume ($i94 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 9} true;
  assume {:verifier.code 0} true;
  $i96 := $sext.bv16.bv32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 11} true;
  assume {:verifier.code 0} true;
  $i97 := $slt.bv32($i96, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i97} true;
  goto $bb31, $bb33;
$bb29:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 806, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i94 == 1bv1));
  goto $bb30;
$bb30:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 811, 7} true;
  assume {:verifier.code 0} true;
  $i104 := $sext.bv16.bv32($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 811, 9} true;
  assume {:verifier.code 0} true;
  $i105 := $srem.bv32($i104, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 811, 7} true;
  assume {:verifier.code 0} true;
  $i106 := $trunc.bv32.bv16($i105);
  call {:cexpr "a"} boogie_si_record_bv16($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 812, 8} true;
  assume {:verifier.code 0} true;
  $i107 := $sext.bv16.bv32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 812, 5} true;
  assume {:verifier.code 0} true;
  $i108 := $sext.bv16.bv32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 812, 5} true;
  assume {:verifier.code 0} true;
  $i109 := $add.bv32($i108, $i107);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 812, 5} true;
  assume {:verifier.code 0} true;
  $i110 := $trunc.bv32.bv16($i109);
  call {:cexpr "a"} boogie_si_record_bv16($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 813, 7} true;
  assume {:verifier.code 0} true;
  $i111 := $sext.bv16.bv32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 813, 9} true;
  assume {:verifier.code 0} true;
  $i112 := $srem.bv32($i111, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 813, 7} true;
  assume {:verifier.code 0} true;
  $i113 := $trunc.bv32.bv16($i112);
  call {:cexpr "b"} boogie_si_record_bv16($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 814, 8} true;
  assume {:verifier.code 0} true;
  $i114 := $sext.bv16.bv32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 814, 5} true;
  assume {:verifier.code 0} true;
  $i115 := $sext.bv16.bv32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 814, 5} true;
  assume {:verifier.code 0} true;
  $i116 := $add.bv32($i115, $i114);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 814, 5} true;
  assume {:verifier.code 0} true;
  $i117 := $trunc.bv32.bv16($i116);
  call {:cexpr "b"} boogie_si_record_bv16($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 816, 8} true;
  assume {:verifier.code 0} true;
  $i118 := $sext.bv16.bv32($i95);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 816, 5} true;
  assume {:verifier.code 0} true;
  $i119 := $sext.bv16.bv32($i95);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 816, 5} true;
  assume {:verifier.code 0} true;
  $i120 := $add.bv32($i119, $i118);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 816, 5} true;
  assume {:verifier.code 0} true;
  $i121 := $trunc.bv32.bv16($i120);
  call {:cexpr "c"} boogie_si_record_bv16($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 817, 7} true;
  assume {:verifier.code 0} true;
  $i122 := $sext.bv16.bv32($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 817, 9} true;
  assume {:verifier.code 0} true;
  $i123 := $slt.bv32($i122, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 817, 7} true;
  assume {:verifier.code 0} true;
  $i124 := $i121;
  assume {:branchcond $i123} true;
  goto $bb37, $bb38;
$bb31:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 15} true;
  assume {:verifier.code 0} true;
  assume ($i97 == 1bv1);
  goto $bb32;
$bb32:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 808, 9} true;
  assume {:verifier.code 0} true;
  $i101 := $sext.bv16.bv32($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 808, 9} true;
  assume {:verifier.code 0} true;
  $i102 := $add.bv32($i101, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 808, 9} true;
  assume {:verifier.code 0} true;
  $i103 := $trunc.bv32.bv16($i102);
  call {:cexpr "c"} boogie_si_record_bv16($i103);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 809, 5} true;
  assume {:verifier.code 0} true;
  $i100 := $i103;
  goto $bb36;
$bb33:
  assume !(($i97 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 18} true;
  assume {:verifier.code 0} true;
  $i98 := $sext.bv16.bv32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 20} true;
  assume {:verifier.code 0} true;
  $i99 := $sgt.bv32($i98, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 9} true;
  assume {:verifier.code 0} true;
  $i100 := $i92;
  assume {:branchcond $i99} true;
  goto $bb34, $bb35;
$bb34:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 9} true;
  assume {:verifier.code 0} true;
  assume ($i99 == 1bv1);
  goto $bb32;
$bb35:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i99 == 1bv1));
  goto $bb36;
$bb36:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 810, 3} true;
  assume {:verifier.code 0} true;
  $i95 := $i100;
  goto $bb30;
$bb37:
  assume ($i123 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 9} true;
  assume {:verifier.code 0} true;
  $i125 := $sext.bv16.bv32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 11} true;
  assume {:verifier.code 0} true;
  $i126 := $slt.bv32($i125, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i126} true;
  goto $bb40, $bb42;
$bb38:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 817, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i123 == 1bv1));
  goto $bb39;
$bb39:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 822, 7} true;
  assume {:verifier.code 0} true;
  $i133 := $sext.bv16.bv32($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 822, 9} true;
  assume {:verifier.code 0} true;
  $i134 := $srem.bv32($i133, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 822, 7} true;
  assume {:verifier.code 0} true;
  $i135 := $trunc.bv32.bv16($i134);
  call {:cexpr "a"} boogie_si_record_bv16($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 823, 8} true;
  assume {:verifier.code 0} true;
  $i136 := $sext.bv16.bv32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 823, 5} true;
  assume {:verifier.code 0} true;
  $i137 := $sext.bv16.bv32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 823, 5} true;
  assume {:verifier.code 0} true;
  $i138 := $add.bv32($i137, $i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 823, 5} true;
  assume {:verifier.code 0} true;
  $i139 := $trunc.bv32.bv16($i138);
  call {:cexpr "a"} boogie_si_record_bv16($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 824, 7} true;
  assume {:verifier.code 0} true;
  $i140 := $sext.bv16.bv32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 824, 9} true;
  assume {:verifier.code 0} true;
  $i141 := $srem.bv32($i140, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 824, 7} true;
  assume {:verifier.code 0} true;
  $i142 := $trunc.bv32.bv16($i141);
  call {:cexpr "b"} boogie_si_record_bv16($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 825, 8} true;
  assume {:verifier.code 0} true;
  $i143 := $sext.bv16.bv32($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 825, 5} true;
  assume {:verifier.code 0} true;
  $i144 := $sext.bv16.bv32($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 825, 5} true;
  assume {:verifier.code 0} true;
  $i145 := $add.bv32($i144, $i143);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 825, 5} true;
  assume {:verifier.code 0} true;
  $i146 := $trunc.bv32.bv16($i145);
  call {:cexpr "b"} boogie_si_record_bv16($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 827, 8} true;
  assume {:verifier.code 0} true;
  $i147 := $sext.bv16.bv32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 827, 5} true;
  assume {:verifier.code 0} true;
  $i148 := $sext.bv16.bv32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 827, 5} true;
  assume {:verifier.code 0} true;
  $i149 := $add.bv32($i148, $i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 827, 5} true;
  assume {:verifier.code 0} true;
  $i150 := $trunc.bv32.bv16($i149);
  call {:cexpr "c"} boogie_si_record_bv16($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 828, 7} true;
  assume {:verifier.code 0} true;
  $i151 := $sext.bv16.bv32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 828, 9} true;
  assume {:verifier.code 0} true;
  $i152 := $slt.bv32($i151, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 828, 7} true;
  assume {:verifier.code 0} true;
  $i153 := $i150;
  assume {:branchcond $i152} true;
  goto $bb46, $bb47;
$bb40:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 15} true;
  assume {:verifier.code 0} true;
  assume ($i126 == 1bv1);
  goto $bb41;
$bb41:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 819, 9} true;
  assume {:verifier.code 0} true;
  $i130 := $sext.bv16.bv32($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 819, 9} true;
  assume {:verifier.code 0} true;
  $i131 := $add.bv32($i130, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 819, 9} true;
  assume {:verifier.code 0} true;
  $i132 := $trunc.bv32.bv16($i131);
  call {:cexpr "c"} boogie_si_record_bv16($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 820, 5} true;
  assume {:verifier.code 0} true;
  $i129 := $i132;
  goto $bb45;
$bb42:
  assume !(($i126 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 18} true;
  assume {:verifier.code 0} true;
  $i127 := $sext.bv16.bv32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 20} true;
  assume {:verifier.code 0} true;
  $i128 := $sgt.bv32($i127, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 9} true;
  assume {:verifier.code 0} true;
  $i129 := $i121;
  assume {:branchcond $i128} true;
  goto $bb43, $bb44;
$bb43:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 9} true;
  assume {:verifier.code 0} true;
  assume ($i128 == 1bv1);
  goto $bb41;
$bb44:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i128 == 1bv1));
  goto $bb45;
$bb45:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 821, 3} true;
  assume {:verifier.code 0} true;
  $i124 := $i129;
  goto $bb39;
$bb46:
  assume ($i152 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 9} true;
  assume {:verifier.code 0} true;
  $i154 := $sext.bv16.bv32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 11} true;
  assume {:verifier.code 0} true;
  $i155 := $slt.bv32($i154, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i155} true;
  goto $bb49, $bb51;
$bb47:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 828, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i152 == 1bv1));
  goto $bb48;
$bb48:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 833, 7} true;
  assume {:verifier.code 0} true;
  $i162 := $sext.bv16.bv32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 833, 9} true;
  assume {:verifier.code 0} true;
  $i163 := $srem.bv32($i162, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 833, 7} true;
  assume {:verifier.code 0} true;
  $i164 := $trunc.bv32.bv16($i163);
  call {:cexpr "a"} boogie_si_record_bv16($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 834, 8} true;
  assume {:verifier.code 0} true;
  $i165 := $sext.bv16.bv32($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 834, 5} true;
  assume {:verifier.code 0} true;
  $i166 := $sext.bv16.bv32($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 834, 5} true;
  assume {:verifier.code 0} true;
  $i167 := $add.bv32($i166, $i165);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 834, 5} true;
  assume {:verifier.code 0} true;
  $i168 := $trunc.bv32.bv16($i167);
  call {:cexpr "a"} boogie_si_record_bv16($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 835, 7} true;
  assume {:verifier.code 0} true;
  $i169 := $sext.bv16.bv32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 835, 9} true;
  assume {:verifier.code 0} true;
  $i170 := $srem.bv32($i169, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 835, 7} true;
  assume {:verifier.code 0} true;
  $i171 := $trunc.bv32.bv16($i170);
  call {:cexpr "b"} boogie_si_record_bv16($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 836, 8} true;
  assume {:verifier.code 0} true;
  $i172 := $sext.bv16.bv32($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 836, 5} true;
  assume {:verifier.code 0} true;
  $i173 := $sext.bv16.bv32($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 836, 5} true;
  assume {:verifier.code 0} true;
  $i174 := $add.bv32($i173, $i172);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 836, 5} true;
  assume {:verifier.code 0} true;
  $i175 := $trunc.bv32.bv16($i174);
  call {:cexpr "b"} boogie_si_record_bv16($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 838, 8} true;
  assume {:verifier.code 0} true;
  $i176 := $sext.bv16.bv32($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 838, 5} true;
  assume {:verifier.code 0} true;
  $i177 := $sext.bv16.bv32($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 838, 5} true;
  assume {:verifier.code 0} true;
  $i178 := $add.bv32($i177, $i176);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 838, 5} true;
  assume {:verifier.code 0} true;
  $i179 := $trunc.bv32.bv16($i178);
  call {:cexpr "c"} boogie_si_record_bv16($i179);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 839, 7} true;
  assume {:verifier.code 0} true;
  $i180 := $sext.bv16.bv32($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 839, 9} true;
  assume {:verifier.code 0} true;
  $i181 := $slt.bv32($i180, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 839, 7} true;
  assume {:verifier.code 0} true;
  $i182 := $i179;
  assume {:branchcond $i181} true;
  goto $bb55, $bb56;
$bb49:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 15} true;
  assume {:verifier.code 0} true;
  assume ($i155 == 1bv1);
  goto $bb50;
$bb50:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 830, 9} true;
  assume {:verifier.code 0} true;
  $i159 := $sext.bv16.bv32($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 830, 9} true;
  assume {:verifier.code 0} true;
  $i160 := $add.bv32($i159, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 830, 9} true;
  assume {:verifier.code 0} true;
  $i161 := $trunc.bv32.bv16($i160);
  call {:cexpr "c"} boogie_si_record_bv16($i161);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 831, 5} true;
  assume {:verifier.code 0} true;
  $i158 := $i161;
  goto $bb54;
$bb51:
  assume !(($i155 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 18} true;
  assume {:verifier.code 0} true;
  $i156 := $sext.bv16.bv32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 20} true;
  assume {:verifier.code 0} true;
  $i157 := $sgt.bv32($i156, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 9} true;
  assume {:verifier.code 0} true;
  $i158 := $i150;
  assume {:branchcond $i157} true;
  goto $bb52, $bb53;
$bb52:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 9} true;
  assume {:verifier.code 0} true;
  assume ($i157 == 1bv1);
  goto $bb50;
$bb53:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i157 == 1bv1));
  goto $bb54;
$bb54:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 832, 3} true;
  assume {:verifier.code 0} true;
  $i153 := $i158;
  goto $bb48;
$bb55:
  assume ($i181 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 9} true;
  assume {:verifier.code 0} true;
  $i183 := $sext.bv16.bv32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 11} true;
  assume {:verifier.code 0} true;
  $i184 := $slt.bv32($i183, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i184} true;
  goto $bb58, $bb60;
$bb56:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 839, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i181 == 1bv1));
  goto $bb57;
$bb57:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 844, 7} true;
  assume {:verifier.code 0} true;
  $i191 := $sext.bv16.bv32($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 844, 9} true;
  assume {:verifier.code 0} true;
  $i192 := $srem.bv32($i191, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 844, 7} true;
  assume {:verifier.code 0} true;
  $i193 := $trunc.bv32.bv16($i192);
  call {:cexpr "a"} boogie_si_record_bv16($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 845, 8} true;
  assume {:verifier.code 0} true;
  $i194 := $sext.bv16.bv32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 845, 5} true;
  assume {:verifier.code 0} true;
  $i195 := $sext.bv16.bv32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 845, 5} true;
  assume {:verifier.code 0} true;
  $i196 := $add.bv32($i195, $i194);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 845, 5} true;
  assume {:verifier.code 0} true;
  $i197 := $trunc.bv32.bv16($i196);
  call {:cexpr "a"} boogie_si_record_bv16($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 846, 7} true;
  assume {:verifier.code 0} true;
  $i198 := $sext.bv16.bv32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 846, 9} true;
  assume {:verifier.code 0} true;
  $i199 := $srem.bv32($i198, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 846, 7} true;
  assume {:verifier.code 0} true;
  $i200 := $trunc.bv32.bv16($i199);
  call {:cexpr "b"} boogie_si_record_bv16($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 847, 8} true;
  assume {:verifier.code 0} true;
  $i201 := $sext.bv16.bv32($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 847, 5} true;
  assume {:verifier.code 0} true;
  $i202 := $sext.bv16.bv32($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 847, 5} true;
  assume {:verifier.code 0} true;
  $i203 := $add.bv32($i202, $i201);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 847, 5} true;
  assume {:verifier.code 0} true;
  $i204 := $trunc.bv32.bv16($i203);
  call {:cexpr "b"} boogie_si_record_bv16($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 849, 8} true;
  assume {:verifier.code 0} true;
  $i205 := $sext.bv16.bv32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 849, 5} true;
  assume {:verifier.code 0} true;
  $i206 := $sext.bv16.bv32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 849, 5} true;
  assume {:verifier.code 0} true;
  $i207 := $add.bv32($i206, $i205);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 849, 5} true;
  assume {:verifier.code 0} true;
  $i208 := $trunc.bv32.bv16($i207);
  call {:cexpr "c"} boogie_si_record_bv16($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 850, 7} true;
  assume {:verifier.code 0} true;
  $i209 := $sext.bv16.bv32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 850, 9} true;
  assume {:verifier.code 0} true;
  $i210 := $slt.bv32($i209, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 850, 7} true;
  assume {:verifier.code 0} true;
  $i211 := $i208;
  assume {:branchcond $i210} true;
  goto $bb64, $bb65;
$bb58:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 15} true;
  assume {:verifier.code 0} true;
  assume ($i184 == 1bv1);
  goto $bb59;
$bb59:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 841, 9} true;
  assume {:verifier.code 0} true;
  $i188 := $sext.bv16.bv32($i179);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 841, 9} true;
  assume {:verifier.code 0} true;
  $i189 := $add.bv32($i188, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 841, 9} true;
  assume {:verifier.code 0} true;
  $i190 := $trunc.bv32.bv16($i189);
  call {:cexpr "c"} boogie_si_record_bv16($i190);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 842, 5} true;
  assume {:verifier.code 0} true;
  $i187 := $i190;
  goto $bb63;
$bb60:
  assume !(($i184 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 18} true;
  assume {:verifier.code 0} true;
  $i185 := $sext.bv16.bv32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 20} true;
  assume {:verifier.code 0} true;
  $i186 := $sgt.bv32($i185, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 9} true;
  assume {:verifier.code 0} true;
  $i187 := $i179;
  assume {:branchcond $i186} true;
  goto $bb61, $bb62;
$bb61:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 9} true;
  assume {:verifier.code 0} true;
  assume ($i186 == 1bv1);
  goto $bb59;
$bb62:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i186 == 1bv1));
  goto $bb63;
$bb63:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 843, 3} true;
  assume {:verifier.code 0} true;
  $i182 := $i187;
  goto $bb57;
$bb64:
  assume ($i210 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 9} true;
  assume {:verifier.code 0} true;
  $i212 := $sext.bv16.bv32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 11} true;
  assume {:verifier.code 0} true;
  $i213 := $slt.bv32($i212, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i213} true;
  goto $bb67, $bb69;
$bb65:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 850, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i210 == 1bv1));
  goto $bb66;
$bb66:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 855, 7} true;
  assume {:verifier.code 0} true;
  $i220 := $sext.bv16.bv32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 855, 9} true;
  assume {:verifier.code 0} true;
  $i221 := $srem.bv32($i220, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 855, 7} true;
  assume {:verifier.code 0} true;
  $i222 := $trunc.bv32.bv16($i221);
  call {:cexpr "a"} boogie_si_record_bv16($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 856, 8} true;
  assume {:verifier.code 0} true;
  $i223 := $sext.bv16.bv32($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 856, 5} true;
  assume {:verifier.code 0} true;
  $i224 := $sext.bv16.bv32($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 856, 5} true;
  assume {:verifier.code 0} true;
  $i225 := $add.bv32($i224, $i223);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 856, 5} true;
  assume {:verifier.code 0} true;
  $i226 := $trunc.bv32.bv16($i225);
  call {:cexpr "a"} boogie_si_record_bv16($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 857, 7} true;
  assume {:verifier.code 0} true;
  $i227 := $sext.bv16.bv32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 857, 9} true;
  assume {:verifier.code 0} true;
  $i228 := $srem.bv32($i227, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 857, 7} true;
  assume {:verifier.code 0} true;
  $i229 := $trunc.bv32.bv16($i228);
  call {:cexpr "b"} boogie_si_record_bv16($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 858, 8} true;
  assume {:verifier.code 0} true;
  $i230 := $sext.bv16.bv32($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 858, 5} true;
  assume {:verifier.code 0} true;
  $i231 := $sext.bv16.bv32($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 858, 5} true;
  assume {:verifier.code 0} true;
  $i232 := $add.bv32($i231, $i230);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 858, 5} true;
  assume {:verifier.code 0} true;
  $i233 := $trunc.bv32.bv16($i232);
  call {:cexpr "b"} boogie_si_record_bv16($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 860, 8} true;
  assume {:verifier.code 0} true;
  $i234 := $sext.bv16.bv32($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 860, 5} true;
  assume {:verifier.code 0} true;
  $i235 := $sext.bv16.bv32($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 860, 5} true;
  assume {:verifier.code 0} true;
  $i236 := $add.bv32($i235, $i234);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 860, 5} true;
  assume {:verifier.code 0} true;
  $i237 := $trunc.bv32.bv16($i236);
  call {:cexpr "c"} boogie_si_record_bv16($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 861, 7} true;
  assume {:verifier.code 0} true;
  $i238 := $sext.bv16.bv32($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 861, 9} true;
  assume {:verifier.code 0} true;
  $i239 := $slt.bv32($i238, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 861, 7} true;
  assume {:verifier.code 0} true;
  $i240 := $i237;
  assume {:branchcond $i239} true;
  goto $bb73, $bb74;
$bb67:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 15} true;
  assume {:verifier.code 0} true;
  assume ($i213 == 1bv1);
  goto $bb68;
$bb68:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 852, 9} true;
  assume {:verifier.code 0} true;
  $i217 := $sext.bv16.bv32($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 852, 9} true;
  assume {:verifier.code 0} true;
  $i218 := $add.bv32($i217, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 852, 9} true;
  assume {:verifier.code 0} true;
  $i219 := $trunc.bv32.bv16($i218);
  call {:cexpr "c"} boogie_si_record_bv16($i219);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 853, 5} true;
  assume {:verifier.code 0} true;
  $i216 := $i219;
  goto $bb72;
$bb69:
  assume !(($i213 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 18} true;
  assume {:verifier.code 0} true;
  $i214 := $sext.bv16.bv32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 20} true;
  assume {:verifier.code 0} true;
  $i215 := $sgt.bv32($i214, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 9} true;
  assume {:verifier.code 0} true;
  $i216 := $i208;
  assume {:branchcond $i215} true;
  goto $bb70, $bb71;
$bb70:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 9} true;
  assume {:verifier.code 0} true;
  assume ($i215 == 1bv1);
  goto $bb68;
$bb71:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i215 == 1bv1));
  goto $bb72;
$bb72:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 854, 3} true;
  assume {:verifier.code 0} true;
  $i211 := $i216;
  goto $bb66;
$bb73:
  assume ($i239 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 9} true;
  assume {:verifier.code 0} true;
  $i241 := $sext.bv16.bv32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 11} true;
  assume {:verifier.code 0} true;
  $i242 := $slt.bv32($i241, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i242} true;
  goto $bb76, $bb78;
$bb74:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 861, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i239 == 1bv1));
  goto $bb75;
$bb75:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 866, 7} true;
  assume {:verifier.code 0} true;
  $i249 := $sext.bv16.bv32($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 866, 9} true;
  assume {:verifier.code 0} true;
  $i250 := $srem.bv32($i249, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 866, 7} true;
  assume {:verifier.code 0} true;
  $i251 := $trunc.bv32.bv16($i250);
  call {:cexpr "a"} boogie_si_record_bv16($i251);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 867, 8} true;
  assume {:verifier.code 0} true;
  $i252 := $sext.bv16.bv32($i251);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 867, 5} true;
  assume {:verifier.code 0} true;
  $i253 := $sext.bv16.bv32($i251);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 867, 5} true;
  assume {:verifier.code 0} true;
  $i254 := $add.bv32($i253, $i252);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 867, 5} true;
  assume {:verifier.code 0} true;
  $i255 := $trunc.bv32.bv16($i254);
  call {:cexpr "a"} boogie_si_record_bv16($i255);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 868, 7} true;
  assume {:verifier.code 0} true;
  $i256 := $sext.bv16.bv32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 868, 9} true;
  assume {:verifier.code 0} true;
  $i257 := $srem.bv32($i256, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 868, 7} true;
  assume {:verifier.code 0} true;
  $i258 := $trunc.bv32.bv16($i257);
  call {:cexpr "b"} boogie_si_record_bv16($i258);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 869, 8} true;
  assume {:verifier.code 0} true;
  $i259 := $sext.bv16.bv32($i258);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 869, 5} true;
  assume {:verifier.code 0} true;
  $i260 := $sext.bv16.bv32($i258);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 869, 5} true;
  assume {:verifier.code 0} true;
  $i261 := $add.bv32($i260, $i259);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 869, 5} true;
  assume {:verifier.code 0} true;
  $i262 := $trunc.bv32.bv16($i261);
  call {:cexpr "b"} boogie_si_record_bv16($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 871, 8} true;
  assume {:verifier.code 0} true;
  $i263 := $sext.bv16.bv32($i240);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 871, 5} true;
  assume {:verifier.code 0} true;
  $i264 := $sext.bv16.bv32($i240);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 871, 5} true;
  assume {:verifier.code 0} true;
  $i265 := $add.bv32($i264, $i263);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 871, 5} true;
  assume {:verifier.code 0} true;
  $i266 := $trunc.bv32.bv16($i265);
  call {:cexpr "c"} boogie_si_record_bv16($i266);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 872, 7} true;
  assume {:verifier.code 0} true;
  $i267 := $sext.bv16.bv32($i255);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 872, 9} true;
  assume {:verifier.code 0} true;
  $i268 := $slt.bv32($i267, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 872, 7} true;
  assume {:verifier.code 0} true;
  $i269 := $i266;
  assume {:branchcond $i268} true;
  goto $bb82, $bb83;
$bb76:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 15} true;
  assume {:verifier.code 0} true;
  assume ($i242 == 1bv1);
  goto $bb77;
$bb77:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 863, 9} true;
  assume {:verifier.code 0} true;
  $i246 := $sext.bv16.bv32($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 863, 9} true;
  assume {:verifier.code 0} true;
  $i247 := $add.bv32($i246, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 863, 9} true;
  assume {:verifier.code 0} true;
  $i248 := $trunc.bv32.bv16($i247);
  call {:cexpr "c"} boogie_si_record_bv16($i248);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 864, 5} true;
  assume {:verifier.code 0} true;
  $i245 := $i248;
  goto $bb81;
$bb78:
  assume !(($i242 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 18} true;
  assume {:verifier.code 0} true;
  $i243 := $sext.bv16.bv32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 20} true;
  assume {:verifier.code 0} true;
  $i244 := $sgt.bv32($i243, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 9} true;
  assume {:verifier.code 0} true;
  $i245 := $i237;
  assume {:branchcond $i244} true;
  goto $bb79, $bb80;
$bb79:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 9} true;
  assume {:verifier.code 0} true;
  assume ($i244 == 1bv1);
  goto $bb77;
$bb80:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i244 == 1bv1));
  goto $bb81;
$bb81:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 865, 3} true;
  assume {:verifier.code 0} true;
  $i240 := $i245;
  goto $bb75;
$bb82:
  assume ($i268 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 9} true;
  assume {:verifier.code 0} true;
  $i270 := $sext.bv16.bv32($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 11} true;
  assume {:verifier.code 0} true;
  $i271 := $slt.bv32($i270, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i271} true;
  goto $bb85, $bb87;
$bb83:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 872, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i268 == 1bv1));
  goto $bb84;
$bb84:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 877, 7} true;
  assume {:verifier.code 0} true;
  $i278 := $sext.bv16.bv32($i255);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 877, 9} true;
  assume {:verifier.code 0} true;
  $i279 := $srem.bv32($i278, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 877, 7} true;
  assume {:verifier.code 0} true;
  $i280 := $trunc.bv32.bv16($i279);
  call {:cexpr "a"} boogie_si_record_bv16($i280);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 878, 8} true;
  assume {:verifier.code 0} true;
  $i281 := $sext.bv16.bv32($i280);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 878, 5} true;
  assume {:verifier.code 0} true;
  $i282 := $sext.bv16.bv32($i280);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 878, 5} true;
  assume {:verifier.code 0} true;
  $i283 := $add.bv32($i282, $i281);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 878, 5} true;
  assume {:verifier.code 0} true;
  $i284 := $trunc.bv32.bv16($i283);
  call {:cexpr "a"} boogie_si_record_bv16($i284);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 879, 7} true;
  assume {:verifier.code 0} true;
  $i285 := $sext.bv16.bv32($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 879, 9} true;
  assume {:verifier.code 0} true;
  $i286 := $srem.bv32($i285, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 879, 7} true;
  assume {:verifier.code 0} true;
  $i287 := $trunc.bv32.bv16($i286);
  call {:cexpr "b"} boogie_si_record_bv16($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 880, 8} true;
  assume {:verifier.code 0} true;
  $i288 := $sext.bv16.bv32($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 880, 5} true;
  assume {:verifier.code 0} true;
  $i289 := $sext.bv16.bv32($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 880, 5} true;
  assume {:verifier.code 0} true;
  $i290 := $add.bv32($i289, $i288);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 880, 5} true;
  assume {:verifier.code 0} true;
  $i291 := $trunc.bv32.bv16($i290);
  call {:cexpr "b"} boogie_si_record_bv16($i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 882, 8} true;
  assume {:verifier.code 0} true;
  $i292 := $sext.bv16.bv32($i269);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 882, 5} true;
  assume {:verifier.code 0} true;
  $i293 := $sext.bv16.bv32($i269);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 882, 5} true;
  assume {:verifier.code 0} true;
  $i294 := $add.bv32($i293, $i292);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 882, 5} true;
  assume {:verifier.code 0} true;
  $i295 := $trunc.bv32.bv16($i294);
  call {:cexpr "c"} boogie_si_record_bv16($i295);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 883, 7} true;
  assume {:verifier.code 0} true;
  $i296 := $sext.bv16.bv32($i284);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 883, 9} true;
  assume {:verifier.code 0} true;
  $i297 := $slt.bv32($i296, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 883, 7} true;
  assume {:verifier.code 0} true;
  $i298 := $i295;
  assume {:branchcond $i297} true;
  goto $bb91, $bb92;
$bb85:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 15} true;
  assume {:verifier.code 0} true;
  assume ($i271 == 1bv1);
  goto $bb86;
$bb86:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 874, 9} true;
  assume {:verifier.code 0} true;
  $i275 := $sext.bv16.bv32($i266);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 874, 9} true;
  assume {:verifier.code 0} true;
  $i276 := $add.bv32($i275, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 874, 9} true;
  assume {:verifier.code 0} true;
  $i277 := $trunc.bv32.bv16($i276);
  call {:cexpr "c"} boogie_si_record_bv16($i277);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 875, 5} true;
  assume {:verifier.code 0} true;
  $i274 := $i277;
  goto $bb90;
$bb87:
  assume !(($i271 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 18} true;
  assume {:verifier.code 0} true;
  $i272 := $sext.bv16.bv32($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 20} true;
  assume {:verifier.code 0} true;
  $i273 := $sgt.bv32($i272, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 9} true;
  assume {:verifier.code 0} true;
  $i274 := $i266;
  assume {:branchcond $i273} true;
  goto $bb88, $bb89;
$bb88:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 9} true;
  assume {:verifier.code 0} true;
  assume ($i273 == 1bv1);
  goto $bb86;
$bb89:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i273 == 1bv1));
  goto $bb90;
$bb90:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 876, 3} true;
  assume {:verifier.code 0} true;
  $i269 := $i274;
  goto $bb84;
$bb91:
  assume ($i297 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 9} true;
  assume {:verifier.code 0} true;
  $i299 := $sext.bv16.bv32($i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 11} true;
  assume {:verifier.code 0} true;
  $i300 := $slt.bv32($i299, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i300} true;
  goto $bb94, $bb96;
$bb92:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 883, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i297 == 1bv1));
  goto $bb93;
$bb93:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 888, 7} true;
  assume {:verifier.code 0} true;
  $i307 := $sext.bv16.bv32($i284);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 888, 9} true;
  assume {:verifier.code 0} true;
  $i308 := $srem.bv32($i307, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 888, 7} true;
  assume {:verifier.code 0} true;
  $i309 := $trunc.bv32.bv16($i308);
  call {:cexpr "a"} boogie_si_record_bv16($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 889, 8} true;
  assume {:verifier.code 0} true;
  $i310 := $sext.bv16.bv32($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 889, 5} true;
  assume {:verifier.code 0} true;
  $i311 := $sext.bv16.bv32($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 889, 5} true;
  assume {:verifier.code 0} true;
  $i312 := $add.bv32($i311, $i310);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 889, 5} true;
  assume {:verifier.code 0} true;
  $i313 := $trunc.bv32.bv16($i312);
  call {:cexpr "a"} boogie_si_record_bv16($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 890, 7} true;
  assume {:verifier.code 0} true;
  $i314 := $sext.bv16.bv32($i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 890, 9} true;
  assume {:verifier.code 0} true;
  $i315 := $srem.bv32($i314, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 890, 7} true;
  assume {:verifier.code 0} true;
  $i316 := $trunc.bv32.bv16($i315);
  call {:cexpr "b"} boogie_si_record_bv16($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 891, 8} true;
  assume {:verifier.code 0} true;
  $i317 := $sext.bv16.bv32($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 891, 5} true;
  assume {:verifier.code 0} true;
  $i318 := $sext.bv16.bv32($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 891, 5} true;
  assume {:verifier.code 0} true;
  $i319 := $add.bv32($i318, $i317);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 891, 5} true;
  assume {:verifier.code 0} true;
  $i320 := $trunc.bv32.bv16($i319);
  call {:cexpr "b"} boogie_si_record_bv16($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 893, 8} true;
  assume {:verifier.code 0} true;
  $i321 := $sext.bv16.bv32($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 893, 5} true;
  assume {:verifier.code 0} true;
  $i322 := $sext.bv16.bv32($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 893, 5} true;
  assume {:verifier.code 0} true;
  $i323 := $add.bv32($i322, $i321);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 893, 5} true;
  assume {:verifier.code 0} true;
  $i324 := $trunc.bv32.bv16($i323);
  call {:cexpr "c"} boogie_si_record_bv16($i324);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 894, 7} true;
  assume {:verifier.code 0} true;
  $i325 := $sext.bv16.bv32($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 894, 9} true;
  assume {:verifier.code 0} true;
  $i326 := $slt.bv32($i325, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 894, 7} true;
  assume {:verifier.code 0} true;
  $i327 := $i324;
  assume {:branchcond $i326} true;
  goto $bb100, $bb101;
$bb94:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 15} true;
  assume {:verifier.code 0} true;
  assume ($i300 == 1bv1);
  goto $bb95;
$bb95:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 885, 9} true;
  assume {:verifier.code 0} true;
  $i304 := $sext.bv16.bv32($i295);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 885, 9} true;
  assume {:verifier.code 0} true;
  $i305 := $add.bv32($i304, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 885, 9} true;
  assume {:verifier.code 0} true;
  $i306 := $trunc.bv32.bv16($i305);
  call {:cexpr "c"} boogie_si_record_bv16($i306);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 886, 5} true;
  assume {:verifier.code 0} true;
  $i303 := $i306;
  goto $bb99;
$bb96:
  assume !(($i300 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 18} true;
  assume {:verifier.code 0} true;
  $i301 := $sext.bv16.bv32($i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 20} true;
  assume {:verifier.code 0} true;
  $i302 := $sgt.bv32($i301, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 9} true;
  assume {:verifier.code 0} true;
  $i303 := $i295;
  assume {:branchcond $i302} true;
  goto $bb97, $bb98;
$bb97:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 9} true;
  assume {:verifier.code 0} true;
  assume ($i302 == 1bv1);
  goto $bb95;
$bb98:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i302 == 1bv1));
  goto $bb99;
$bb99:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 887, 3} true;
  assume {:verifier.code 0} true;
  $i298 := $i303;
  goto $bb93;
$bb100:
  assume ($i326 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 9} true;
  assume {:verifier.code 0} true;
  $i328 := $sext.bv16.bv32($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 11} true;
  assume {:verifier.code 0} true;
  $i329 := $slt.bv32($i328, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i329} true;
  goto $bb103, $bb105;
$bb101:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 894, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i326 == 1bv1));
  goto $bb102;
$bb102:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 899, 7} true;
  assume {:verifier.code 0} true;
  $i336 := $sext.bv16.bv32($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 899, 9} true;
  assume {:verifier.code 0} true;
  $i337 := $srem.bv32($i336, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 899, 7} true;
  assume {:verifier.code 0} true;
  $i338 := $trunc.bv32.bv16($i337);
  call {:cexpr "a"} boogie_si_record_bv16($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 900, 8} true;
  assume {:verifier.code 0} true;
  $i339 := $sext.bv16.bv32($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 900, 5} true;
  assume {:verifier.code 0} true;
  $i340 := $sext.bv16.bv32($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 900, 5} true;
  assume {:verifier.code 0} true;
  $i341 := $add.bv32($i340, $i339);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 900, 5} true;
  assume {:verifier.code 0} true;
  $i342 := $trunc.bv32.bv16($i341);
  call {:cexpr "a"} boogie_si_record_bv16($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 901, 7} true;
  assume {:verifier.code 0} true;
  $i343 := $sext.bv16.bv32($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 901, 9} true;
  assume {:verifier.code 0} true;
  $i344 := $srem.bv32($i343, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 901, 7} true;
  assume {:verifier.code 0} true;
  $i345 := $trunc.bv32.bv16($i344);
  call {:cexpr "b"} boogie_si_record_bv16($i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 902, 8} true;
  assume {:verifier.code 0} true;
  $i346 := $sext.bv16.bv32($i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 902, 5} true;
  assume {:verifier.code 0} true;
  $i347 := $sext.bv16.bv32($i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 902, 5} true;
  assume {:verifier.code 0} true;
  $i348 := $add.bv32($i347, $i346);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 902, 5} true;
  assume {:verifier.code 0} true;
  $i349 := $trunc.bv32.bv16($i348);
  call {:cexpr "b"} boogie_si_record_bv16($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 904, 8} true;
  assume {:verifier.code 0} true;
  $i350 := $sext.bv16.bv32($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 904, 5} true;
  assume {:verifier.code 0} true;
  $i351 := $sext.bv16.bv32($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 904, 5} true;
  assume {:verifier.code 0} true;
  $i352 := $add.bv32($i351, $i350);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 904, 5} true;
  assume {:verifier.code 0} true;
  $i353 := $trunc.bv32.bv16($i352);
  call {:cexpr "c"} boogie_si_record_bv16($i353);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 905, 7} true;
  assume {:verifier.code 0} true;
  $i354 := $sext.bv16.bv32($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 905, 9} true;
  assume {:verifier.code 0} true;
  $i355 := $slt.bv32($i354, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 905, 7} true;
  assume {:verifier.code 0} true;
  $i356 := $i353;
  assume {:branchcond $i355} true;
  goto $bb109, $bb110;
$bb103:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 15} true;
  assume {:verifier.code 0} true;
  assume ($i329 == 1bv1);
  goto $bb104;
$bb104:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 896, 9} true;
  assume {:verifier.code 0} true;
  $i333 := $sext.bv16.bv32($i324);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 896, 9} true;
  assume {:verifier.code 0} true;
  $i334 := $add.bv32($i333, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 896, 9} true;
  assume {:verifier.code 0} true;
  $i335 := $trunc.bv32.bv16($i334);
  call {:cexpr "c"} boogie_si_record_bv16($i335);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 897, 5} true;
  assume {:verifier.code 0} true;
  $i332 := $i335;
  goto $bb108;
$bb105:
  assume !(($i329 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 18} true;
  assume {:verifier.code 0} true;
  $i330 := $sext.bv16.bv32($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 20} true;
  assume {:verifier.code 0} true;
  $i331 := $sgt.bv32($i330, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 9} true;
  assume {:verifier.code 0} true;
  $i332 := $i324;
  assume {:branchcond $i331} true;
  goto $bb106, $bb107;
$bb106:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 9} true;
  assume {:verifier.code 0} true;
  assume ($i331 == 1bv1);
  goto $bb104;
$bb107:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i331 == 1bv1));
  goto $bb108;
$bb108:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 898, 3} true;
  assume {:verifier.code 0} true;
  $i327 := $i332;
  goto $bb102;
$bb109:
  assume ($i355 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 9} true;
  assume {:verifier.code 0} true;
  $i357 := $sext.bv16.bv32($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 11} true;
  assume {:verifier.code 0} true;
  $i358 := $slt.bv32($i357, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i358} true;
  goto $bb112, $bb114;
$bb110:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 905, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i355 == 1bv1));
  goto $bb111;
$bb111:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 910, 7} true;
  assume {:verifier.code 0} true;
  $i365 := $sext.bv16.bv32($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 910, 9} true;
  assume {:verifier.code 0} true;
  $i366 := $srem.bv32($i365, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 910, 7} true;
  assume {:verifier.code 0} true;
  $i367 := $trunc.bv32.bv16($i366);
  call {:cexpr "a"} boogie_si_record_bv16($i367);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 911, 8} true;
  assume {:verifier.code 0} true;
  $i368 := $sext.bv16.bv32($i367);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 911, 5} true;
  assume {:verifier.code 0} true;
  $i369 := $sext.bv16.bv32($i367);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 911, 5} true;
  assume {:verifier.code 0} true;
  $i370 := $add.bv32($i369, $i368);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 911, 5} true;
  assume {:verifier.code 0} true;
  $i371 := $trunc.bv32.bv16($i370);
  call {:cexpr "a"} boogie_si_record_bv16($i371);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 912, 7} true;
  assume {:verifier.code 0} true;
  $i372 := $sext.bv16.bv32($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 912, 9} true;
  assume {:verifier.code 0} true;
  $i373 := $srem.bv32($i372, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 912, 7} true;
  assume {:verifier.code 0} true;
  $i374 := $trunc.bv32.bv16($i373);
  call {:cexpr "b"} boogie_si_record_bv16($i374);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 913, 8} true;
  assume {:verifier.code 0} true;
  $i375 := $sext.bv16.bv32($i374);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 913, 5} true;
  assume {:verifier.code 0} true;
  $i376 := $sext.bv16.bv32($i374);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 913, 5} true;
  assume {:verifier.code 0} true;
  $i377 := $add.bv32($i376, $i375);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 913, 5} true;
  assume {:verifier.code 0} true;
  $i378 := $trunc.bv32.bv16($i377);
  call {:cexpr "b"} boogie_si_record_bv16($i378);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 915, 8} true;
  assume {:verifier.code 0} true;
  $i379 := $sext.bv16.bv32($i356);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 915, 5} true;
  assume {:verifier.code 0} true;
  $i380 := $sext.bv16.bv32($i356);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 915, 5} true;
  assume {:verifier.code 0} true;
  $i381 := $add.bv32($i380, $i379);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 915, 5} true;
  assume {:verifier.code 0} true;
  $i382 := $trunc.bv32.bv16($i381);
  call {:cexpr "c"} boogie_si_record_bv16($i382);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 916, 7} true;
  assume {:verifier.code 0} true;
  $i383 := $sext.bv16.bv32($i371);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 916, 9} true;
  assume {:verifier.code 0} true;
  $i384 := $slt.bv32($i383, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 916, 7} true;
  assume {:verifier.code 0} true;
  $i385 := $i382;
  assume {:branchcond $i384} true;
  goto $bb118, $bb119;
$bb112:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 15} true;
  assume {:verifier.code 0} true;
  assume ($i358 == 1bv1);
  goto $bb113;
$bb113:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 907, 9} true;
  assume {:verifier.code 0} true;
  $i362 := $sext.bv16.bv32($i353);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 907, 9} true;
  assume {:verifier.code 0} true;
  $i363 := $add.bv32($i362, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 907, 9} true;
  assume {:verifier.code 0} true;
  $i364 := $trunc.bv32.bv16($i363);
  call {:cexpr "c"} boogie_si_record_bv16($i364);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 908, 5} true;
  assume {:verifier.code 0} true;
  $i361 := $i364;
  goto $bb117;
$bb114:
  assume !(($i358 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 18} true;
  assume {:verifier.code 0} true;
  $i359 := $sext.bv16.bv32($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 20} true;
  assume {:verifier.code 0} true;
  $i360 := $sgt.bv32($i359, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 9} true;
  assume {:verifier.code 0} true;
  $i361 := $i353;
  assume {:branchcond $i360} true;
  goto $bb115, $bb116;
$bb115:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 9} true;
  assume {:verifier.code 0} true;
  assume ($i360 == 1bv1);
  goto $bb113;
$bb116:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i360 == 1bv1));
  goto $bb117;
$bb117:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 909, 3} true;
  assume {:verifier.code 0} true;
  $i356 := $i361;
  goto $bb111;
$bb118:
  assume ($i384 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 9} true;
  assume {:verifier.code 0} true;
  $i386 := $sext.bv16.bv32($i378);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 11} true;
  assume {:verifier.code 0} true;
  $i387 := $slt.bv32($i386, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i387} true;
  goto $bb121, $bb123;
$bb119:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 916, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i384 == 1bv1));
  goto $bb120;
$bb120:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 921, 7} true;
  assume {:verifier.code 0} true;
  $i394 := $sext.bv16.bv32($i371);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 921, 9} true;
  assume {:verifier.code 0} true;
  $i395 := $srem.bv32($i394, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 921, 7} true;
  assume {:verifier.code 0} true;
  $i396 := $trunc.bv32.bv16($i395);
  call {:cexpr "a"} boogie_si_record_bv16($i396);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 922, 8} true;
  assume {:verifier.code 0} true;
  $i397 := $sext.bv16.bv32($i396);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 922, 5} true;
  assume {:verifier.code 0} true;
  $i398 := $sext.bv16.bv32($i396);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 922, 5} true;
  assume {:verifier.code 0} true;
  $i399 := $add.bv32($i398, $i397);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 922, 5} true;
  assume {:verifier.code 0} true;
  $i400 := $trunc.bv32.bv16($i399);
  call {:cexpr "a"} boogie_si_record_bv16($i400);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 923, 7} true;
  assume {:verifier.code 0} true;
  $i401 := $sext.bv16.bv32($i378);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 923, 9} true;
  assume {:verifier.code 0} true;
  $i402 := $srem.bv32($i401, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 923, 7} true;
  assume {:verifier.code 0} true;
  $i403 := $trunc.bv32.bv16($i402);
  call {:cexpr "b"} boogie_si_record_bv16($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 924, 8} true;
  assume {:verifier.code 0} true;
  $i404 := $sext.bv16.bv32($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 924, 5} true;
  assume {:verifier.code 0} true;
  $i405 := $sext.bv16.bv32($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 924, 5} true;
  assume {:verifier.code 0} true;
  $i406 := $add.bv32($i405, $i404);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 924, 5} true;
  assume {:verifier.code 0} true;
  $i407 := $trunc.bv32.bv16($i406);
  call {:cexpr "b"} boogie_si_record_bv16($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 926, 8} true;
  assume {:verifier.code 0} true;
  $i408 := $sext.bv16.bv32($i385);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 926, 5} true;
  assume {:verifier.code 0} true;
  $i409 := $sext.bv16.bv32($i385);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 926, 5} true;
  assume {:verifier.code 0} true;
  $i410 := $add.bv32($i409, $i408);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 926, 5} true;
  assume {:verifier.code 0} true;
  $i411 := $trunc.bv32.bv16($i410);
  call {:cexpr "c"} boogie_si_record_bv16($i411);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 927, 7} true;
  assume {:verifier.code 0} true;
  $i412 := $sext.bv16.bv32($i400);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 927, 9} true;
  assume {:verifier.code 0} true;
  $i413 := $slt.bv32($i412, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 927, 7} true;
  assume {:verifier.code 0} true;
  $i414 := $i411;
  assume {:branchcond $i413} true;
  goto $bb127, $bb128;
$bb121:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 15} true;
  assume {:verifier.code 0} true;
  assume ($i387 == 1bv1);
  goto $bb122;
$bb122:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 918, 9} true;
  assume {:verifier.code 0} true;
  $i391 := $sext.bv16.bv32($i382);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 918, 9} true;
  assume {:verifier.code 0} true;
  $i392 := $add.bv32($i391, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 918, 9} true;
  assume {:verifier.code 0} true;
  $i393 := $trunc.bv32.bv16($i392);
  call {:cexpr "c"} boogie_si_record_bv16($i393);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 919, 5} true;
  assume {:verifier.code 0} true;
  $i390 := $i393;
  goto $bb126;
$bb123:
  assume !(($i387 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 18} true;
  assume {:verifier.code 0} true;
  $i388 := $sext.bv16.bv32($i378);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 20} true;
  assume {:verifier.code 0} true;
  $i389 := $sgt.bv32($i388, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 9} true;
  assume {:verifier.code 0} true;
  $i390 := $i382;
  assume {:branchcond $i389} true;
  goto $bb124, $bb125;
$bb124:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 9} true;
  assume {:verifier.code 0} true;
  assume ($i389 == 1bv1);
  goto $bb122;
$bb125:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i389 == 1bv1));
  goto $bb126;
$bb126:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 920, 3} true;
  assume {:verifier.code 0} true;
  $i385 := $i390;
  goto $bb120;
$bb127:
  assume ($i413 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 9} true;
  assume {:verifier.code 0} true;
  $i415 := $sext.bv16.bv32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 11} true;
  assume {:verifier.code 0} true;
  $i416 := $slt.bv32($i415, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i416} true;
  goto $bb130, $bb132;
$bb128:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 927, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i413 == 1bv1));
  goto $bb129;
$bb129:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 932, 7} true;
  assume {:verifier.code 0} true;
  $i423 := $sext.bv16.bv32($i400);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 932, 9} true;
  assume {:verifier.code 0} true;
  $i424 := $srem.bv32($i423, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 932, 7} true;
  assume {:verifier.code 0} true;
  $i425 := $trunc.bv32.bv16($i424);
  call {:cexpr "a"} boogie_si_record_bv16($i425);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 933, 8} true;
  assume {:verifier.code 0} true;
  $i426 := $sext.bv16.bv32($i425);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 933, 5} true;
  assume {:verifier.code 0} true;
  $i427 := $sext.bv16.bv32($i425);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 933, 5} true;
  assume {:verifier.code 0} true;
  $i428 := $add.bv32($i427, $i426);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 933, 5} true;
  assume {:verifier.code 0} true;
  $i429 := $trunc.bv32.bv16($i428);
  call {:cexpr "a"} boogie_si_record_bv16($i429);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 934, 7} true;
  assume {:verifier.code 0} true;
  $i430 := $sext.bv16.bv32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 934, 9} true;
  assume {:verifier.code 0} true;
  $i431 := $srem.bv32($i430, 32768bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 934, 7} true;
  assume {:verifier.code 0} true;
  $i432 := $trunc.bv32.bv16($i431);
  call {:cexpr "b"} boogie_si_record_bv16($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 935, 8} true;
  assume {:verifier.code 0} true;
  $i433 := $sext.bv16.bv32($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 935, 5} true;
  assume {:verifier.code 0} true;
  $i434 := $sext.bv16.bv32($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 935, 5} true;
  assume {:verifier.code 0} true;
  $i435 := $add.bv32($i434, $i433);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 935, 5} true;
  assume {:verifier.code 0} true;
  $i436 := $trunc.bv32.bv16($i435);
  call {:cexpr "b"} boogie_si_record_bv16($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 937, 8} true;
  assume {:verifier.code 0} true;
  $i437 := $sext.bv16.bv32($i414);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 937, 5} true;
  assume {:verifier.code 0} true;
  $i438 := $sext.bv16.bv32($i414);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 937, 5} true;
  assume {:verifier.code 0} true;
  $i439 := $add.bv32($i438, $i437);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 937, 5} true;
  assume {:verifier.code 0} true;
  $i440 := $trunc.bv32.bv16($i439);
  call {:cexpr "c"} boogie_si_record_bv16($i440);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 938, 7} true;
  assume {:verifier.code 0} true;
  $i441 := $sext.bv16.bv32($i429);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 938, 9} true;
  assume {:verifier.code 0} true;
  $i442 := $slt.bv32($i441, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 938, 7} true;
  assume {:verifier.code 0} true;
  $i443 := $i440;
  assume {:branchcond $i442} true;
  goto $bb136, $bb137;
$bb130:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 15} true;
  assume {:verifier.code 0} true;
  assume ($i416 == 1bv1);
  goto $bb131;
$bb131:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 929, 9} true;
  assume {:verifier.code 0} true;
  $i420 := $sext.bv16.bv32($i411);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 929, 9} true;
  assume {:verifier.code 0} true;
  $i421 := $add.bv32($i420, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 929, 9} true;
  assume {:verifier.code 0} true;
  $i422 := $trunc.bv32.bv16($i421);
  call {:cexpr "c"} boogie_si_record_bv16($i422);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 930, 5} true;
  assume {:verifier.code 0} true;
  $i419 := $i422;
  goto $bb135;
$bb132:
  assume !(($i416 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 18} true;
  assume {:verifier.code 0} true;
  $i417 := $sext.bv16.bv32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 20} true;
  assume {:verifier.code 0} true;
  $i418 := $sgt.bv32($i417, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 9} true;
  assume {:verifier.code 0} true;
  $i419 := $i411;
  assume {:branchcond $i418} true;
  goto $bb133, $bb134;
$bb133:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 9} true;
  assume {:verifier.code 0} true;
  assume ($i418 == 1bv1);
  goto $bb131;
$bb134:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i418 == 1bv1));
  goto $bb135;
$bb135:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 931, 3} true;
  assume {:verifier.code 0} true;
  $i414 := $i419;
  goto $bb129;
$bb136:
  assume ($i442 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 9} true;
  assume {:verifier.code 0} true;
  $i444 := $sext.bv16.bv32($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 11} true;
  assume {:verifier.code 0} true;
  $i445 := $slt.bv32($i444, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i445} true;
  goto $bb139, $bb141;
$bb137:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 938, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i442 == 1bv1));
  goto $bb138;
$bb138:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 948, 3} true;
  assume {:verifier.code 0} true;
  $r := $i443;
  $exn := false;
  return;
$bb139:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 15} true;
  assume {:verifier.code 0} true;
  assume ($i445 == 1bv1);
  goto $bb140;
$bb140:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 940, 9} true;
  assume {:verifier.code 0} true;
  $i449 := $sext.bv16.bv32($i440);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 940, 9} true;
  assume {:verifier.code 0} true;
  $i450 := $add.bv32($i449, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 940, 9} true;
  assume {:verifier.code 0} true;
  $i451 := $trunc.bv32.bv16($i450);
  call {:cexpr "c"} boogie_si_record_bv16($i451);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 941, 5} true;
  assume {:verifier.code 0} true;
  $i448 := $i451;
  goto $bb144;
$bb141:
  assume !(($i445 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 18} true;
  assume {:verifier.code 0} true;
  $i446 := $sext.bv16.bv32($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 20} true;
  assume {:verifier.code 0} true;
  $i447 := $sgt.bv32($i446, 32767bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 9} true;
  assume {:verifier.code 0} true;
  $i448 := $i440;
  assume {:branchcond $i447} true;
  goto $bb142, $bb143;
$bb142:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 9} true;
  assume {:verifier.code 0} true;
  assume ($i447 == 1bv1);
  goto $bb140;
$bb143:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i447 == 1bv1));
  goto $bb144;
$bb144:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 942, 3} true;
  assume {:verifier.code 0} true;
  $i443 := $i448;
  goto $bb138;
}
const __SMACK_and8: ref;
axiom (__SMACK_and8 == $sub.ref(0, 12384));
procedure  __SMACK_and8($i0: bv8, $i1: bv8)
  returns ($r: bv8)
{
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv8;
  var $i6: bv32;
  var $i7: bv1;
  var $i9: bv32;
  var $i10: bv1;
  var $i11: bv32;
  var $i12: bv1;
  var $i14: bv32;
  var $i15: bv32;
  var $i16: bv8;
  var $i13: bv8;
  var $i8: bv8;
  var $i17: bv32;
  var $i18: bv32;
  var $i19: bv8;
  var $i20: bv32;
  var $i21: bv32;
  var $i22: bv32;
  var $i23: bv8;
  var $i24: bv32;
  var $i25: bv32;
  var $i26: bv8;
  var $i27: bv32;
  var $i28: bv32;
  var $i29: bv32;
  var $i30: bv8;
  var $i31: bv32;
  var $i32: bv32;
  var $i33: bv32;
  var $i34: bv8;
  var $i35: bv32;
  var $i36: bv1;
  var $i38: bv32;
  var $i39: bv1;
  var $i40: bv32;
  var $i41: bv1;
  var $i43: bv32;
  var $i44: bv32;
  var $i45: bv8;
  var $i42: bv8;
  var $i37: bv8;
  var $i46: bv32;
  var $i47: bv32;
  var $i48: bv8;
  var $i49: bv32;
  var $i50: bv32;
  var $i51: bv32;
  var $i52: bv8;
  var $i53: bv32;
  var $i54: bv32;
  var $i55: bv8;
  var $i56: bv32;
  var $i57: bv32;
  var $i58: bv32;
  var $i59: bv8;
  var $i60: bv32;
  var $i61: bv32;
  var $i62: bv32;
  var $i63: bv8;
  var $i64: bv32;
  var $i65: bv1;
  var $i67: bv32;
  var $i68: bv1;
  var $i69: bv32;
  var $i70: bv1;
  var $i72: bv32;
  var $i73: bv32;
  var $i74: bv8;
  var $i71: bv8;
  var $i66: bv8;
  var $i75: bv32;
  var $i76: bv32;
  var $i77: bv8;
  var $i78: bv32;
  var $i79: bv32;
  var $i80: bv32;
  var $i81: bv8;
  var $i82: bv32;
  var $i83: bv32;
  var $i84: bv8;
  var $i85: bv32;
  var $i86: bv32;
  var $i87: bv32;
  var $i88: bv8;
  var $i89: bv32;
  var $i90: bv32;
  var $i91: bv32;
  var $i92: bv8;
  var $i93: bv32;
  var $i94: bv1;
  var $i96: bv32;
  var $i97: bv1;
  var $i98: bv32;
  var $i99: bv1;
  var $i101: bv32;
  var $i102: bv32;
  var $i103: bv8;
  var $i100: bv8;
  var $i95: bv8;
  var $i104: bv32;
  var $i105: bv32;
  var $i106: bv8;
  var $i107: bv32;
  var $i108: bv32;
  var $i109: bv32;
  var $i110: bv8;
  var $i111: bv32;
  var $i112: bv32;
  var $i113: bv8;
  var $i114: bv32;
  var $i115: bv32;
  var $i116: bv32;
  var $i117: bv8;
  var $i118: bv32;
  var $i119: bv32;
  var $i120: bv32;
  var $i121: bv8;
  var $i122: bv32;
  var $i123: bv1;
  var $i125: bv32;
  var $i126: bv1;
  var $i127: bv32;
  var $i128: bv1;
  var $i130: bv32;
  var $i131: bv32;
  var $i132: bv8;
  var $i129: bv8;
  var $i124: bv8;
  var $i133: bv32;
  var $i134: bv32;
  var $i135: bv8;
  var $i136: bv32;
  var $i137: bv32;
  var $i138: bv32;
  var $i139: bv8;
  var $i140: bv32;
  var $i141: bv32;
  var $i142: bv8;
  var $i143: bv32;
  var $i144: bv32;
  var $i145: bv32;
  var $i146: bv8;
  var $i147: bv32;
  var $i148: bv32;
  var $i149: bv32;
  var $i150: bv8;
  var $i151: bv32;
  var $i152: bv1;
  var $i154: bv32;
  var $i155: bv1;
  var $i156: bv32;
  var $i157: bv1;
  var $i159: bv32;
  var $i160: bv32;
  var $i161: bv8;
  var $i158: bv8;
  var $i153: bv8;
  var $i162: bv32;
  var $i163: bv32;
  var $i164: bv8;
  var $i165: bv32;
  var $i166: bv32;
  var $i167: bv32;
  var $i168: bv8;
  var $i169: bv32;
  var $i170: bv32;
  var $i171: bv8;
  var $i172: bv32;
  var $i173: bv32;
  var $i174: bv32;
  var $i175: bv8;
  var $i176: bv32;
  var $i177: bv32;
  var $i178: bv32;
  var $i179: bv8;
  var $i180: bv32;
  var $i181: bv1;
  var $i183: bv32;
  var $i184: bv1;
  var $i185: bv32;
  var $i186: bv1;
  var $i188: bv32;
  var $i189: bv32;
  var $i190: bv8;
  var $i187: bv8;
  var $i182: bv8;
  var $i191: bv32;
  var $i192: bv32;
  var $i193: bv8;
  var $i194: bv32;
  var $i195: bv32;
  var $i196: bv32;
  var $i197: bv8;
  var $i198: bv32;
  var $i199: bv32;
  var $i200: bv8;
  var $i201: bv32;
  var $i202: bv32;
  var $i203: bv32;
  var $i204: bv8;
  var $i205: bv32;
  var $i206: bv32;
  var $i207: bv32;
  var $i208: bv8;
  var $i209: bv32;
  var $i210: bv1;
  var $i212: bv32;
  var $i213: bv1;
  var $i214: bv32;
  var $i215: bv1;
  var $i217: bv32;
  var $i218: bv32;
  var $i219: bv8;
  var $i216: bv8;
  var $i211: bv8;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 8} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__SMACK_and8:arg:a"} boogie_si_record_bv8($i0);
  call {:cexpr "__SMACK_and8:arg:b"} boogie_si_record_bv8($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 8} true;
  assume {:verifier.code 0} true;
  $i2 := $sext.bv8.bv32(0bv8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 5} true;
  assume {:verifier.code 0} true;
  $i3 := $sext.bv8.bv32(0bv8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 5} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv32($i3, $i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.bv32.bv8($i4);
  call {:cexpr "c"} boogie_si_record_bv8($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $sext.bv8.bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $slt.bv32($i6, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $i5;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 9} true;
  assume {:verifier.code 0} true;
  $i9 := $sext.bv8.bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $slt.bv32($i9, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb4, $bb6;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i7 == 1bv1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 960, 7} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.bv8.bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 960, 9} true;
  assume {:verifier.code 0} true;
  $i18 := $srem.bv32($i17, 128bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 960, 7} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.bv32.bv8($i18);
  call {:cexpr "a"} boogie_si_record_bv8($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 961, 8} true;
  assume {:verifier.code 0} true;
  $i20 := $sext.bv8.bv32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 961, 5} true;
  assume {:verifier.code 0} true;
  $i21 := $sext.bv8.bv32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 961, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $add.bv32($i21, $i20);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 961, 5} true;
  assume {:verifier.code 0} true;
  $i23 := $trunc.bv32.bv8($i22);
  call {:cexpr "a"} boogie_si_record_bv8($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 962, 7} true;
  assume {:verifier.code 0} true;
  $i24 := $sext.bv8.bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 962, 9} true;
  assume {:verifier.code 0} true;
  $i25 := $srem.bv32($i24, 128bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 962, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $trunc.bv32.bv8($i25);
  call {:cexpr "b"} boogie_si_record_bv8($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 963, 8} true;
  assume {:verifier.code 0} true;
  $i27 := $sext.bv8.bv32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 963, 5} true;
  assume {:verifier.code 0} true;
  $i28 := $sext.bv8.bv32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 963, 5} true;
  assume {:verifier.code 0} true;
  $i29 := $add.bv32($i28, $i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 963, 5} true;
  assume {:verifier.code 0} true;
  $i30 := $trunc.bv32.bv8($i29);
  call {:cexpr "b"} boogie_si_record_bv8($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 965, 8} true;
  assume {:verifier.code 0} true;
  $i31 := $sext.bv8.bv32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 965, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $sext.bv8.bv32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 965, 5} true;
  assume {:verifier.code 0} true;
  $i33 := $add.bv32($i32, $i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 965, 5} true;
  assume {:verifier.code 0} true;
  $i34 := $trunc.bv32.bv8($i33);
  call {:cexpr "c"} boogie_si_record_bv8($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 7} true;
  assume {:verifier.code 0} true;
  $i35 := $sext.bv8.bv32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 9} true;
  assume {:verifier.code 0} true;
  $i36 := $slt.bv32($i35, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 7} true;
  assume {:verifier.code 0} true;
  $i37 := $i34;
  assume {:branchcond $i36} true;
  goto $bb10, $bb11;
$bb4:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 15} true;
  assume {:verifier.code 0} true;
  assume ($i10 == 1bv1);
  goto $bb5;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 957, 9} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.bv8.bv32($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 957, 9} true;
  assume {:verifier.code 0} true;
  $i15 := $add.bv32($i14, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 957, 9} true;
  assume {:verifier.code 0} true;
  $i16 := $trunc.bv32.bv8($i15);
  call {:cexpr "c"} boogie_si_record_bv8($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 958, 5} true;
  assume {:verifier.code 0} true;
  $i13 := $i16;
  goto $bb9;
$bb6:
  assume !(($i10 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 18} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.bv8.bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 20} true;
  assume {:verifier.code 0} true;
  $i12 := $sgt.bv32($i11, 127bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 9} true;
  assume {:verifier.code 0} true;
  $i13 := $i5;
  assume {:branchcond $i12} true;
  goto $bb7, $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 9} true;
  assume {:verifier.code 0} true;
  assume ($i12 == 1bv1);
  goto $bb5;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i12 == 1bv1));
  goto $bb9;
$bb9:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 959, 3} true;
  assume {:verifier.code 0} true;
  $i8 := $i13;
  goto $bb3;
$bb10:
  assume ($i36 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 9} true;
  assume {:verifier.code 0} true;
  $i38 := $sext.bv8.bv32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 11} true;
  assume {:verifier.code 0} true;
  $i39 := $slt.bv32($i38, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb13, $bb15;
$bb11:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i36 == 1bv1));
  goto $bb12;
$bb12:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 971, 7} true;
  assume {:verifier.code 0} true;
  $i46 := $sext.bv8.bv32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 971, 9} true;
  assume {:verifier.code 0} true;
  $i47 := $srem.bv32($i46, 128bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 971, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $trunc.bv32.bv8($i47);
  call {:cexpr "a"} boogie_si_record_bv8($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 972, 8} true;
  assume {:verifier.code 0} true;
  $i49 := $sext.bv8.bv32($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 972, 5} true;
  assume {:verifier.code 0} true;
  $i50 := $sext.bv8.bv32($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 972, 5} true;
  assume {:verifier.code 0} true;
  $i51 := $add.bv32($i50, $i49);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 972, 5} true;
  assume {:verifier.code 0} true;
  $i52 := $trunc.bv32.bv8($i51);
  call {:cexpr "a"} boogie_si_record_bv8($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 973, 7} true;
  assume {:verifier.code 0} true;
  $i53 := $sext.bv8.bv32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 973, 9} true;
  assume {:verifier.code 0} true;
  $i54 := $srem.bv32($i53, 128bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 973, 7} true;
  assume {:verifier.code 0} true;
  $i55 := $trunc.bv32.bv8($i54);
  call {:cexpr "b"} boogie_si_record_bv8($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 974, 8} true;
  assume {:verifier.code 0} true;
  $i56 := $sext.bv8.bv32($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 974, 5} true;
  assume {:verifier.code 0} true;
  $i57 := $sext.bv8.bv32($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 974, 5} true;
  assume {:verifier.code 0} true;
  $i58 := $add.bv32($i57, $i56);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 974, 5} true;
  assume {:verifier.code 0} true;
  $i59 := $trunc.bv32.bv8($i58);
  call {:cexpr "b"} boogie_si_record_bv8($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 976, 8} true;
  assume {:verifier.code 0} true;
  $i60 := $sext.bv8.bv32($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 976, 5} true;
  assume {:verifier.code 0} true;
  $i61 := $sext.bv8.bv32($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 976, 5} true;
  assume {:verifier.code 0} true;
  $i62 := $add.bv32($i61, $i60);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 976, 5} true;
  assume {:verifier.code 0} true;
  $i63 := $trunc.bv32.bv8($i62);
  call {:cexpr "c"} boogie_si_record_bv8($i63);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 977, 7} true;
  assume {:verifier.code 0} true;
  $i64 := $sext.bv8.bv32($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 977, 9} true;
  assume {:verifier.code 0} true;
  $i65 := $slt.bv32($i64, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 977, 7} true;
  assume {:verifier.code 0} true;
  $i66 := $i63;
  assume {:branchcond $i65} true;
  goto $bb19, $bb20;
$bb13:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 15} true;
  assume {:verifier.code 0} true;
  assume ($i39 == 1bv1);
  goto $bb14;
$bb14:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 968, 9} true;
  assume {:verifier.code 0} true;
  $i43 := $sext.bv8.bv32($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 968, 9} true;
  assume {:verifier.code 0} true;
  $i44 := $add.bv32($i43, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 968, 9} true;
  assume {:verifier.code 0} true;
  $i45 := $trunc.bv32.bv8($i44);
  call {:cexpr "c"} boogie_si_record_bv8($i45);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 969, 5} true;
  assume {:verifier.code 0} true;
  $i42 := $i45;
  goto $bb18;
$bb15:
  assume !(($i39 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 18} true;
  assume {:verifier.code 0} true;
  $i40 := $sext.bv8.bv32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 20} true;
  assume {:verifier.code 0} true;
  $i41 := $sgt.bv32($i40, 127bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 9} true;
  assume {:verifier.code 0} true;
  $i42 := $i34;
  assume {:branchcond $i41} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 9} true;
  assume {:verifier.code 0} true;
  assume ($i41 == 1bv1);
  goto $bb14;
$bb17:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i41 == 1bv1));
  goto $bb18;
$bb18:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 970, 3} true;
  assume {:verifier.code 0} true;
  $i37 := $i42;
  goto $bb12;
$bb19:
  assume ($i65 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 9} true;
  assume {:verifier.code 0} true;
  $i67 := $sext.bv8.bv32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 11} true;
  assume {:verifier.code 0} true;
  $i68 := $slt.bv32($i67, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb22, $bb24;
$bb20:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 977, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i65 == 1bv1));
  goto $bb21;
$bb21:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 982, 7} true;
  assume {:verifier.code 0} true;
  $i75 := $sext.bv8.bv32($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 982, 9} true;
  assume {:verifier.code 0} true;
  $i76 := $srem.bv32($i75, 128bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 982, 7} true;
  assume {:verifier.code 0} true;
  $i77 := $trunc.bv32.bv8($i76);
  call {:cexpr "a"} boogie_si_record_bv8($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 983, 8} true;
  assume {:verifier.code 0} true;
  $i78 := $sext.bv8.bv32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 983, 5} true;
  assume {:verifier.code 0} true;
  $i79 := $sext.bv8.bv32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 983, 5} true;
  assume {:verifier.code 0} true;
  $i80 := $add.bv32($i79, $i78);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 983, 5} true;
  assume {:verifier.code 0} true;
  $i81 := $trunc.bv32.bv8($i80);
  call {:cexpr "a"} boogie_si_record_bv8($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 984, 7} true;
  assume {:verifier.code 0} true;
  $i82 := $sext.bv8.bv32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 984, 9} true;
  assume {:verifier.code 0} true;
  $i83 := $srem.bv32($i82, 128bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 984, 7} true;
  assume {:verifier.code 0} true;
  $i84 := $trunc.bv32.bv8($i83);
  call {:cexpr "b"} boogie_si_record_bv8($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 985, 8} true;
  assume {:verifier.code 0} true;
  $i85 := $sext.bv8.bv32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 985, 5} true;
  assume {:verifier.code 0} true;
  $i86 := $sext.bv8.bv32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 985, 5} true;
  assume {:verifier.code 0} true;
  $i87 := $add.bv32($i86, $i85);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 985, 5} true;
  assume {:verifier.code 0} true;
  $i88 := $trunc.bv32.bv8($i87);
  call {:cexpr "b"} boogie_si_record_bv8($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 987, 8} true;
  assume {:verifier.code 0} true;
  $i89 := $sext.bv8.bv32($i66);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 987, 5} true;
  assume {:verifier.code 0} true;
  $i90 := $sext.bv8.bv32($i66);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 987, 5} true;
  assume {:verifier.code 0} true;
  $i91 := $add.bv32($i90, $i89);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 987, 5} true;
  assume {:verifier.code 0} true;
  $i92 := $trunc.bv32.bv8($i91);
  call {:cexpr "c"} boogie_si_record_bv8($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 988, 7} true;
  assume {:verifier.code 0} true;
  $i93 := $sext.bv8.bv32($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 988, 9} true;
  assume {:verifier.code 0} true;
  $i94 := $slt.bv32($i93, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 988, 7} true;
  assume {:verifier.code 0} true;
  $i95 := $i92;
  assume {:branchcond $i94} true;
  goto $bb28, $bb29;
$bb22:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 15} true;
  assume {:verifier.code 0} true;
  assume ($i68 == 1bv1);
  goto $bb23;
$bb23:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 979, 9} true;
  assume {:verifier.code 0} true;
  $i72 := $sext.bv8.bv32($i63);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 979, 9} true;
  assume {:verifier.code 0} true;
  $i73 := $add.bv32($i72, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 979, 9} true;
  assume {:verifier.code 0} true;
  $i74 := $trunc.bv32.bv8($i73);
  call {:cexpr "c"} boogie_si_record_bv8($i74);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 980, 5} true;
  assume {:verifier.code 0} true;
  $i71 := $i74;
  goto $bb27;
$bb24:
  assume !(($i68 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 18} true;
  assume {:verifier.code 0} true;
  $i69 := $sext.bv8.bv32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 20} true;
  assume {:verifier.code 0} true;
  $i70 := $sgt.bv32($i69, 127bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 9} true;
  assume {:verifier.code 0} true;
  $i71 := $i63;
  assume {:branchcond $i70} true;
  goto $bb25, $bb26;
$bb25:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 9} true;
  assume {:verifier.code 0} true;
  assume ($i70 == 1bv1);
  goto $bb23;
$bb26:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i70 == 1bv1));
  goto $bb27;
$bb27:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 981, 3} true;
  assume {:verifier.code 0} true;
  $i66 := $i71;
  goto $bb21;
$bb28:
  assume ($i94 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 9} true;
  assume {:verifier.code 0} true;
  $i96 := $sext.bv8.bv32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 11} true;
  assume {:verifier.code 0} true;
  $i97 := $slt.bv32($i96, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i97} true;
  goto $bb31, $bb33;
$bb29:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 988, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i94 == 1bv1));
  goto $bb30;
$bb30:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 993, 7} true;
  assume {:verifier.code 0} true;
  $i104 := $sext.bv8.bv32($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 993, 9} true;
  assume {:verifier.code 0} true;
  $i105 := $srem.bv32($i104, 128bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 993, 7} true;
  assume {:verifier.code 0} true;
  $i106 := $trunc.bv32.bv8($i105);
  call {:cexpr "a"} boogie_si_record_bv8($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 994, 8} true;
  assume {:verifier.code 0} true;
  $i107 := $sext.bv8.bv32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 994, 5} true;
  assume {:verifier.code 0} true;
  $i108 := $sext.bv8.bv32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 994, 5} true;
  assume {:verifier.code 0} true;
  $i109 := $add.bv32($i108, $i107);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 994, 5} true;
  assume {:verifier.code 0} true;
  $i110 := $trunc.bv32.bv8($i109);
  call {:cexpr "a"} boogie_si_record_bv8($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 995, 7} true;
  assume {:verifier.code 0} true;
  $i111 := $sext.bv8.bv32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 995, 9} true;
  assume {:verifier.code 0} true;
  $i112 := $srem.bv32($i111, 128bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 995, 7} true;
  assume {:verifier.code 0} true;
  $i113 := $trunc.bv32.bv8($i112);
  call {:cexpr "b"} boogie_si_record_bv8($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 996, 8} true;
  assume {:verifier.code 0} true;
  $i114 := $sext.bv8.bv32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 996, 5} true;
  assume {:verifier.code 0} true;
  $i115 := $sext.bv8.bv32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 996, 5} true;
  assume {:verifier.code 0} true;
  $i116 := $add.bv32($i115, $i114);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 996, 5} true;
  assume {:verifier.code 0} true;
  $i117 := $trunc.bv32.bv8($i116);
  call {:cexpr "b"} boogie_si_record_bv8($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 998, 8} true;
  assume {:verifier.code 0} true;
  $i118 := $sext.bv8.bv32($i95);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 998, 5} true;
  assume {:verifier.code 0} true;
  $i119 := $sext.bv8.bv32($i95);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 998, 5} true;
  assume {:verifier.code 0} true;
  $i120 := $add.bv32($i119, $i118);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 998, 5} true;
  assume {:verifier.code 0} true;
  $i121 := $trunc.bv32.bv8($i120);
  call {:cexpr "c"} boogie_si_record_bv8($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 999, 7} true;
  assume {:verifier.code 0} true;
  $i122 := $sext.bv8.bv32($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 999, 9} true;
  assume {:verifier.code 0} true;
  $i123 := $slt.bv32($i122, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 999, 7} true;
  assume {:verifier.code 0} true;
  $i124 := $i121;
  assume {:branchcond $i123} true;
  goto $bb37, $bb38;
$bb31:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 15} true;
  assume {:verifier.code 0} true;
  assume ($i97 == 1bv1);
  goto $bb32;
$bb32:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 990, 9} true;
  assume {:verifier.code 0} true;
  $i101 := $sext.bv8.bv32($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 990, 9} true;
  assume {:verifier.code 0} true;
  $i102 := $add.bv32($i101, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 990, 9} true;
  assume {:verifier.code 0} true;
  $i103 := $trunc.bv32.bv8($i102);
  call {:cexpr "c"} boogie_si_record_bv8($i103);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 991, 5} true;
  assume {:verifier.code 0} true;
  $i100 := $i103;
  goto $bb36;
$bb33:
  assume !(($i97 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 18} true;
  assume {:verifier.code 0} true;
  $i98 := $sext.bv8.bv32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 20} true;
  assume {:verifier.code 0} true;
  $i99 := $sgt.bv32($i98, 127bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 9} true;
  assume {:verifier.code 0} true;
  $i100 := $i92;
  assume {:branchcond $i99} true;
  goto $bb34, $bb35;
$bb34:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 9} true;
  assume {:verifier.code 0} true;
  assume ($i99 == 1bv1);
  goto $bb32;
$bb35:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i99 == 1bv1));
  goto $bb36;
$bb36:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 992, 3} true;
  assume {:verifier.code 0} true;
  $i95 := $i100;
  goto $bb30;
$bb37:
  assume ($i123 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 9} true;
  assume {:verifier.code 0} true;
  $i125 := $sext.bv8.bv32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 11} true;
  assume {:verifier.code 0} true;
  $i126 := $slt.bv32($i125, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i126} true;
  goto $bb40, $bb42;
$bb38:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 999, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i123 == 1bv1));
  goto $bb39;
$bb39:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1004, 7} true;
  assume {:verifier.code 0} true;
  $i133 := $sext.bv8.bv32($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1004, 9} true;
  assume {:verifier.code 0} true;
  $i134 := $srem.bv32($i133, 128bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1004, 7} true;
  assume {:verifier.code 0} true;
  $i135 := $trunc.bv32.bv8($i134);
  call {:cexpr "a"} boogie_si_record_bv8($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1005, 8} true;
  assume {:verifier.code 0} true;
  $i136 := $sext.bv8.bv32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1005, 5} true;
  assume {:verifier.code 0} true;
  $i137 := $sext.bv8.bv32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1005, 5} true;
  assume {:verifier.code 0} true;
  $i138 := $add.bv32($i137, $i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1005, 5} true;
  assume {:verifier.code 0} true;
  $i139 := $trunc.bv32.bv8($i138);
  call {:cexpr "a"} boogie_si_record_bv8($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1006, 7} true;
  assume {:verifier.code 0} true;
  $i140 := $sext.bv8.bv32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1006, 9} true;
  assume {:verifier.code 0} true;
  $i141 := $srem.bv32($i140, 128bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1006, 7} true;
  assume {:verifier.code 0} true;
  $i142 := $trunc.bv32.bv8($i141);
  call {:cexpr "b"} boogie_si_record_bv8($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1007, 8} true;
  assume {:verifier.code 0} true;
  $i143 := $sext.bv8.bv32($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1007, 5} true;
  assume {:verifier.code 0} true;
  $i144 := $sext.bv8.bv32($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1007, 5} true;
  assume {:verifier.code 0} true;
  $i145 := $add.bv32($i144, $i143);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1007, 5} true;
  assume {:verifier.code 0} true;
  $i146 := $trunc.bv32.bv8($i145);
  call {:cexpr "b"} boogie_si_record_bv8($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1009, 8} true;
  assume {:verifier.code 0} true;
  $i147 := $sext.bv8.bv32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1009, 5} true;
  assume {:verifier.code 0} true;
  $i148 := $sext.bv8.bv32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1009, 5} true;
  assume {:verifier.code 0} true;
  $i149 := $add.bv32($i148, $i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1009, 5} true;
  assume {:verifier.code 0} true;
  $i150 := $trunc.bv32.bv8($i149);
  call {:cexpr "c"} boogie_si_record_bv8($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1010, 7} true;
  assume {:verifier.code 0} true;
  $i151 := $sext.bv8.bv32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1010, 9} true;
  assume {:verifier.code 0} true;
  $i152 := $slt.bv32($i151, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1010, 7} true;
  assume {:verifier.code 0} true;
  $i153 := $i150;
  assume {:branchcond $i152} true;
  goto $bb46, $bb47;
$bb40:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 15} true;
  assume {:verifier.code 0} true;
  assume ($i126 == 1bv1);
  goto $bb41;
$bb41:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1001, 9} true;
  assume {:verifier.code 0} true;
  $i130 := $sext.bv8.bv32($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1001, 9} true;
  assume {:verifier.code 0} true;
  $i131 := $add.bv32($i130, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1001, 9} true;
  assume {:verifier.code 0} true;
  $i132 := $trunc.bv32.bv8($i131);
  call {:cexpr "c"} boogie_si_record_bv8($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1002, 5} true;
  assume {:verifier.code 0} true;
  $i129 := $i132;
  goto $bb45;
$bb42:
  assume !(($i126 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 18} true;
  assume {:verifier.code 0} true;
  $i127 := $sext.bv8.bv32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 20} true;
  assume {:verifier.code 0} true;
  $i128 := $sgt.bv32($i127, 127bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 9} true;
  assume {:verifier.code 0} true;
  $i129 := $i121;
  assume {:branchcond $i128} true;
  goto $bb43, $bb44;
$bb43:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 9} true;
  assume {:verifier.code 0} true;
  assume ($i128 == 1bv1);
  goto $bb41;
$bb44:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i128 == 1bv1));
  goto $bb45;
$bb45:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1003, 3} true;
  assume {:verifier.code 0} true;
  $i124 := $i129;
  goto $bb39;
$bb46:
  assume ($i152 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 9} true;
  assume {:verifier.code 0} true;
  $i154 := $sext.bv8.bv32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 11} true;
  assume {:verifier.code 0} true;
  $i155 := $slt.bv32($i154, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i155} true;
  goto $bb49, $bb51;
$bb47:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1010, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i152 == 1bv1));
  goto $bb48;
$bb48:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1015, 7} true;
  assume {:verifier.code 0} true;
  $i162 := $sext.bv8.bv32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1015, 9} true;
  assume {:verifier.code 0} true;
  $i163 := $srem.bv32($i162, 128bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1015, 7} true;
  assume {:verifier.code 0} true;
  $i164 := $trunc.bv32.bv8($i163);
  call {:cexpr "a"} boogie_si_record_bv8($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1016, 8} true;
  assume {:verifier.code 0} true;
  $i165 := $sext.bv8.bv32($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1016, 5} true;
  assume {:verifier.code 0} true;
  $i166 := $sext.bv8.bv32($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1016, 5} true;
  assume {:verifier.code 0} true;
  $i167 := $add.bv32($i166, $i165);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1016, 5} true;
  assume {:verifier.code 0} true;
  $i168 := $trunc.bv32.bv8($i167);
  call {:cexpr "a"} boogie_si_record_bv8($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1017, 7} true;
  assume {:verifier.code 0} true;
  $i169 := $sext.bv8.bv32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1017, 9} true;
  assume {:verifier.code 0} true;
  $i170 := $srem.bv32($i169, 128bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1017, 7} true;
  assume {:verifier.code 0} true;
  $i171 := $trunc.bv32.bv8($i170);
  call {:cexpr "b"} boogie_si_record_bv8($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1018, 8} true;
  assume {:verifier.code 0} true;
  $i172 := $sext.bv8.bv32($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1018, 5} true;
  assume {:verifier.code 0} true;
  $i173 := $sext.bv8.bv32($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1018, 5} true;
  assume {:verifier.code 0} true;
  $i174 := $add.bv32($i173, $i172);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1018, 5} true;
  assume {:verifier.code 0} true;
  $i175 := $trunc.bv32.bv8($i174);
  call {:cexpr "b"} boogie_si_record_bv8($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1020, 8} true;
  assume {:verifier.code 0} true;
  $i176 := $sext.bv8.bv32($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1020, 5} true;
  assume {:verifier.code 0} true;
  $i177 := $sext.bv8.bv32($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1020, 5} true;
  assume {:verifier.code 0} true;
  $i178 := $add.bv32($i177, $i176);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1020, 5} true;
  assume {:verifier.code 0} true;
  $i179 := $trunc.bv32.bv8($i178);
  call {:cexpr "c"} boogie_si_record_bv8($i179);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1021, 7} true;
  assume {:verifier.code 0} true;
  $i180 := $sext.bv8.bv32($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1021, 9} true;
  assume {:verifier.code 0} true;
  $i181 := $slt.bv32($i180, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1021, 7} true;
  assume {:verifier.code 0} true;
  $i182 := $i179;
  assume {:branchcond $i181} true;
  goto $bb55, $bb56;
$bb49:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 15} true;
  assume {:verifier.code 0} true;
  assume ($i155 == 1bv1);
  goto $bb50;
$bb50:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1012, 9} true;
  assume {:verifier.code 0} true;
  $i159 := $sext.bv8.bv32($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1012, 9} true;
  assume {:verifier.code 0} true;
  $i160 := $add.bv32($i159, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1012, 9} true;
  assume {:verifier.code 0} true;
  $i161 := $trunc.bv32.bv8($i160);
  call {:cexpr "c"} boogie_si_record_bv8($i161);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1013, 5} true;
  assume {:verifier.code 0} true;
  $i158 := $i161;
  goto $bb54;
$bb51:
  assume !(($i155 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 18} true;
  assume {:verifier.code 0} true;
  $i156 := $sext.bv8.bv32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 20} true;
  assume {:verifier.code 0} true;
  $i157 := $sgt.bv32($i156, 127bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 9} true;
  assume {:verifier.code 0} true;
  $i158 := $i150;
  assume {:branchcond $i157} true;
  goto $bb52, $bb53;
$bb52:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 9} true;
  assume {:verifier.code 0} true;
  assume ($i157 == 1bv1);
  goto $bb50;
$bb53:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i157 == 1bv1));
  goto $bb54;
$bb54:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1014, 3} true;
  assume {:verifier.code 0} true;
  $i153 := $i158;
  goto $bb48;
$bb55:
  assume ($i181 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 9} true;
  assume {:verifier.code 0} true;
  $i183 := $sext.bv8.bv32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 11} true;
  assume {:verifier.code 0} true;
  $i184 := $slt.bv32($i183, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i184} true;
  goto $bb58, $bb60;
$bb56:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1021, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i181 == 1bv1));
  goto $bb57;
$bb57:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1026, 7} true;
  assume {:verifier.code 0} true;
  $i191 := $sext.bv8.bv32($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1026, 9} true;
  assume {:verifier.code 0} true;
  $i192 := $srem.bv32($i191, 128bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1026, 7} true;
  assume {:verifier.code 0} true;
  $i193 := $trunc.bv32.bv8($i192);
  call {:cexpr "a"} boogie_si_record_bv8($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1027, 8} true;
  assume {:verifier.code 0} true;
  $i194 := $sext.bv8.bv32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1027, 5} true;
  assume {:verifier.code 0} true;
  $i195 := $sext.bv8.bv32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1027, 5} true;
  assume {:verifier.code 0} true;
  $i196 := $add.bv32($i195, $i194);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1027, 5} true;
  assume {:verifier.code 0} true;
  $i197 := $trunc.bv32.bv8($i196);
  call {:cexpr "a"} boogie_si_record_bv8($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1028, 7} true;
  assume {:verifier.code 0} true;
  $i198 := $sext.bv8.bv32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1028, 9} true;
  assume {:verifier.code 0} true;
  $i199 := $srem.bv32($i198, 128bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1028, 7} true;
  assume {:verifier.code 0} true;
  $i200 := $trunc.bv32.bv8($i199);
  call {:cexpr "b"} boogie_si_record_bv8($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1029, 8} true;
  assume {:verifier.code 0} true;
  $i201 := $sext.bv8.bv32($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1029, 5} true;
  assume {:verifier.code 0} true;
  $i202 := $sext.bv8.bv32($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1029, 5} true;
  assume {:verifier.code 0} true;
  $i203 := $add.bv32($i202, $i201);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1029, 5} true;
  assume {:verifier.code 0} true;
  $i204 := $trunc.bv32.bv8($i203);
  call {:cexpr "b"} boogie_si_record_bv8($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1031, 8} true;
  assume {:verifier.code 0} true;
  $i205 := $sext.bv8.bv32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1031, 5} true;
  assume {:verifier.code 0} true;
  $i206 := $sext.bv8.bv32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1031, 5} true;
  assume {:verifier.code 0} true;
  $i207 := $add.bv32($i206, $i205);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1031, 5} true;
  assume {:verifier.code 0} true;
  $i208 := $trunc.bv32.bv8($i207);
  call {:cexpr "c"} boogie_si_record_bv8($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1032, 7} true;
  assume {:verifier.code 0} true;
  $i209 := $sext.bv8.bv32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1032, 9} true;
  assume {:verifier.code 0} true;
  $i210 := $slt.bv32($i209, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1032, 7} true;
  assume {:verifier.code 0} true;
  $i211 := $i208;
  assume {:branchcond $i210} true;
  goto $bb64, $bb65;
$bb58:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 15} true;
  assume {:verifier.code 0} true;
  assume ($i184 == 1bv1);
  goto $bb59;
$bb59:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1023, 9} true;
  assume {:verifier.code 0} true;
  $i188 := $sext.bv8.bv32($i179);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1023, 9} true;
  assume {:verifier.code 0} true;
  $i189 := $add.bv32($i188, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1023, 9} true;
  assume {:verifier.code 0} true;
  $i190 := $trunc.bv32.bv8($i189);
  call {:cexpr "c"} boogie_si_record_bv8($i190);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1024, 5} true;
  assume {:verifier.code 0} true;
  $i187 := $i190;
  goto $bb63;
$bb60:
  assume !(($i184 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 18} true;
  assume {:verifier.code 0} true;
  $i185 := $sext.bv8.bv32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 20} true;
  assume {:verifier.code 0} true;
  $i186 := $sgt.bv32($i185, 127bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 9} true;
  assume {:verifier.code 0} true;
  $i187 := $i179;
  assume {:branchcond $i186} true;
  goto $bb61, $bb62;
$bb61:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 9} true;
  assume {:verifier.code 0} true;
  assume ($i186 == 1bv1);
  goto $bb59;
$bb62:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i186 == 1bv1));
  goto $bb63;
$bb63:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1025, 3} true;
  assume {:verifier.code 0} true;
  $i182 := $i187;
  goto $bb57;
$bb64:
  assume ($i210 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 9} true;
  assume {:verifier.code 0} true;
  $i212 := $sext.bv8.bv32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 11} true;
  assume {:verifier.code 0} true;
  $i213 := $slt.bv32($i212, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i213} true;
  goto $bb67, $bb69;
$bb65:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1032, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i210 == 1bv1));
  goto $bb66;
$bb66:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1042, 3} true;
  assume {:verifier.code 0} true;
  $r := $i211;
  $exn := false;
  return;
$bb67:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 15} true;
  assume {:verifier.code 0} true;
  assume ($i213 == 1bv1);
  goto $bb68;
$bb68:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1034, 9} true;
  assume {:verifier.code 0} true;
  $i217 := $sext.bv8.bv32($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1034, 9} true;
  assume {:verifier.code 0} true;
  $i218 := $add.bv32($i217, 1bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1034, 9} true;
  assume {:verifier.code 0} true;
  $i219 := $trunc.bv32.bv8($i218);
  call {:cexpr "c"} boogie_si_record_bv8($i219);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1035, 5} true;
  assume {:verifier.code 0} true;
  $i216 := $i219;
  goto $bb72;
$bb69:
  assume !(($i213 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 18} true;
  assume {:verifier.code 0} true;
  $i214 := $sext.bv8.bv32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 20} true;
  assume {:verifier.code 0} true;
  $i215 := $sgt.bv32($i214, 127bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 9} true;
  assume {:verifier.code 0} true;
  $i216 := $i208;
  assume {:branchcond $i215} true;
  goto $bb70, $bb71;
$bb70:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 9} true;
  assume {:verifier.code 0} true;
  assume ($i215 == 1bv1);
  goto $bb68;
$bb71:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i215 == 1bv1));
  goto $bb72;
$bb72:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1036, 3} true;
  assume {:verifier.code 0} true;
  $i211 := $i216;
  goto $bb66;
}
const __SMACK_or32: ref;
axiom (__SMACK_or32 == $sub.ref(0, 13416));
procedure  __SMACK_or32($i0: bv32, $i1: bv32)
  returns ($r: bv32)
{
  var $i2: bv32;
  var $i3: bv1;
  var $i4: bv32;
  var $i6: bv1;
  var $i8: bv32;
  var $i7: bv32;
  var $i5: bv32;
  var $i9: bv32;
  var $i10: bv64;
  var $i11: bv64;
  var $i12: bv32;
  var $i13: bv32;
  var $i14: bv64;
  var $i15: bv64;
  var $i16: bv32;
  var $i17: bv32;
  var $i18: bv1;
  var $i19: bv32;
  var $i21: bv1;
  var $i23: bv32;
  var $i22: bv32;
  var $i20: bv32;
  var $i24: bv32;
  var $i25: bv64;
  var $i26: bv64;
  var $i27: bv32;
  var $i28: bv32;
  var $i29: bv64;
  var $i30: bv64;
  var $i31: bv32;
  var $i32: bv32;
  var $i33: bv1;
  var $i34: bv32;
  var $i36: bv1;
  var $i38: bv32;
  var $i37: bv32;
  var $i35: bv32;
  var $i39: bv32;
  var $i40: bv64;
  var $i41: bv64;
  var $i42: bv32;
  var $i43: bv32;
  var $i44: bv64;
  var $i45: bv64;
  var $i46: bv32;
  var $i47: bv32;
  var $i48: bv1;
  var $i49: bv32;
  var $i51: bv1;
  var $i53: bv32;
  var $i52: bv32;
  var $i50: bv32;
  var $i54: bv32;
  var $i55: bv64;
  var $i56: bv64;
  var $i57: bv32;
  var $i58: bv32;
  var $i59: bv64;
  var $i60: bv64;
  var $i61: bv32;
  var $i62: bv32;
  var $i63: bv1;
  var $i64: bv32;
  var $i66: bv1;
  var $i68: bv32;
  var $i67: bv32;
  var $i65: bv32;
  var $i69: bv32;
  var $i70: bv64;
  var $i71: bv64;
  var $i72: bv32;
  var $i73: bv32;
  var $i74: bv64;
  var $i75: bv64;
  var $i76: bv32;
  var $i77: bv32;
  var $i78: bv1;
  var $i79: bv32;
  var $i81: bv1;
  var $i83: bv32;
  var $i82: bv32;
  var $i80: bv32;
  var $i84: bv32;
  var $i85: bv64;
  var $i86: bv64;
  var $i87: bv32;
  var $i88: bv32;
  var $i89: bv64;
  var $i90: bv64;
  var $i91: bv32;
  var $i92: bv32;
  var $i93: bv1;
  var $i94: bv32;
  var $i96: bv1;
  var $i98: bv32;
  var $i97: bv32;
  var $i95: bv32;
  var $i99: bv32;
  var $i100: bv64;
  var $i101: bv64;
  var $i102: bv32;
  var $i103: bv32;
  var $i104: bv64;
  var $i105: bv64;
  var $i106: bv32;
  var $i107: bv32;
  var $i108: bv1;
  var $i109: bv32;
  var $i111: bv1;
  var $i113: bv32;
  var $i112: bv32;
  var $i110: bv32;
  var $i114: bv32;
  var $i115: bv64;
  var $i116: bv64;
  var $i117: bv32;
  var $i118: bv32;
  var $i119: bv64;
  var $i120: bv64;
  var $i121: bv32;
  var $i122: bv32;
  var $i123: bv1;
  var $i124: bv32;
  var $i126: bv1;
  var $i128: bv32;
  var $i127: bv32;
  var $i125: bv32;
  var $i129: bv32;
  var $i130: bv64;
  var $i131: bv64;
  var $i132: bv32;
  var $i133: bv32;
  var $i134: bv64;
  var $i135: bv64;
  var $i136: bv32;
  var $i137: bv32;
  var $i138: bv1;
  var $i139: bv32;
  var $i141: bv1;
  var $i143: bv32;
  var $i142: bv32;
  var $i140: bv32;
  var $i144: bv32;
  var $i145: bv64;
  var $i146: bv64;
  var $i147: bv32;
  var $i148: bv32;
  var $i149: bv64;
  var $i150: bv64;
  var $i151: bv32;
  var $i152: bv32;
  var $i153: bv1;
  var $i154: bv32;
  var $i156: bv1;
  var $i158: bv32;
  var $i157: bv32;
  var $i155: bv32;
  var $i159: bv32;
  var $i160: bv64;
  var $i161: bv64;
  var $i162: bv32;
  var $i163: bv32;
  var $i164: bv64;
  var $i165: bv64;
  var $i166: bv32;
  var $i167: bv32;
  var $i168: bv1;
  var $i169: bv32;
  var $i171: bv1;
  var $i173: bv32;
  var $i172: bv32;
  var $i170: bv32;
  var $i174: bv32;
  var $i175: bv64;
  var $i176: bv64;
  var $i177: bv32;
  var $i178: bv32;
  var $i179: bv64;
  var $i180: bv64;
  var $i181: bv32;
  var $i182: bv32;
  var $i183: bv1;
  var $i184: bv32;
  var $i186: bv1;
  var $i188: bv32;
  var $i187: bv32;
  var $i185: bv32;
  var $i189: bv32;
  var $i190: bv64;
  var $i191: bv64;
  var $i192: bv32;
  var $i193: bv32;
  var $i194: bv64;
  var $i195: bv64;
  var $i196: bv32;
  var $i197: bv32;
  var $i198: bv1;
  var $i199: bv32;
  var $i201: bv1;
  var $i203: bv32;
  var $i202: bv32;
  var $i200: bv32;
  var $i204: bv32;
  var $i205: bv64;
  var $i206: bv64;
  var $i207: bv32;
  var $i208: bv32;
  var $i209: bv64;
  var $i210: bv64;
  var $i211: bv32;
  var $i212: bv32;
  var $i213: bv1;
  var $i214: bv32;
  var $i216: bv1;
  var $i218: bv32;
  var $i217: bv32;
  var $i215: bv32;
  var $i219: bv32;
  var $i220: bv64;
  var $i221: bv64;
  var $i222: bv32;
  var $i223: bv32;
  var $i224: bv64;
  var $i225: bv64;
  var $i226: bv32;
  var $i227: bv32;
  var $i228: bv1;
  var $i229: bv32;
  var $i231: bv1;
  var $i233: bv32;
  var $i232: bv32;
  var $i230: bv32;
  var $i234: bv32;
  var $i235: bv64;
  var $i236: bv64;
  var $i237: bv32;
  var $i238: bv32;
  var $i239: bv64;
  var $i240: bv64;
  var $i241: bv32;
  var $i242: bv32;
  var $i243: bv1;
  var $i244: bv32;
  var $i246: bv1;
  var $i248: bv32;
  var $i247: bv32;
  var $i245: bv32;
  var $i249: bv32;
  var $i250: bv64;
  var $i251: bv64;
  var $i252: bv32;
  var $i253: bv32;
  var $i254: bv64;
  var $i255: bv64;
  var $i256: bv32;
  var $i257: bv32;
  var $i258: bv1;
  var $i259: bv32;
  var $i261: bv1;
  var $i263: bv32;
  var $i262: bv32;
  var $i260: bv32;
  var $i264: bv32;
  var $i265: bv64;
  var $i266: bv64;
  var $i267: bv32;
  var $i268: bv32;
  var $i269: bv64;
  var $i270: bv64;
  var $i271: bv32;
  var $i272: bv32;
  var $i273: bv1;
  var $i274: bv32;
  var $i276: bv1;
  var $i278: bv32;
  var $i277: bv32;
  var $i275: bv32;
  var $i279: bv32;
  var $i280: bv64;
  var $i281: bv64;
  var $i282: bv32;
  var $i283: bv32;
  var $i284: bv64;
  var $i285: bv64;
  var $i286: bv32;
  var $i287: bv32;
  var $i288: bv1;
  var $i289: bv32;
  var $i291: bv1;
  var $i293: bv32;
  var $i292: bv32;
  var $i290: bv32;
  var $i294: bv32;
  var $i295: bv64;
  var $i296: bv64;
  var $i297: bv32;
  var $i298: bv32;
  var $i299: bv64;
  var $i300: bv64;
  var $i301: bv32;
  var $i302: bv32;
  var $i303: bv1;
  var $i304: bv32;
  var $i306: bv1;
  var $i308: bv32;
  var $i307: bv32;
  var $i305: bv32;
  var $i309: bv32;
  var $i310: bv64;
  var $i311: bv64;
  var $i312: bv32;
  var $i313: bv32;
  var $i314: bv64;
  var $i315: bv64;
  var $i316: bv32;
  var $i317: bv32;
  var $i318: bv1;
  var $i319: bv32;
  var $i321: bv1;
  var $i323: bv32;
  var $i322: bv32;
  var $i320: bv32;
  var $i324: bv32;
  var $i325: bv64;
  var $i326: bv64;
  var $i327: bv32;
  var $i328: bv32;
  var $i329: bv64;
  var $i330: bv64;
  var $i331: bv32;
  var $i332: bv32;
  var $i333: bv1;
  var $i334: bv32;
  var $i336: bv1;
  var $i338: bv32;
  var $i337: bv32;
  var $i335: bv32;
  var $i339: bv32;
  var $i340: bv64;
  var $i341: bv64;
  var $i342: bv32;
  var $i343: bv32;
  var $i344: bv64;
  var $i345: bv64;
  var $i346: bv32;
  var $i347: bv32;
  var $i348: bv1;
  var $i349: bv32;
  var $i351: bv1;
  var $i353: bv32;
  var $i352: bv32;
  var $i350: bv32;
  var $i354: bv32;
  var $i355: bv64;
  var $i356: bv64;
  var $i357: bv32;
  var $i358: bv32;
  var $i359: bv64;
  var $i360: bv64;
  var $i361: bv32;
  var $i362: bv32;
  var $i363: bv1;
  var $i364: bv32;
  var $i366: bv1;
  var $i368: bv32;
  var $i367: bv32;
  var $i365: bv32;
  var $i369: bv32;
  var $i370: bv64;
  var $i371: bv64;
  var $i372: bv32;
  var $i373: bv32;
  var $i374: bv64;
  var $i375: bv64;
  var $i376: bv32;
  var $i377: bv32;
  var $i378: bv1;
  var $i379: bv32;
  var $i381: bv1;
  var $i383: bv32;
  var $i382: bv32;
  var $i380: bv32;
  var $i384: bv32;
  var $i385: bv64;
  var $i386: bv64;
  var $i387: bv32;
  var $i388: bv32;
  var $i389: bv64;
  var $i390: bv64;
  var $i391: bv32;
  var $i392: bv32;
  var $i393: bv1;
  var $i394: bv32;
  var $i396: bv1;
  var $i398: bv32;
  var $i397: bv32;
  var $i395: bv32;
  var $i399: bv32;
  var $i400: bv64;
  var $i401: bv64;
  var $i402: bv32;
  var $i403: bv32;
  var $i404: bv64;
  var $i405: bv64;
  var $i406: bv32;
  var $i407: bv32;
  var $i408: bv1;
  var $i409: bv32;
  var $i411: bv1;
  var $i413: bv32;
  var $i412: bv32;
  var $i410: bv32;
  var $i414: bv32;
  var $i415: bv64;
  var $i416: bv64;
  var $i417: bv32;
  var $i418: bv32;
  var $i419: bv64;
  var $i420: bv64;
  var $i421: bv32;
  var $i422: bv32;
  var $i423: bv1;
  var $i424: bv32;
  var $i426: bv1;
  var $i428: bv32;
  var $i427: bv32;
  var $i425: bv32;
  var $i429: bv32;
  var $i430: bv64;
  var $i431: bv64;
  var $i432: bv32;
  var $i433: bv32;
  var $i434: bv64;
  var $i435: bv64;
  var $i436: bv32;
  var $i437: bv32;
  var $i438: bv1;
  var $i439: bv32;
  var $i441: bv1;
  var $i443: bv32;
  var $i442: bv32;
  var $i440: bv32;
  var $i444: bv32;
  var $i445: bv64;
  var $i446: bv64;
  var $i447: bv32;
  var $i448: bv32;
  var $i449: bv64;
  var $i450: bv64;
  var $i451: bv32;
  var $i452: bv32;
  var $i453: bv1;
  var $i454: bv32;
  var $i456: bv1;
  var $i458: bv32;
  var $i457: bv32;
  var $i455: bv32;
  var $i459: bv32;
  var $i460: bv64;
  var $i461: bv64;
  var $i462: bv32;
  var $i463: bv32;
  var $i464: bv64;
  var $i465: bv64;
  var $i466: bv32;
  var $i467: bv32;
  var $i468: bv1;
  var $i469: bv32;
  var $i471: bv1;
  var $i473: bv32;
  var $i472: bv32;
  var $i470: bv32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1048, 5} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__SMACK_or32:arg:a"} boogie_si_record_bv32($i0);
  call {:cexpr "__SMACK_or32:arg:b"} boogie_si_record_bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1048, 5} true;
  assume {:verifier.code 0} true;
  $i2 := $add.bv32(0bv32, 0bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1049, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.bv32($i0, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1049, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1050, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $add.bv32($i2, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1051, 3} true;
  assume {:verifier.code 0} true;
  $i5 := $i4;
  goto $bb3;
$bb2:
  assume !(($i3 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1051, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $slt.bv32($i1, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1051, 14} true;
  assume {:verifier.code 0} true;
  $i7 := $i2;
  assume {:branchcond $i6} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1054, 5} true;
  assume {:verifier.code 0} true;
  $i9 := $add.bv32($i0, $i0);
  call {:cexpr "a"} boogie_si_record_bv32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1055, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $sext.bv32.bv64($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1055, 9} true;
  assume {:verifier.code 0} true;
  $i11 := $srem.bv64($i10, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1055, 7} true;
  assume {:verifier.code 0} true;
  $i12 := $trunc.bv64.bv32($i11);
  call {:cexpr "a"} boogie_si_record_bv32($i12);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1056, 5} true;
  assume {:verifier.code 0} true;
  $i13 := $add.bv32($i1, $i1);
  call {:cexpr "b"} boogie_si_record_bv32($i13);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1057, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.bv32.bv64($i13);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1057, 9} true;
  assume {:verifier.code 0} true;
  $i15 := $srem.bv64($i14, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1057, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $trunc.bv64.bv32($i15);
  call {:cexpr "b"} boogie_si_record_bv32($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1059, 5} true;
  assume {:verifier.code 0} true;
  $i17 := $add.bv32($i5, $i5);
  call {:cexpr "c"} boogie_si_record_bv32($i17);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1060, 9} true;
  assume {:verifier.code 0} true;
  $i18 := $slt.bv32($i12, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1060, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb7, $bb8;
$bb4:
  assume ($i6 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1052, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $add.bv32($i2, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1053, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $i8;
  goto $bb6;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1051, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i6 == 1bv1));
  goto $bb6;
$bb6:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i5 := $i7;
  goto $bb3;
$bb7:
  assume ($i18 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1061, 7} true;
  assume {:verifier.code 0} true;
  $i19 := $add.bv32($i17, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1062, 3} true;
  assume {:verifier.code 0} true;
  $i20 := $i19;
  goto $bb9;
$bb8:
  assume !(($i18 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1062, 16} true;
  assume {:verifier.code 0} true;
  $i21 := $slt.bv32($i16, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1062, 14} true;
  assume {:verifier.code 0} true;
  $i22 := $i17;
  assume {:branchcond $i21} true;
  goto $bb10, $bb11;
$bb9:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1065, 5} true;
  assume {:verifier.code 0} true;
  $i24 := $add.bv32($i12, $i12);
  call {:cexpr "a"} boogie_si_record_bv32($i24);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1066, 7} true;
  assume {:verifier.code 0} true;
  $i25 := $sext.bv32.bv64($i24);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1066, 9} true;
  assume {:verifier.code 0} true;
  $i26 := $srem.bv64($i25, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1066, 7} true;
  assume {:verifier.code 0} true;
  $i27 := $trunc.bv64.bv32($i26);
  call {:cexpr "a"} boogie_si_record_bv32($i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1067, 5} true;
  assume {:verifier.code 0} true;
  $i28 := $add.bv32($i16, $i16);
  call {:cexpr "b"} boogie_si_record_bv32($i28);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1068, 7} true;
  assume {:verifier.code 0} true;
  $i29 := $sext.bv32.bv64($i28);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1068, 9} true;
  assume {:verifier.code 0} true;
  $i30 := $srem.bv64($i29, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1068, 7} true;
  assume {:verifier.code 0} true;
  $i31 := $trunc.bv64.bv32($i30);
  call {:cexpr "b"} boogie_si_record_bv32($i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1070, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $add.bv32($i20, $i20);
  call {:cexpr "c"} boogie_si_record_bv32($i32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1071, 9} true;
  assume {:verifier.code 0} true;
  $i33 := $slt.bv32($i27, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1071, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i33} true;
  goto $bb13, $bb14;
$bb10:
  assume ($i21 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1063, 7} true;
  assume {:verifier.code 0} true;
  $i23 := $add.bv32($i17, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1064, 3} true;
  assume {:verifier.code 0} true;
  $i22 := $i23;
  goto $bb12;
$bb11:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1062, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i21 == 1bv1));
  goto $bb12;
$bb12:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i20 := $i22;
  goto $bb9;
$bb13:
  assume ($i33 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1072, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $add.bv32($i32, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1073, 3} true;
  assume {:verifier.code 0} true;
  $i35 := $i34;
  goto $bb15;
$bb14:
  assume !(($i33 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1073, 16} true;
  assume {:verifier.code 0} true;
  $i36 := $slt.bv32($i31, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1073, 14} true;
  assume {:verifier.code 0} true;
  $i37 := $i32;
  assume {:branchcond $i36} true;
  goto $bb16, $bb17;
$bb15:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1076, 5} true;
  assume {:verifier.code 0} true;
  $i39 := $add.bv32($i27, $i27);
  call {:cexpr "a"} boogie_si_record_bv32($i39);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1077, 7} true;
  assume {:verifier.code 0} true;
  $i40 := $sext.bv32.bv64($i39);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1077, 9} true;
  assume {:verifier.code 0} true;
  $i41 := $srem.bv64($i40, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1077, 7} true;
  assume {:verifier.code 0} true;
  $i42 := $trunc.bv64.bv32($i41);
  call {:cexpr "a"} boogie_si_record_bv32($i42);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1078, 5} true;
  assume {:verifier.code 0} true;
  $i43 := $add.bv32($i31, $i31);
  call {:cexpr "b"} boogie_si_record_bv32($i43);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1079, 7} true;
  assume {:verifier.code 0} true;
  $i44 := $sext.bv32.bv64($i43);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1079, 9} true;
  assume {:verifier.code 0} true;
  $i45 := $srem.bv64($i44, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1079, 7} true;
  assume {:verifier.code 0} true;
  $i46 := $trunc.bv64.bv32($i45);
  call {:cexpr "b"} boogie_si_record_bv32($i46);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1081, 5} true;
  assume {:verifier.code 0} true;
  $i47 := $add.bv32($i35, $i35);
  call {:cexpr "c"} boogie_si_record_bv32($i47);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1082, 9} true;
  assume {:verifier.code 0} true;
  $i48 := $slt.bv32($i42, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1082, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i48} true;
  goto $bb19, $bb20;
$bb16:
  assume ($i36 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1074, 7} true;
  assume {:verifier.code 0} true;
  $i38 := $add.bv32($i32, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i38);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1075, 3} true;
  assume {:verifier.code 0} true;
  $i37 := $i38;
  goto $bb18;
$bb17:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1073, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i36 == 1bv1));
  goto $bb18;
$bb18:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i35 := $i37;
  goto $bb15;
$bb19:
  assume ($i48 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1083, 7} true;
  assume {:verifier.code 0} true;
  $i49 := $add.bv32($i47, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i49);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1084, 3} true;
  assume {:verifier.code 0} true;
  $i50 := $i49;
  goto $bb21;
$bb20:
  assume !(($i48 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1084, 16} true;
  assume {:verifier.code 0} true;
  $i51 := $slt.bv32($i46, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1084, 14} true;
  assume {:verifier.code 0} true;
  $i52 := $i47;
  assume {:branchcond $i51} true;
  goto $bb22, $bb23;
$bb21:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1087, 5} true;
  assume {:verifier.code 0} true;
  $i54 := $add.bv32($i42, $i42);
  call {:cexpr "a"} boogie_si_record_bv32($i54);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1088, 7} true;
  assume {:verifier.code 0} true;
  $i55 := $sext.bv32.bv64($i54);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1088, 9} true;
  assume {:verifier.code 0} true;
  $i56 := $srem.bv64($i55, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1088, 7} true;
  assume {:verifier.code 0} true;
  $i57 := $trunc.bv64.bv32($i56);
  call {:cexpr "a"} boogie_si_record_bv32($i57);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1089, 5} true;
  assume {:verifier.code 0} true;
  $i58 := $add.bv32($i46, $i46);
  call {:cexpr "b"} boogie_si_record_bv32($i58);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1090, 7} true;
  assume {:verifier.code 0} true;
  $i59 := $sext.bv32.bv64($i58);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1090, 9} true;
  assume {:verifier.code 0} true;
  $i60 := $srem.bv64($i59, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1090, 7} true;
  assume {:verifier.code 0} true;
  $i61 := $trunc.bv64.bv32($i60);
  call {:cexpr "b"} boogie_si_record_bv32($i61);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1092, 5} true;
  assume {:verifier.code 0} true;
  $i62 := $add.bv32($i50, $i50);
  call {:cexpr "c"} boogie_si_record_bv32($i62);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1093, 9} true;
  assume {:verifier.code 0} true;
  $i63 := $slt.bv32($i57, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1093, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i63} true;
  goto $bb25, $bb26;
$bb22:
  assume ($i51 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1085, 7} true;
  assume {:verifier.code 0} true;
  $i53 := $add.bv32($i47, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i53);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1086, 3} true;
  assume {:verifier.code 0} true;
  $i52 := $i53;
  goto $bb24;
$bb23:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1084, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i51 == 1bv1));
  goto $bb24;
$bb24:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i50 := $i52;
  goto $bb21;
$bb25:
  assume ($i63 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1094, 7} true;
  assume {:verifier.code 0} true;
  $i64 := $add.bv32($i62, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1095, 3} true;
  assume {:verifier.code 0} true;
  $i65 := $i64;
  goto $bb27;
$bb26:
  assume !(($i63 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1095, 16} true;
  assume {:verifier.code 0} true;
  $i66 := $slt.bv32($i61, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1095, 14} true;
  assume {:verifier.code 0} true;
  $i67 := $i62;
  assume {:branchcond $i66} true;
  goto $bb28, $bb29;
$bb27:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1098, 5} true;
  assume {:verifier.code 0} true;
  $i69 := $add.bv32($i57, $i57);
  call {:cexpr "a"} boogie_si_record_bv32($i69);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1099, 7} true;
  assume {:verifier.code 0} true;
  $i70 := $sext.bv32.bv64($i69);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1099, 9} true;
  assume {:verifier.code 0} true;
  $i71 := $srem.bv64($i70, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1099, 7} true;
  assume {:verifier.code 0} true;
  $i72 := $trunc.bv64.bv32($i71);
  call {:cexpr "a"} boogie_si_record_bv32($i72);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1100, 5} true;
  assume {:verifier.code 0} true;
  $i73 := $add.bv32($i61, $i61);
  call {:cexpr "b"} boogie_si_record_bv32($i73);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1101, 7} true;
  assume {:verifier.code 0} true;
  $i74 := $sext.bv32.bv64($i73);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1101, 9} true;
  assume {:verifier.code 0} true;
  $i75 := $srem.bv64($i74, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1101, 7} true;
  assume {:verifier.code 0} true;
  $i76 := $trunc.bv64.bv32($i75);
  call {:cexpr "b"} boogie_si_record_bv32($i76);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1103, 5} true;
  assume {:verifier.code 0} true;
  $i77 := $add.bv32($i65, $i65);
  call {:cexpr "c"} boogie_si_record_bv32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1104, 9} true;
  assume {:verifier.code 0} true;
  $i78 := $slt.bv32($i72, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1104, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i78} true;
  goto $bb31, $bb32;
$bb28:
  assume ($i66 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1096, 7} true;
  assume {:verifier.code 0} true;
  $i68 := $add.bv32($i62, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i68);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1097, 3} true;
  assume {:verifier.code 0} true;
  $i67 := $i68;
  goto $bb30;
$bb29:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1095, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i66 == 1bv1));
  goto $bb30;
$bb30:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i65 := $i67;
  goto $bb27;
$bb31:
  assume ($i78 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1105, 7} true;
  assume {:verifier.code 0} true;
  $i79 := $add.bv32($i77, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i79);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1106, 3} true;
  assume {:verifier.code 0} true;
  $i80 := $i79;
  goto $bb33;
$bb32:
  assume !(($i78 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1106, 16} true;
  assume {:verifier.code 0} true;
  $i81 := $slt.bv32($i76, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1106, 14} true;
  assume {:verifier.code 0} true;
  $i82 := $i77;
  assume {:branchcond $i81} true;
  goto $bb34, $bb35;
$bb33:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1109, 5} true;
  assume {:verifier.code 0} true;
  $i84 := $add.bv32($i72, $i72);
  call {:cexpr "a"} boogie_si_record_bv32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1110, 7} true;
  assume {:verifier.code 0} true;
  $i85 := $sext.bv32.bv64($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1110, 9} true;
  assume {:verifier.code 0} true;
  $i86 := $srem.bv64($i85, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1110, 7} true;
  assume {:verifier.code 0} true;
  $i87 := $trunc.bv64.bv32($i86);
  call {:cexpr "a"} boogie_si_record_bv32($i87);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1111, 5} true;
  assume {:verifier.code 0} true;
  $i88 := $add.bv32($i76, $i76);
  call {:cexpr "b"} boogie_si_record_bv32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1112, 7} true;
  assume {:verifier.code 0} true;
  $i89 := $sext.bv32.bv64($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1112, 9} true;
  assume {:verifier.code 0} true;
  $i90 := $srem.bv64($i89, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1112, 7} true;
  assume {:verifier.code 0} true;
  $i91 := $trunc.bv64.bv32($i90);
  call {:cexpr "b"} boogie_si_record_bv32($i91);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1114, 5} true;
  assume {:verifier.code 0} true;
  $i92 := $add.bv32($i80, $i80);
  call {:cexpr "c"} boogie_si_record_bv32($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1115, 9} true;
  assume {:verifier.code 0} true;
  $i93 := $slt.bv32($i87, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1115, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i93} true;
  goto $bb37, $bb38;
$bb34:
  assume ($i81 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1107, 7} true;
  assume {:verifier.code 0} true;
  $i83 := $add.bv32($i77, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i83);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1108, 3} true;
  assume {:verifier.code 0} true;
  $i82 := $i83;
  goto $bb36;
$bb35:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1106, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i81 == 1bv1));
  goto $bb36;
$bb36:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i80 := $i82;
  goto $bb33;
$bb37:
  assume ($i93 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1116, 7} true;
  assume {:verifier.code 0} true;
  $i94 := $add.bv32($i92, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i94);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1117, 3} true;
  assume {:verifier.code 0} true;
  $i95 := $i94;
  goto $bb39;
$bb38:
  assume !(($i93 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1117, 16} true;
  assume {:verifier.code 0} true;
  $i96 := $slt.bv32($i91, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1117, 14} true;
  assume {:verifier.code 0} true;
  $i97 := $i92;
  assume {:branchcond $i96} true;
  goto $bb40, $bb41;
$bb39:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1120, 5} true;
  assume {:verifier.code 0} true;
  $i99 := $add.bv32($i87, $i87);
  call {:cexpr "a"} boogie_si_record_bv32($i99);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1121, 7} true;
  assume {:verifier.code 0} true;
  $i100 := $sext.bv32.bv64($i99);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1121, 9} true;
  assume {:verifier.code 0} true;
  $i101 := $srem.bv64($i100, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1121, 7} true;
  assume {:verifier.code 0} true;
  $i102 := $trunc.bv64.bv32($i101);
  call {:cexpr "a"} boogie_si_record_bv32($i102);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1122, 5} true;
  assume {:verifier.code 0} true;
  $i103 := $add.bv32($i91, $i91);
  call {:cexpr "b"} boogie_si_record_bv32($i103);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1123, 7} true;
  assume {:verifier.code 0} true;
  $i104 := $sext.bv32.bv64($i103);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1123, 9} true;
  assume {:verifier.code 0} true;
  $i105 := $srem.bv64($i104, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1123, 7} true;
  assume {:verifier.code 0} true;
  $i106 := $trunc.bv64.bv32($i105);
  call {:cexpr "b"} boogie_si_record_bv32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1125, 5} true;
  assume {:verifier.code 0} true;
  $i107 := $add.bv32($i95, $i95);
  call {:cexpr "c"} boogie_si_record_bv32($i107);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1126, 9} true;
  assume {:verifier.code 0} true;
  $i108 := $slt.bv32($i102, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1126, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i108} true;
  goto $bb43, $bb44;
$bb40:
  assume ($i96 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1118, 7} true;
  assume {:verifier.code 0} true;
  $i98 := $add.bv32($i92, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i98);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1119, 3} true;
  assume {:verifier.code 0} true;
  $i97 := $i98;
  goto $bb42;
$bb41:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1117, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i96 == 1bv1));
  goto $bb42;
$bb42:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i95 := $i97;
  goto $bb39;
$bb43:
  assume ($i108 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1127, 7} true;
  assume {:verifier.code 0} true;
  $i109 := $add.bv32($i107, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i109);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1128, 3} true;
  assume {:verifier.code 0} true;
  $i110 := $i109;
  goto $bb45;
$bb44:
  assume !(($i108 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1128, 16} true;
  assume {:verifier.code 0} true;
  $i111 := $slt.bv32($i106, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1128, 14} true;
  assume {:verifier.code 0} true;
  $i112 := $i107;
  assume {:branchcond $i111} true;
  goto $bb46, $bb47;
$bb45:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1131, 5} true;
  assume {:verifier.code 0} true;
  $i114 := $add.bv32($i102, $i102);
  call {:cexpr "a"} boogie_si_record_bv32($i114);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1132, 7} true;
  assume {:verifier.code 0} true;
  $i115 := $sext.bv32.bv64($i114);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1132, 9} true;
  assume {:verifier.code 0} true;
  $i116 := $srem.bv64($i115, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1132, 7} true;
  assume {:verifier.code 0} true;
  $i117 := $trunc.bv64.bv32($i116);
  call {:cexpr "a"} boogie_si_record_bv32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1133, 5} true;
  assume {:verifier.code 0} true;
  $i118 := $add.bv32($i106, $i106);
  call {:cexpr "b"} boogie_si_record_bv32($i118);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1134, 7} true;
  assume {:verifier.code 0} true;
  $i119 := $sext.bv32.bv64($i118);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1134, 9} true;
  assume {:verifier.code 0} true;
  $i120 := $srem.bv64($i119, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1134, 7} true;
  assume {:verifier.code 0} true;
  $i121 := $trunc.bv64.bv32($i120);
  call {:cexpr "b"} boogie_si_record_bv32($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1136, 5} true;
  assume {:verifier.code 0} true;
  $i122 := $add.bv32($i110, $i110);
  call {:cexpr "c"} boogie_si_record_bv32($i122);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1137, 9} true;
  assume {:verifier.code 0} true;
  $i123 := $slt.bv32($i117, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1137, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i123} true;
  goto $bb49, $bb50;
$bb46:
  assume ($i111 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1129, 7} true;
  assume {:verifier.code 0} true;
  $i113 := $add.bv32($i107, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1130, 3} true;
  assume {:verifier.code 0} true;
  $i112 := $i113;
  goto $bb48;
$bb47:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1128, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i111 == 1bv1));
  goto $bb48;
$bb48:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i110 := $i112;
  goto $bb45;
$bb49:
  assume ($i123 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1138, 7} true;
  assume {:verifier.code 0} true;
  $i124 := $add.bv32($i122, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1139, 3} true;
  assume {:verifier.code 0} true;
  $i125 := $i124;
  goto $bb51;
$bb50:
  assume !(($i123 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1139, 16} true;
  assume {:verifier.code 0} true;
  $i126 := $slt.bv32($i121, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1139, 14} true;
  assume {:verifier.code 0} true;
  $i127 := $i122;
  assume {:branchcond $i126} true;
  goto $bb52, $bb53;
$bb51:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1142, 5} true;
  assume {:verifier.code 0} true;
  $i129 := $add.bv32($i117, $i117);
  call {:cexpr "a"} boogie_si_record_bv32($i129);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1143, 7} true;
  assume {:verifier.code 0} true;
  $i130 := $sext.bv32.bv64($i129);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1143, 9} true;
  assume {:verifier.code 0} true;
  $i131 := $srem.bv64($i130, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1143, 7} true;
  assume {:verifier.code 0} true;
  $i132 := $trunc.bv64.bv32($i131);
  call {:cexpr "a"} boogie_si_record_bv32($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1144, 5} true;
  assume {:verifier.code 0} true;
  $i133 := $add.bv32($i121, $i121);
  call {:cexpr "b"} boogie_si_record_bv32($i133);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1145, 7} true;
  assume {:verifier.code 0} true;
  $i134 := $sext.bv32.bv64($i133);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1145, 9} true;
  assume {:verifier.code 0} true;
  $i135 := $srem.bv64($i134, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1145, 7} true;
  assume {:verifier.code 0} true;
  $i136 := $trunc.bv64.bv32($i135);
  call {:cexpr "b"} boogie_si_record_bv32($i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1147, 5} true;
  assume {:verifier.code 0} true;
  $i137 := $add.bv32($i125, $i125);
  call {:cexpr "c"} boogie_si_record_bv32($i137);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1148, 9} true;
  assume {:verifier.code 0} true;
  $i138 := $slt.bv32($i132, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1148, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i138} true;
  goto $bb55, $bb56;
$bb52:
  assume ($i126 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1140, 7} true;
  assume {:verifier.code 0} true;
  $i128 := $add.bv32($i122, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1141, 3} true;
  assume {:verifier.code 0} true;
  $i127 := $i128;
  goto $bb54;
$bb53:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1139, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i126 == 1bv1));
  goto $bb54;
$bb54:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i125 := $i127;
  goto $bb51;
$bb55:
  assume ($i138 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1149, 7} true;
  assume {:verifier.code 0} true;
  $i139 := $add.bv32($i137, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1150, 3} true;
  assume {:verifier.code 0} true;
  $i140 := $i139;
  goto $bb57;
$bb56:
  assume !(($i138 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1150, 16} true;
  assume {:verifier.code 0} true;
  $i141 := $slt.bv32($i136, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1150, 14} true;
  assume {:verifier.code 0} true;
  $i142 := $i137;
  assume {:branchcond $i141} true;
  goto $bb58, $bb59;
$bb57:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1153, 5} true;
  assume {:verifier.code 0} true;
  $i144 := $add.bv32($i132, $i132);
  call {:cexpr "a"} boogie_si_record_bv32($i144);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1154, 7} true;
  assume {:verifier.code 0} true;
  $i145 := $sext.bv32.bv64($i144);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1154, 9} true;
  assume {:verifier.code 0} true;
  $i146 := $srem.bv64($i145, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1154, 7} true;
  assume {:verifier.code 0} true;
  $i147 := $trunc.bv64.bv32($i146);
  call {:cexpr "a"} boogie_si_record_bv32($i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1155, 5} true;
  assume {:verifier.code 0} true;
  $i148 := $add.bv32($i136, $i136);
  call {:cexpr "b"} boogie_si_record_bv32($i148);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1156, 7} true;
  assume {:verifier.code 0} true;
  $i149 := $sext.bv32.bv64($i148);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1156, 9} true;
  assume {:verifier.code 0} true;
  $i150 := $srem.bv64($i149, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1156, 7} true;
  assume {:verifier.code 0} true;
  $i151 := $trunc.bv64.bv32($i150);
  call {:cexpr "b"} boogie_si_record_bv32($i151);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1158, 5} true;
  assume {:verifier.code 0} true;
  $i152 := $add.bv32($i140, $i140);
  call {:cexpr "c"} boogie_si_record_bv32($i152);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1159, 9} true;
  assume {:verifier.code 0} true;
  $i153 := $slt.bv32($i147, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1159, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i153} true;
  goto $bb61, $bb62;
$bb58:
  assume ($i141 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1151, 7} true;
  assume {:verifier.code 0} true;
  $i143 := $add.bv32($i137, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i143);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1152, 3} true;
  assume {:verifier.code 0} true;
  $i142 := $i143;
  goto $bb60;
$bb59:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1150, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i141 == 1bv1));
  goto $bb60;
$bb60:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i140 := $i142;
  goto $bb57;
$bb61:
  assume ($i153 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1160, 7} true;
  assume {:verifier.code 0} true;
  $i154 := $add.bv32($i152, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i154);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1161, 3} true;
  assume {:verifier.code 0} true;
  $i155 := $i154;
  goto $bb63;
$bb62:
  assume !(($i153 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1161, 16} true;
  assume {:verifier.code 0} true;
  $i156 := $slt.bv32($i151, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1161, 14} true;
  assume {:verifier.code 0} true;
  $i157 := $i152;
  assume {:branchcond $i156} true;
  goto $bb64, $bb65;
$bb63:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1164, 5} true;
  assume {:verifier.code 0} true;
  $i159 := $add.bv32($i147, $i147);
  call {:cexpr "a"} boogie_si_record_bv32($i159);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1165, 7} true;
  assume {:verifier.code 0} true;
  $i160 := $sext.bv32.bv64($i159);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1165, 9} true;
  assume {:verifier.code 0} true;
  $i161 := $srem.bv64($i160, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1165, 7} true;
  assume {:verifier.code 0} true;
  $i162 := $trunc.bv64.bv32($i161);
  call {:cexpr "a"} boogie_si_record_bv32($i162);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1166, 5} true;
  assume {:verifier.code 0} true;
  $i163 := $add.bv32($i151, $i151);
  call {:cexpr "b"} boogie_si_record_bv32($i163);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1167, 7} true;
  assume {:verifier.code 0} true;
  $i164 := $sext.bv32.bv64($i163);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1167, 9} true;
  assume {:verifier.code 0} true;
  $i165 := $srem.bv64($i164, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1167, 7} true;
  assume {:verifier.code 0} true;
  $i166 := $trunc.bv64.bv32($i165);
  call {:cexpr "b"} boogie_si_record_bv32($i166);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1169, 5} true;
  assume {:verifier.code 0} true;
  $i167 := $add.bv32($i155, $i155);
  call {:cexpr "c"} boogie_si_record_bv32($i167);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1170, 9} true;
  assume {:verifier.code 0} true;
  $i168 := $slt.bv32($i162, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1170, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i168} true;
  goto $bb67, $bb68;
$bb64:
  assume ($i156 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1162, 7} true;
  assume {:verifier.code 0} true;
  $i158 := $add.bv32($i152, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i158);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1163, 3} true;
  assume {:verifier.code 0} true;
  $i157 := $i158;
  goto $bb66;
$bb65:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1161, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i156 == 1bv1));
  goto $bb66;
$bb66:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i155 := $i157;
  goto $bb63;
$bb67:
  assume ($i168 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1171, 7} true;
  assume {:verifier.code 0} true;
  $i169 := $add.bv32($i167, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i169);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1172, 3} true;
  assume {:verifier.code 0} true;
  $i170 := $i169;
  goto $bb69;
$bb68:
  assume !(($i168 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1172, 16} true;
  assume {:verifier.code 0} true;
  $i171 := $slt.bv32($i166, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1172, 14} true;
  assume {:verifier.code 0} true;
  $i172 := $i167;
  assume {:branchcond $i171} true;
  goto $bb70, $bb71;
$bb69:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1175, 5} true;
  assume {:verifier.code 0} true;
  $i174 := $add.bv32($i162, $i162);
  call {:cexpr "a"} boogie_si_record_bv32($i174);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1176, 7} true;
  assume {:verifier.code 0} true;
  $i175 := $sext.bv32.bv64($i174);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1176, 9} true;
  assume {:verifier.code 0} true;
  $i176 := $srem.bv64($i175, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1176, 7} true;
  assume {:verifier.code 0} true;
  $i177 := $trunc.bv64.bv32($i176);
  call {:cexpr "a"} boogie_si_record_bv32($i177);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1177, 5} true;
  assume {:verifier.code 0} true;
  $i178 := $add.bv32($i166, $i166);
  call {:cexpr "b"} boogie_si_record_bv32($i178);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1178, 7} true;
  assume {:verifier.code 0} true;
  $i179 := $sext.bv32.bv64($i178);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1178, 9} true;
  assume {:verifier.code 0} true;
  $i180 := $srem.bv64($i179, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1178, 7} true;
  assume {:verifier.code 0} true;
  $i181 := $trunc.bv64.bv32($i180);
  call {:cexpr "b"} boogie_si_record_bv32($i181);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1180, 5} true;
  assume {:verifier.code 0} true;
  $i182 := $add.bv32($i170, $i170);
  call {:cexpr "c"} boogie_si_record_bv32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1181, 9} true;
  assume {:verifier.code 0} true;
  $i183 := $slt.bv32($i177, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1181, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i183} true;
  goto $bb73, $bb74;
$bb70:
  assume ($i171 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1173, 7} true;
  assume {:verifier.code 0} true;
  $i173 := $add.bv32($i167, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i173);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1174, 3} true;
  assume {:verifier.code 0} true;
  $i172 := $i173;
  goto $bb72;
$bb71:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1172, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i171 == 1bv1));
  goto $bb72;
$bb72:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i170 := $i172;
  goto $bb69;
$bb73:
  assume ($i183 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1182, 7} true;
  assume {:verifier.code 0} true;
  $i184 := $add.bv32($i182, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i184);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1183, 3} true;
  assume {:verifier.code 0} true;
  $i185 := $i184;
  goto $bb75;
$bb74:
  assume !(($i183 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1183, 16} true;
  assume {:verifier.code 0} true;
  $i186 := $slt.bv32($i181, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1183, 14} true;
  assume {:verifier.code 0} true;
  $i187 := $i182;
  assume {:branchcond $i186} true;
  goto $bb76, $bb77;
$bb75:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1186, 5} true;
  assume {:verifier.code 0} true;
  $i189 := $add.bv32($i177, $i177);
  call {:cexpr "a"} boogie_si_record_bv32($i189);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1187, 7} true;
  assume {:verifier.code 0} true;
  $i190 := $sext.bv32.bv64($i189);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1187, 9} true;
  assume {:verifier.code 0} true;
  $i191 := $srem.bv64($i190, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1187, 7} true;
  assume {:verifier.code 0} true;
  $i192 := $trunc.bv64.bv32($i191);
  call {:cexpr "a"} boogie_si_record_bv32($i192);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1188, 5} true;
  assume {:verifier.code 0} true;
  $i193 := $add.bv32($i181, $i181);
  call {:cexpr "b"} boogie_si_record_bv32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1189, 7} true;
  assume {:verifier.code 0} true;
  $i194 := $sext.bv32.bv64($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1189, 9} true;
  assume {:verifier.code 0} true;
  $i195 := $srem.bv64($i194, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1189, 7} true;
  assume {:verifier.code 0} true;
  $i196 := $trunc.bv64.bv32($i195);
  call {:cexpr "b"} boogie_si_record_bv32($i196);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1191, 5} true;
  assume {:verifier.code 0} true;
  $i197 := $add.bv32($i185, $i185);
  call {:cexpr "c"} boogie_si_record_bv32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1192, 9} true;
  assume {:verifier.code 0} true;
  $i198 := $slt.bv32($i192, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1192, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i198} true;
  goto $bb79, $bb80;
$bb76:
  assume ($i186 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1184, 7} true;
  assume {:verifier.code 0} true;
  $i188 := $add.bv32($i182, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i188);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1185, 3} true;
  assume {:verifier.code 0} true;
  $i187 := $i188;
  goto $bb78;
$bb77:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1183, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i186 == 1bv1));
  goto $bb78;
$bb78:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i185 := $i187;
  goto $bb75;
$bb79:
  assume ($i198 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1193, 7} true;
  assume {:verifier.code 0} true;
  $i199 := $add.bv32($i197, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i199);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1194, 3} true;
  assume {:verifier.code 0} true;
  $i200 := $i199;
  goto $bb81;
$bb80:
  assume !(($i198 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1194, 16} true;
  assume {:verifier.code 0} true;
  $i201 := $slt.bv32($i196, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1194, 14} true;
  assume {:verifier.code 0} true;
  $i202 := $i197;
  assume {:branchcond $i201} true;
  goto $bb82, $bb83;
$bb81:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1197, 5} true;
  assume {:verifier.code 0} true;
  $i204 := $add.bv32($i192, $i192);
  call {:cexpr "a"} boogie_si_record_bv32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1198, 7} true;
  assume {:verifier.code 0} true;
  $i205 := $sext.bv32.bv64($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1198, 9} true;
  assume {:verifier.code 0} true;
  $i206 := $srem.bv64($i205, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1198, 7} true;
  assume {:verifier.code 0} true;
  $i207 := $trunc.bv64.bv32($i206);
  call {:cexpr "a"} boogie_si_record_bv32($i207);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1199, 5} true;
  assume {:verifier.code 0} true;
  $i208 := $add.bv32($i196, $i196);
  call {:cexpr "b"} boogie_si_record_bv32($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1200, 7} true;
  assume {:verifier.code 0} true;
  $i209 := $sext.bv32.bv64($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1200, 9} true;
  assume {:verifier.code 0} true;
  $i210 := $srem.bv64($i209, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1200, 7} true;
  assume {:verifier.code 0} true;
  $i211 := $trunc.bv64.bv32($i210);
  call {:cexpr "b"} boogie_si_record_bv32($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1202, 5} true;
  assume {:verifier.code 0} true;
  $i212 := $add.bv32($i200, $i200);
  call {:cexpr "c"} boogie_si_record_bv32($i212);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1203, 9} true;
  assume {:verifier.code 0} true;
  $i213 := $slt.bv32($i207, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1203, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i213} true;
  goto $bb85, $bb86;
$bb82:
  assume ($i201 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1195, 7} true;
  assume {:verifier.code 0} true;
  $i203 := $add.bv32($i197, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i203);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1196, 3} true;
  assume {:verifier.code 0} true;
  $i202 := $i203;
  goto $bb84;
$bb83:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1194, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i201 == 1bv1));
  goto $bb84;
$bb84:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i200 := $i202;
  goto $bb81;
$bb85:
  assume ($i213 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1204, 7} true;
  assume {:verifier.code 0} true;
  $i214 := $add.bv32($i212, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i214);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1205, 3} true;
  assume {:verifier.code 0} true;
  $i215 := $i214;
  goto $bb87;
$bb86:
  assume !(($i213 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1205, 16} true;
  assume {:verifier.code 0} true;
  $i216 := $slt.bv32($i211, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1205, 14} true;
  assume {:verifier.code 0} true;
  $i217 := $i212;
  assume {:branchcond $i216} true;
  goto $bb88, $bb89;
$bb87:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1208, 5} true;
  assume {:verifier.code 0} true;
  $i219 := $add.bv32($i207, $i207);
  call {:cexpr "a"} boogie_si_record_bv32($i219);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1209, 7} true;
  assume {:verifier.code 0} true;
  $i220 := $sext.bv32.bv64($i219);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1209, 9} true;
  assume {:verifier.code 0} true;
  $i221 := $srem.bv64($i220, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1209, 7} true;
  assume {:verifier.code 0} true;
  $i222 := $trunc.bv64.bv32($i221);
  call {:cexpr "a"} boogie_si_record_bv32($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1210, 5} true;
  assume {:verifier.code 0} true;
  $i223 := $add.bv32($i211, $i211);
  call {:cexpr "b"} boogie_si_record_bv32($i223);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1211, 7} true;
  assume {:verifier.code 0} true;
  $i224 := $sext.bv32.bv64($i223);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1211, 9} true;
  assume {:verifier.code 0} true;
  $i225 := $srem.bv64($i224, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1211, 7} true;
  assume {:verifier.code 0} true;
  $i226 := $trunc.bv64.bv32($i225);
  call {:cexpr "b"} boogie_si_record_bv32($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1213, 5} true;
  assume {:verifier.code 0} true;
  $i227 := $add.bv32($i215, $i215);
  call {:cexpr "c"} boogie_si_record_bv32($i227);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1214, 9} true;
  assume {:verifier.code 0} true;
  $i228 := $slt.bv32($i222, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1214, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i228} true;
  goto $bb91, $bb92;
$bb88:
  assume ($i216 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1206, 7} true;
  assume {:verifier.code 0} true;
  $i218 := $add.bv32($i212, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i218);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1207, 3} true;
  assume {:verifier.code 0} true;
  $i217 := $i218;
  goto $bb90;
$bb89:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1205, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i216 == 1bv1));
  goto $bb90;
$bb90:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i215 := $i217;
  goto $bb87;
$bb91:
  assume ($i228 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1215, 7} true;
  assume {:verifier.code 0} true;
  $i229 := $add.bv32($i227, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1216, 3} true;
  assume {:verifier.code 0} true;
  $i230 := $i229;
  goto $bb93;
$bb92:
  assume !(($i228 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1216, 16} true;
  assume {:verifier.code 0} true;
  $i231 := $slt.bv32($i226, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1216, 14} true;
  assume {:verifier.code 0} true;
  $i232 := $i227;
  assume {:branchcond $i231} true;
  goto $bb94, $bb95;
$bb93:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1219, 5} true;
  assume {:verifier.code 0} true;
  $i234 := $add.bv32($i222, $i222);
  call {:cexpr "a"} boogie_si_record_bv32($i234);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1220, 7} true;
  assume {:verifier.code 0} true;
  $i235 := $sext.bv32.bv64($i234);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1220, 9} true;
  assume {:verifier.code 0} true;
  $i236 := $srem.bv64($i235, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1220, 7} true;
  assume {:verifier.code 0} true;
  $i237 := $trunc.bv64.bv32($i236);
  call {:cexpr "a"} boogie_si_record_bv32($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1221, 5} true;
  assume {:verifier.code 0} true;
  $i238 := $add.bv32($i226, $i226);
  call {:cexpr "b"} boogie_si_record_bv32($i238);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1222, 7} true;
  assume {:verifier.code 0} true;
  $i239 := $sext.bv32.bv64($i238);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1222, 9} true;
  assume {:verifier.code 0} true;
  $i240 := $srem.bv64($i239, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1222, 7} true;
  assume {:verifier.code 0} true;
  $i241 := $trunc.bv64.bv32($i240);
  call {:cexpr "b"} boogie_si_record_bv32($i241);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1224, 5} true;
  assume {:verifier.code 0} true;
  $i242 := $add.bv32($i230, $i230);
  call {:cexpr "c"} boogie_si_record_bv32($i242);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1225, 9} true;
  assume {:verifier.code 0} true;
  $i243 := $slt.bv32($i237, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1225, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i243} true;
  goto $bb97, $bb98;
$bb94:
  assume ($i231 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1217, 7} true;
  assume {:verifier.code 0} true;
  $i233 := $add.bv32($i227, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1218, 3} true;
  assume {:verifier.code 0} true;
  $i232 := $i233;
  goto $bb96;
$bb95:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1216, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i231 == 1bv1));
  goto $bb96;
$bb96:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i230 := $i232;
  goto $bb93;
$bb97:
  assume ($i243 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1226, 7} true;
  assume {:verifier.code 0} true;
  $i244 := $add.bv32($i242, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i244);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1227, 3} true;
  assume {:verifier.code 0} true;
  $i245 := $i244;
  goto $bb99;
$bb98:
  assume !(($i243 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1227, 16} true;
  assume {:verifier.code 0} true;
  $i246 := $slt.bv32($i241, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1227, 14} true;
  assume {:verifier.code 0} true;
  $i247 := $i242;
  assume {:branchcond $i246} true;
  goto $bb100, $bb101;
$bb99:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1230, 5} true;
  assume {:verifier.code 0} true;
  $i249 := $add.bv32($i237, $i237);
  call {:cexpr "a"} boogie_si_record_bv32($i249);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1231, 7} true;
  assume {:verifier.code 0} true;
  $i250 := $sext.bv32.bv64($i249);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1231, 9} true;
  assume {:verifier.code 0} true;
  $i251 := $srem.bv64($i250, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1231, 7} true;
  assume {:verifier.code 0} true;
  $i252 := $trunc.bv64.bv32($i251);
  call {:cexpr "a"} boogie_si_record_bv32($i252);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1232, 5} true;
  assume {:verifier.code 0} true;
  $i253 := $add.bv32($i241, $i241);
  call {:cexpr "b"} boogie_si_record_bv32($i253);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1233, 7} true;
  assume {:verifier.code 0} true;
  $i254 := $sext.bv32.bv64($i253);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1233, 9} true;
  assume {:verifier.code 0} true;
  $i255 := $srem.bv64($i254, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1233, 7} true;
  assume {:verifier.code 0} true;
  $i256 := $trunc.bv64.bv32($i255);
  call {:cexpr "b"} boogie_si_record_bv32($i256);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1235, 5} true;
  assume {:verifier.code 0} true;
  $i257 := $add.bv32($i245, $i245);
  call {:cexpr "c"} boogie_si_record_bv32($i257);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1236, 9} true;
  assume {:verifier.code 0} true;
  $i258 := $slt.bv32($i252, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1236, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i258} true;
  goto $bb103, $bb104;
$bb100:
  assume ($i246 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1228, 7} true;
  assume {:verifier.code 0} true;
  $i248 := $add.bv32($i242, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i248);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1229, 3} true;
  assume {:verifier.code 0} true;
  $i247 := $i248;
  goto $bb102;
$bb101:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1227, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i246 == 1bv1));
  goto $bb102;
$bb102:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i245 := $i247;
  goto $bb99;
$bb103:
  assume ($i258 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1237, 7} true;
  assume {:verifier.code 0} true;
  $i259 := $add.bv32($i257, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i259);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1238, 3} true;
  assume {:verifier.code 0} true;
  $i260 := $i259;
  goto $bb105;
$bb104:
  assume !(($i258 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1238, 16} true;
  assume {:verifier.code 0} true;
  $i261 := $slt.bv32($i256, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1238, 14} true;
  assume {:verifier.code 0} true;
  $i262 := $i257;
  assume {:branchcond $i261} true;
  goto $bb106, $bb107;
$bb105:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1241, 5} true;
  assume {:verifier.code 0} true;
  $i264 := $add.bv32($i252, $i252);
  call {:cexpr "a"} boogie_si_record_bv32($i264);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1242, 7} true;
  assume {:verifier.code 0} true;
  $i265 := $sext.bv32.bv64($i264);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1242, 9} true;
  assume {:verifier.code 0} true;
  $i266 := $srem.bv64($i265, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1242, 7} true;
  assume {:verifier.code 0} true;
  $i267 := $trunc.bv64.bv32($i266);
  call {:cexpr "a"} boogie_si_record_bv32($i267);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1243, 5} true;
  assume {:verifier.code 0} true;
  $i268 := $add.bv32($i256, $i256);
  call {:cexpr "b"} boogie_si_record_bv32($i268);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1244, 7} true;
  assume {:verifier.code 0} true;
  $i269 := $sext.bv32.bv64($i268);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1244, 9} true;
  assume {:verifier.code 0} true;
  $i270 := $srem.bv64($i269, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1244, 7} true;
  assume {:verifier.code 0} true;
  $i271 := $trunc.bv64.bv32($i270);
  call {:cexpr "b"} boogie_si_record_bv32($i271);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1246, 5} true;
  assume {:verifier.code 0} true;
  $i272 := $add.bv32($i260, $i260);
  call {:cexpr "c"} boogie_si_record_bv32($i272);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1247, 9} true;
  assume {:verifier.code 0} true;
  $i273 := $slt.bv32($i267, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1247, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i273} true;
  goto $bb109, $bb110;
$bb106:
  assume ($i261 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1239, 7} true;
  assume {:verifier.code 0} true;
  $i263 := $add.bv32($i257, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i263);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1240, 3} true;
  assume {:verifier.code 0} true;
  $i262 := $i263;
  goto $bb108;
$bb107:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1238, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i261 == 1bv1));
  goto $bb108;
$bb108:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i260 := $i262;
  goto $bb105;
$bb109:
  assume ($i273 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1248, 7} true;
  assume {:verifier.code 0} true;
  $i274 := $add.bv32($i272, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i274);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1249, 3} true;
  assume {:verifier.code 0} true;
  $i275 := $i274;
  goto $bb111;
$bb110:
  assume !(($i273 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1249, 16} true;
  assume {:verifier.code 0} true;
  $i276 := $slt.bv32($i271, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1249, 14} true;
  assume {:verifier.code 0} true;
  $i277 := $i272;
  assume {:branchcond $i276} true;
  goto $bb112, $bb113;
$bb111:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1252, 5} true;
  assume {:verifier.code 0} true;
  $i279 := $add.bv32($i267, $i267);
  call {:cexpr "a"} boogie_si_record_bv32($i279);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1253, 7} true;
  assume {:verifier.code 0} true;
  $i280 := $sext.bv32.bv64($i279);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1253, 9} true;
  assume {:verifier.code 0} true;
  $i281 := $srem.bv64($i280, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1253, 7} true;
  assume {:verifier.code 0} true;
  $i282 := $trunc.bv64.bv32($i281);
  call {:cexpr "a"} boogie_si_record_bv32($i282);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1254, 5} true;
  assume {:verifier.code 0} true;
  $i283 := $add.bv32($i271, $i271);
  call {:cexpr "b"} boogie_si_record_bv32($i283);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1255, 7} true;
  assume {:verifier.code 0} true;
  $i284 := $sext.bv32.bv64($i283);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1255, 9} true;
  assume {:verifier.code 0} true;
  $i285 := $srem.bv64($i284, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1255, 7} true;
  assume {:verifier.code 0} true;
  $i286 := $trunc.bv64.bv32($i285);
  call {:cexpr "b"} boogie_si_record_bv32($i286);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1257, 5} true;
  assume {:verifier.code 0} true;
  $i287 := $add.bv32($i275, $i275);
  call {:cexpr "c"} boogie_si_record_bv32($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1258, 9} true;
  assume {:verifier.code 0} true;
  $i288 := $slt.bv32($i282, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1258, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i288} true;
  goto $bb115, $bb116;
$bb112:
  assume ($i276 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1250, 7} true;
  assume {:verifier.code 0} true;
  $i278 := $add.bv32($i272, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i278);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1251, 3} true;
  assume {:verifier.code 0} true;
  $i277 := $i278;
  goto $bb114;
$bb113:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1249, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i276 == 1bv1));
  goto $bb114;
$bb114:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i275 := $i277;
  goto $bb111;
$bb115:
  assume ($i288 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1259, 7} true;
  assume {:verifier.code 0} true;
  $i289 := $add.bv32($i287, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i289);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1260, 3} true;
  assume {:verifier.code 0} true;
  $i290 := $i289;
  goto $bb117;
$bb116:
  assume !(($i288 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1260, 16} true;
  assume {:verifier.code 0} true;
  $i291 := $slt.bv32($i286, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1260, 14} true;
  assume {:verifier.code 0} true;
  $i292 := $i287;
  assume {:branchcond $i291} true;
  goto $bb118, $bb119;
$bb117:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1263, 5} true;
  assume {:verifier.code 0} true;
  $i294 := $add.bv32($i282, $i282);
  call {:cexpr "a"} boogie_si_record_bv32($i294);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1264, 7} true;
  assume {:verifier.code 0} true;
  $i295 := $sext.bv32.bv64($i294);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1264, 9} true;
  assume {:verifier.code 0} true;
  $i296 := $srem.bv64($i295, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1264, 7} true;
  assume {:verifier.code 0} true;
  $i297 := $trunc.bv64.bv32($i296);
  call {:cexpr "a"} boogie_si_record_bv32($i297);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1265, 5} true;
  assume {:verifier.code 0} true;
  $i298 := $add.bv32($i286, $i286);
  call {:cexpr "b"} boogie_si_record_bv32($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1266, 7} true;
  assume {:verifier.code 0} true;
  $i299 := $sext.bv32.bv64($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1266, 9} true;
  assume {:verifier.code 0} true;
  $i300 := $srem.bv64($i299, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1266, 7} true;
  assume {:verifier.code 0} true;
  $i301 := $trunc.bv64.bv32($i300);
  call {:cexpr "b"} boogie_si_record_bv32($i301);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1268, 5} true;
  assume {:verifier.code 0} true;
  $i302 := $add.bv32($i290, $i290);
  call {:cexpr "c"} boogie_si_record_bv32($i302);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1269, 9} true;
  assume {:verifier.code 0} true;
  $i303 := $slt.bv32($i297, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1269, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i303} true;
  goto $bb121, $bb122;
$bb118:
  assume ($i291 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1261, 7} true;
  assume {:verifier.code 0} true;
  $i293 := $add.bv32($i287, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i293);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1262, 3} true;
  assume {:verifier.code 0} true;
  $i292 := $i293;
  goto $bb120;
$bb119:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1260, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i291 == 1bv1));
  goto $bb120;
$bb120:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i290 := $i292;
  goto $bb117;
$bb121:
  assume ($i303 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1270, 7} true;
  assume {:verifier.code 0} true;
  $i304 := $add.bv32($i302, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i304);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1271, 3} true;
  assume {:verifier.code 0} true;
  $i305 := $i304;
  goto $bb123;
$bb122:
  assume !(($i303 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1271, 16} true;
  assume {:verifier.code 0} true;
  $i306 := $slt.bv32($i301, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1271, 14} true;
  assume {:verifier.code 0} true;
  $i307 := $i302;
  assume {:branchcond $i306} true;
  goto $bb124, $bb125;
$bb123:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1274, 5} true;
  assume {:verifier.code 0} true;
  $i309 := $add.bv32($i297, $i297);
  call {:cexpr "a"} boogie_si_record_bv32($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1275, 7} true;
  assume {:verifier.code 0} true;
  $i310 := $sext.bv32.bv64($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1275, 9} true;
  assume {:verifier.code 0} true;
  $i311 := $srem.bv64($i310, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1275, 7} true;
  assume {:verifier.code 0} true;
  $i312 := $trunc.bv64.bv32($i311);
  call {:cexpr "a"} boogie_si_record_bv32($i312);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1276, 5} true;
  assume {:verifier.code 0} true;
  $i313 := $add.bv32($i301, $i301);
  call {:cexpr "b"} boogie_si_record_bv32($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1277, 7} true;
  assume {:verifier.code 0} true;
  $i314 := $sext.bv32.bv64($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1277, 9} true;
  assume {:verifier.code 0} true;
  $i315 := $srem.bv64($i314, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1277, 7} true;
  assume {:verifier.code 0} true;
  $i316 := $trunc.bv64.bv32($i315);
  call {:cexpr "b"} boogie_si_record_bv32($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1279, 5} true;
  assume {:verifier.code 0} true;
  $i317 := $add.bv32($i305, $i305);
  call {:cexpr "c"} boogie_si_record_bv32($i317);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1280, 9} true;
  assume {:verifier.code 0} true;
  $i318 := $slt.bv32($i312, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1280, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i318} true;
  goto $bb127, $bb128;
$bb124:
  assume ($i306 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1272, 7} true;
  assume {:verifier.code 0} true;
  $i308 := $add.bv32($i302, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i308);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1273, 3} true;
  assume {:verifier.code 0} true;
  $i307 := $i308;
  goto $bb126;
$bb125:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1271, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i306 == 1bv1));
  goto $bb126;
$bb126:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i305 := $i307;
  goto $bb123;
$bb127:
  assume ($i318 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1281, 7} true;
  assume {:verifier.code 0} true;
  $i319 := $add.bv32($i317, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i319);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1282, 3} true;
  assume {:verifier.code 0} true;
  $i320 := $i319;
  goto $bb129;
$bb128:
  assume !(($i318 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1282, 16} true;
  assume {:verifier.code 0} true;
  $i321 := $slt.bv32($i316, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1282, 14} true;
  assume {:verifier.code 0} true;
  $i322 := $i317;
  assume {:branchcond $i321} true;
  goto $bb130, $bb131;
$bb129:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1285, 5} true;
  assume {:verifier.code 0} true;
  $i324 := $add.bv32($i312, $i312);
  call {:cexpr "a"} boogie_si_record_bv32($i324);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1286, 7} true;
  assume {:verifier.code 0} true;
  $i325 := $sext.bv32.bv64($i324);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1286, 9} true;
  assume {:verifier.code 0} true;
  $i326 := $srem.bv64($i325, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1286, 7} true;
  assume {:verifier.code 0} true;
  $i327 := $trunc.bv64.bv32($i326);
  call {:cexpr "a"} boogie_si_record_bv32($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1287, 5} true;
  assume {:verifier.code 0} true;
  $i328 := $add.bv32($i316, $i316);
  call {:cexpr "b"} boogie_si_record_bv32($i328);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1288, 7} true;
  assume {:verifier.code 0} true;
  $i329 := $sext.bv32.bv64($i328);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1288, 9} true;
  assume {:verifier.code 0} true;
  $i330 := $srem.bv64($i329, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1288, 7} true;
  assume {:verifier.code 0} true;
  $i331 := $trunc.bv64.bv32($i330);
  call {:cexpr "b"} boogie_si_record_bv32($i331);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1290, 5} true;
  assume {:verifier.code 0} true;
  $i332 := $add.bv32($i320, $i320);
  call {:cexpr "c"} boogie_si_record_bv32($i332);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1291, 9} true;
  assume {:verifier.code 0} true;
  $i333 := $slt.bv32($i327, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1291, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i333} true;
  goto $bb133, $bb134;
$bb130:
  assume ($i321 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1283, 7} true;
  assume {:verifier.code 0} true;
  $i323 := $add.bv32($i317, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i323);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1284, 3} true;
  assume {:verifier.code 0} true;
  $i322 := $i323;
  goto $bb132;
$bb131:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1282, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i321 == 1bv1));
  goto $bb132;
$bb132:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i320 := $i322;
  goto $bb129;
$bb133:
  assume ($i333 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1292, 7} true;
  assume {:verifier.code 0} true;
  $i334 := $add.bv32($i332, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i334);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1293, 3} true;
  assume {:verifier.code 0} true;
  $i335 := $i334;
  goto $bb135;
$bb134:
  assume !(($i333 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1293, 16} true;
  assume {:verifier.code 0} true;
  $i336 := $slt.bv32($i331, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1293, 14} true;
  assume {:verifier.code 0} true;
  $i337 := $i332;
  assume {:branchcond $i336} true;
  goto $bb136, $bb137;
$bb135:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1296, 5} true;
  assume {:verifier.code 0} true;
  $i339 := $add.bv32($i327, $i327);
  call {:cexpr "a"} boogie_si_record_bv32($i339);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1297, 7} true;
  assume {:verifier.code 0} true;
  $i340 := $sext.bv32.bv64($i339);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1297, 9} true;
  assume {:verifier.code 0} true;
  $i341 := $srem.bv64($i340, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1297, 7} true;
  assume {:verifier.code 0} true;
  $i342 := $trunc.bv64.bv32($i341);
  call {:cexpr "a"} boogie_si_record_bv32($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1298, 5} true;
  assume {:verifier.code 0} true;
  $i343 := $add.bv32($i331, $i331);
  call {:cexpr "b"} boogie_si_record_bv32($i343);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1299, 7} true;
  assume {:verifier.code 0} true;
  $i344 := $sext.bv32.bv64($i343);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1299, 9} true;
  assume {:verifier.code 0} true;
  $i345 := $srem.bv64($i344, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1299, 7} true;
  assume {:verifier.code 0} true;
  $i346 := $trunc.bv64.bv32($i345);
  call {:cexpr "b"} boogie_si_record_bv32($i346);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1301, 5} true;
  assume {:verifier.code 0} true;
  $i347 := $add.bv32($i335, $i335);
  call {:cexpr "c"} boogie_si_record_bv32($i347);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1302, 9} true;
  assume {:verifier.code 0} true;
  $i348 := $slt.bv32($i342, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1302, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i348} true;
  goto $bb139, $bb140;
$bb136:
  assume ($i336 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1294, 7} true;
  assume {:verifier.code 0} true;
  $i338 := $add.bv32($i332, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1295, 3} true;
  assume {:verifier.code 0} true;
  $i337 := $i338;
  goto $bb138;
$bb137:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1293, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i336 == 1bv1));
  goto $bb138;
$bb138:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i335 := $i337;
  goto $bb135;
$bb139:
  assume ($i348 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1303, 7} true;
  assume {:verifier.code 0} true;
  $i349 := $add.bv32($i347, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1304, 3} true;
  assume {:verifier.code 0} true;
  $i350 := $i349;
  goto $bb141;
$bb140:
  assume !(($i348 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1304, 16} true;
  assume {:verifier.code 0} true;
  $i351 := $slt.bv32($i346, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1304, 14} true;
  assume {:verifier.code 0} true;
  $i352 := $i347;
  assume {:branchcond $i351} true;
  goto $bb142, $bb143;
$bb141:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1307, 5} true;
  assume {:verifier.code 0} true;
  $i354 := $add.bv32($i342, $i342);
  call {:cexpr "a"} boogie_si_record_bv32($i354);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1308, 7} true;
  assume {:verifier.code 0} true;
  $i355 := $sext.bv32.bv64($i354);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1308, 9} true;
  assume {:verifier.code 0} true;
  $i356 := $srem.bv64($i355, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1308, 7} true;
  assume {:verifier.code 0} true;
  $i357 := $trunc.bv64.bv32($i356);
  call {:cexpr "a"} boogie_si_record_bv32($i357);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1309, 5} true;
  assume {:verifier.code 0} true;
  $i358 := $add.bv32($i346, $i346);
  call {:cexpr "b"} boogie_si_record_bv32($i358);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1310, 7} true;
  assume {:verifier.code 0} true;
  $i359 := $sext.bv32.bv64($i358);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1310, 9} true;
  assume {:verifier.code 0} true;
  $i360 := $srem.bv64($i359, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1310, 7} true;
  assume {:verifier.code 0} true;
  $i361 := $trunc.bv64.bv32($i360);
  call {:cexpr "b"} boogie_si_record_bv32($i361);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1312, 5} true;
  assume {:verifier.code 0} true;
  $i362 := $add.bv32($i350, $i350);
  call {:cexpr "c"} boogie_si_record_bv32($i362);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1313, 9} true;
  assume {:verifier.code 0} true;
  $i363 := $slt.bv32($i357, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1313, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i363} true;
  goto $bb145, $bb146;
$bb142:
  assume ($i351 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1305, 7} true;
  assume {:verifier.code 0} true;
  $i353 := $add.bv32($i347, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i353);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1306, 3} true;
  assume {:verifier.code 0} true;
  $i352 := $i353;
  goto $bb144;
$bb143:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1304, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i351 == 1bv1));
  goto $bb144;
$bb144:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i350 := $i352;
  goto $bb141;
$bb145:
  assume ($i363 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1314, 7} true;
  assume {:verifier.code 0} true;
  $i364 := $add.bv32($i362, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i364);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1315, 3} true;
  assume {:verifier.code 0} true;
  $i365 := $i364;
  goto $bb147;
$bb146:
  assume !(($i363 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1315, 16} true;
  assume {:verifier.code 0} true;
  $i366 := $slt.bv32($i361, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1315, 14} true;
  assume {:verifier.code 0} true;
  $i367 := $i362;
  assume {:branchcond $i366} true;
  goto $bb148, $bb149;
$bb147:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1318, 5} true;
  assume {:verifier.code 0} true;
  $i369 := $add.bv32($i357, $i357);
  call {:cexpr "a"} boogie_si_record_bv32($i369);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1319, 7} true;
  assume {:verifier.code 0} true;
  $i370 := $sext.bv32.bv64($i369);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1319, 9} true;
  assume {:verifier.code 0} true;
  $i371 := $srem.bv64($i370, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1319, 7} true;
  assume {:verifier.code 0} true;
  $i372 := $trunc.bv64.bv32($i371);
  call {:cexpr "a"} boogie_si_record_bv32($i372);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1320, 5} true;
  assume {:verifier.code 0} true;
  $i373 := $add.bv32($i361, $i361);
  call {:cexpr "b"} boogie_si_record_bv32($i373);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1321, 7} true;
  assume {:verifier.code 0} true;
  $i374 := $sext.bv32.bv64($i373);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1321, 9} true;
  assume {:verifier.code 0} true;
  $i375 := $srem.bv64($i374, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1321, 7} true;
  assume {:verifier.code 0} true;
  $i376 := $trunc.bv64.bv32($i375);
  call {:cexpr "b"} boogie_si_record_bv32($i376);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1323, 5} true;
  assume {:verifier.code 0} true;
  $i377 := $add.bv32($i365, $i365);
  call {:cexpr "c"} boogie_si_record_bv32($i377);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1324, 9} true;
  assume {:verifier.code 0} true;
  $i378 := $slt.bv32($i372, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1324, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i378} true;
  goto $bb151, $bb152;
$bb148:
  assume ($i366 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1316, 7} true;
  assume {:verifier.code 0} true;
  $i368 := $add.bv32($i362, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i368);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1317, 3} true;
  assume {:verifier.code 0} true;
  $i367 := $i368;
  goto $bb150;
$bb149:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1315, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i366 == 1bv1));
  goto $bb150;
$bb150:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i365 := $i367;
  goto $bb147;
$bb151:
  assume ($i378 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1325, 7} true;
  assume {:verifier.code 0} true;
  $i379 := $add.bv32($i377, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i379);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1326, 3} true;
  assume {:verifier.code 0} true;
  $i380 := $i379;
  goto $bb153;
$bb152:
  assume !(($i378 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1326, 16} true;
  assume {:verifier.code 0} true;
  $i381 := $slt.bv32($i376, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1326, 14} true;
  assume {:verifier.code 0} true;
  $i382 := $i377;
  assume {:branchcond $i381} true;
  goto $bb154, $bb155;
$bb153:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1329, 5} true;
  assume {:verifier.code 0} true;
  $i384 := $add.bv32($i372, $i372);
  call {:cexpr "a"} boogie_si_record_bv32($i384);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1330, 7} true;
  assume {:verifier.code 0} true;
  $i385 := $sext.bv32.bv64($i384);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1330, 9} true;
  assume {:verifier.code 0} true;
  $i386 := $srem.bv64($i385, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1330, 7} true;
  assume {:verifier.code 0} true;
  $i387 := $trunc.bv64.bv32($i386);
  call {:cexpr "a"} boogie_si_record_bv32($i387);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1331, 5} true;
  assume {:verifier.code 0} true;
  $i388 := $add.bv32($i376, $i376);
  call {:cexpr "b"} boogie_si_record_bv32($i388);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1332, 7} true;
  assume {:verifier.code 0} true;
  $i389 := $sext.bv32.bv64($i388);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1332, 9} true;
  assume {:verifier.code 0} true;
  $i390 := $srem.bv64($i389, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1332, 7} true;
  assume {:verifier.code 0} true;
  $i391 := $trunc.bv64.bv32($i390);
  call {:cexpr "b"} boogie_si_record_bv32($i391);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1334, 5} true;
  assume {:verifier.code 0} true;
  $i392 := $add.bv32($i380, $i380);
  call {:cexpr "c"} boogie_si_record_bv32($i392);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1335, 9} true;
  assume {:verifier.code 0} true;
  $i393 := $slt.bv32($i387, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1335, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i393} true;
  goto $bb157, $bb158;
$bb154:
  assume ($i381 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1327, 7} true;
  assume {:verifier.code 0} true;
  $i383 := $add.bv32($i377, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i383);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1328, 3} true;
  assume {:verifier.code 0} true;
  $i382 := $i383;
  goto $bb156;
$bb155:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1326, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i381 == 1bv1));
  goto $bb156;
$bb156:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i380 := $i382;
  goto $bb153;
$bb157:
  assume ($i393 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1336, 7} true;
  assume {:verifier.code 0} true;
  $i394 := $add.bv32($i392, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i394);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1337, 3} true;
  assume {:verifier.code 0} true;
  $i395 := $i394;
  goto $bb159;
$bb158:
  assume !(($i393 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1337, 16} true;
  assume {:verifier.code 0} true;
  $i396 := $slt.bv32($i391, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1337, 14} true;
  assume {:verifier.code 0} true;
  $i397 := $i392;
  assume {:branchcond $i396} true;
  goto $bb160, $bb161;
$bb159:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1340, 5} true;
  assume {:verifier.code 0} true;
  $i399 := $add.bv32($i387, $i387);
  call {:cexpr "a"} boogie_si_record_bv32($i399);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1341, 7} true;
  assume {:verifier.code 0} true;
  $i400 := $sext.bv32.bv64($i399);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1341, 9} true;
  assume {:verifier.code 0} true;
  $i401 := $srem.bv64($i400, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1341, 7} true;
  assume {:verifier.code 0} true;
  $i402 := $trunc.bv64.bv32($i401);
  call {:cexpr "a"} boogie_si_record_bv32($i402);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1342, 5} true;
  assume {:verifier.code 0} true;
  $i403 := $add.bv32($i391, $i391);
  call {:cexpr "b"} boogie_si_record_bv32($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1343, 7} true;
  assume {:verifier.code 0} true;
  $i404 := $sext.bv32.bv64($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1343, 9} true;
  assume {:verifier.code 0} true;
  $i405 := $srem.bv64($i404, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1343, 7} true;
  assume {:verifier.code 0} true;
  $i406 := $trunc.bv64.bv32($i405);
  call {:cexpr "b"} boogie_si_record_bv32($i406);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1345, 5} true;
  assume {:verifier.code 0} true;
  $i407 := $add.bv32($i395, $i395);
  call {:cexpr "c"} boogie_si_record_bv32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1346, 9} true;
  assume {:verifier.code 0} true;
  $i408 := $slt.bv32($i402, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1346, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i408} true;
  goto $bb163, $bb164;
$bb160:
  assume ($i396 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1338, 7} true;
  assume {:verifier.code 0} true;
  $i398 := $add.bv32($i392, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i398);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1339, 3} true;
  assume {:verifier.code 0} true;
  $i397 := $i398;
  goto $bb162;
$bb161:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1337, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i396 == 1bv1));
  goto $bb162;
$bb162:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i395 := $i397;
  goto $bb159;
$bb163:
  assume ($i408 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1347, 7} true;
  assume {:verifier.code 0} true;
  $i409 := $add.bv32($i407, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i409);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1348, 3} true;
  assume {:verifier.code 0} true;
  $i410 := $i409;
  goto $bb165;
$bb164:
  assume !(($i408 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1348, 16} true;
  assume {:verifier.code 0} true;
  $i411 := $slt.bv32($i406, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1348, 14} true;
  assume {:verifier.code 0} true;
  $i412 := $i407;
  assume {:branchcond $i411} true;
  goto $bb166, $bb167;
$bb165:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1351, 5} true;
  assume {:verifier.code 0} true;
  $i414 := $add.bv32($i402, $i402);
  call {:cexpr "a"} boogie_si_record_bv32($i414);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1352, 7} true;
  assume {:verifier.code 0} true;
  $i415 := $sext.bv32.bv64($i414);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1352, 9} true;
  assume {:verifier.code 0} true;
  $i416 := $srem.bv64($i415, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1352, 7} true;
  assume {:verifier.code 0} true;
  $i417 := $trunc.bv64.bv32($i416);
  call {:cexpr "a"} boogie_si_record_bv32($i417);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1353, 5} true;
  assume {:verifier.code 0} true;
  $i418 := $add.bv32($i406, $i406);
  call {:cexpr "b"} boogie_si_record_bv32($i418);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1354, 7} true;
  assume {:verifier.code 0} true;
  $i419 := $sext.bv32.bv64($i418);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1354, 9} true;
  assume {:verifier.code 0} true;
  $i420 := $srem.bv64($i419, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1354, 7} true;
  assume {:verifier.code 0} true;
  $i421 := $trunc.bv64.bv32($i420);
  call {:cexpr "b"} boogie_si_record_bv32($i421);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1356, 5} true;
  assume {:verifier.code 0} true;
  $i422 := $add.bv32($i410, $i410);
  call {:cexpr "c"} boogie_si_record_bv32($i422);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1357, 9} true;
  assume {:verifier.code 0} true;
  $i423 := $slt.bv32($i417, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1357, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i423} true;
  goto $bb169, $bb170;
$bb166:
  assume ($i411 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1349, 7} true;
  assume {:verifier.code 0} true;
  $i413 := $add.bv32($i407, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i413);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1350, 3} true;
  assume {:verifier.code 0} true;
  $i412 := $i413;
  goto $bb168;
$bb167:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1348, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i411 == 1bv1));
  goto $bb168;
$bb168:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i410 := $i412;
  goto $bb165;
$bb169:
  assume ($i423 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1358, 7} true;
  assume {:verifier.code 0} true;
  $i424 := $add.bv32($i422, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i424);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1359, 3} true;
  assume {:verifier.code 0} true;
  $i425 := $i424;
  goto $bb171;
$bb170:
  assume !(($i423 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1359, 16} true;
  assume {:verifier.code 0} true;
  $i426 := $slt.bv32($i421, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1359, 14} true;
  assume {:verifier.code 0} true;
  $i427 := $i422;
  assume {:branchcond $i426} true;
  goto $bb172, $bb173;
$bb171:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1362, 5} true;
  assume {:verifier.code 0} true;
  $i429 := $add.bv32($i417, $i417);
  call {:cexpr "a"} boogie_si_record_bv32($i429);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1363, 7} true;
  assume {:verifier.code 0} true;
  $i430 := $sext.bv32.bv64($i429);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1363, 9} true;
  assume {:verifier.code 0} true;
  $i431 := $srem.bv64($i430, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1363, 7} true;
  assume {:verifier.code 0} true;
  $i432 := $trunc.bv64.bv32($i431);
  call {:cexpr "a"} boogie_si_record_bv32($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1364, 5} true;
  assume {:verifier.code 0} true;
  $i433 := $add.bv32($i421, $i421);
  call {:cexpr "b"} boogie_si_record_bv32($i433);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1365, 7} true;
  assume {:verifier.code 0} true;
  $i434 := $sext.bv32.bv64($i433);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1365, 9} true;
  assume {:verifier.code 0} true;
  $i435 := $srem.bv64($i434, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1365, 7} true;
  assume {:verifier.code 0} true;
  $i436 := $trunc.bv64.bv32($i435);
  call {:cexpr "b"} boogie_si_record_bv32($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1367, 5} true;
  assume {:verifier.code 0} true;
  $i437 := $add.bv32($i425, $i425);
  call {:cexpr "c"} boogie_si_record_bv32($i437);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1368, 9} true;
  assume {:verifier.code 0} true;
  $i438 := $slt.bv32($i432, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1368, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i438} true;
  goto $bb175, $bb176;
$bb172:
  assume ($i426 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1360, 7} true;
  assume {:verifier.code 0} true;
  $i428 := $add.bv32($i422, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i428);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1361, 3} true;
  assume {:verifier.code 0} true;
  $i427 := $i428;
  goto $bb174;
$bb173:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1359, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i426 == 1bv1));
  goto $bb174;
$bb174:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i425 := $i427;
  goto $bb171;
$bb175:
  assume ($i438 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1369, 7} true;
  assume {:verifier.code 0} true;
  $i439 := $add.bv32($i437, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i439);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1370, 3} true;
  assume {:verifier.code 0} true;
  $i440 := $i439;
  goto $bb177;
$bb176:
  assume !(($i438 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1370, 16} true;
  assume {:verifier.code 0} true;
  $i441 := $slt.bv32($i436, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1370, 14} true;
  assume {:verifier.code 0} true;
  $i442 := $i437;
  assume {:branchcond $i441} true;
  goto $bb178, $bb179;
$bb177:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1373, 5} true;
  assume {:verifier.code 0} true;
  $i444 := $add.bv32($i432, $i432);
  call {:cexpr "a"} boogie_si_record_bv32($i444);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1374, 7} true;
  assume {:verifier.code 0} true;
  $i445 := $sext.bv32.bv64($i444);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1374, 9} true;
  assume {:verifier.code 0} true;
  $i446 := $srem.bv64($i445, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1374, 7} true;
  assume {:verifier.code 0} true;
  $i447 := $trunc.bv64.bv32($i446);
  call {:cexpr "a"} boogie_si_record_bv32($i447);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1375, 5} true;
  assume {:verifier.code 0} true;
  $i448 := $add.bv32($i436, $i436);
  call {:cexpr "b"} boogie_si_record_bv32($i448);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1376, 7} true;
  assume {:verifier.code 0} true;
  $i449 := $sext.bv32.bv64($i448);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1376, 9} true;
  assume {:verifier.code 0} true;
  $i450 := $srem.bv64($i449, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1376, 7} true;
  assume {:verifier.code 0} true;
  $i451 := $trunc.bv64.bv32($i450);
  call {:cexpr "b"} boogie_si_record_bv32($i451);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1378, 5} true;
  assume {:verifier.code 0} true;
  $i452 := $add.bv32($i440, $i440);
  call {:cexpr "c"} boogie_si_record_bv32($i452);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1379, 9} true;
  assume {:verifier.code 0} true;
  $i453 := $slt.bv32($i447, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1379, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i453} true;
  goto $bb181, $bb182;
$bb178:
  assume ($i441 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1371, 7} true;
  assume {:verifier.code 0} true;
  $i443 := $add.bv32($i437, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i443);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1372, 3} true;
  assume {:verifier.code 0} true;
  $i442 := $i443;
  goto $bb180;
$bb179:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1370, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i441 == 1bv1));
  goto $bb180;
$bb180:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i440 := $i442;
  goto $bb177;
$bb181:
  assume ($i453 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1380, 7} true;
  assume {:verifier.code 0} true;
  $i454 := $add.bv32($i452, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i454);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1381, 3} true;
  assume {:verifier.code 0} true;
  $i455 := $i454;
  goto $bb183;
$bb182:
  assume !(($i453 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1381, 16} true;
  assume {:verifier.code 0} true;
  $i456 := $slt.bv32($i451, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1381, 14} true;
  assume {:verifier.code 0} true;
  $i457 := $i452;
  assume {:branchcond $i456} true;
  goto $bb184, $bb185;
$bb183:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1384, 5} true;
  assume {:verifier.code 0} true;
  $i459 := $add.bv32($i447, $i447);
  call {:cexpr "a"} boogie_si_record_bv32($i459);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1385, 7} true;
  assume {:verifier.code 0} true;
  $i460 := $sext.bv32.bv64($i459);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1385, 9} true;
  assume {:verifier.code 0} true;
  $i461 := $srem.bv64($i460, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1385, 7} true;
  assume {:verifier.code 0} true;
  $i462 := $trunc.bv64.bv32($i461);
  call {:cexpr "a"} boogie_si_record_bv32($i462);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1386, 5} true;
  assume {:verifier.code 0} true;
  $i463 := $add.bv32($i451, $i451);
  call {:cexpr "b"} boogie_si_record_bv32($i463);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1387, 7} true;
  assume {:verifier.code 0} true;
  $i464 := $sext.bv32.bv64($i463);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1387, 9} true;
  assume {:verifier.code 0} true;
  $i465 := $srem.bv64($i464, 2147483648bv64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1387, 7} true;
  assume {:verifier.code 0} true;
  $i466 := $trunc.bv64.bv32($i465);
  call {:cexpr "b"} boogie_si_record_bv32($i466);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1389, 5} true;
  assume {:verifier.code 0} true;
  $i467 := $add.bv32($i455, $i455);
  call {:cexpr "c"} boogie_si_record_bv32($i467);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1390, 9} true;
  assume {:verifier.code 0} true;
  $i468 := $slt.bv32($i462, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1390, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i468} true;
  goto $bb187, $bb188;
$bb184:
  assume ($i456 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1382, 7} true;
  assume {:verifier.code 0} true;
  $i458 := $add.bv32($i452, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i458);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1383, 3} true;
  assume {:verifier.code 0} true;
  $i457 := $i458;
  goto $bb186;
$bb185:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1381, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i456 == 1bv1));
  goto $bb186;
$bb186:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i455 := $i457;
  goto $bb183;
$bb187:
  assume ($i468 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1391, 7} true;
  assume {:verifier.code 0} true;
  $i469 := $add.bv32($i467, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i469);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 3} true;
  assume {:verifier.code 0} true;
  $i470 := $i469;
  goto $bb189;
$bb188:
  assume !(($i468 == 1bv1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 16} true;
  assume {:verifier.code 0} true;
  $i471 := $slt.bv32($i466, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 14} true;
  assume {:verifier.code 0} true;
  $i472 := $i467;
  assume {:branchcond $i471} true;
  goto $bb190, $bb191;
$bb189:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1400, 3} true;
  assume {:verifier.code 0} true;
  $r := $i470;
  $exn := false;
  return;
$bb190:
  assume ($i471 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1393, 7} true;
  assume {:verifier.code 0} true;
  $i473 := $add.bv32($i467, 1bv32);
  call {:cexpr "c"} boogie_si_record_bv32($i473);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1394, 3} true;
  assume {:verifier.code 0} true;
  $i472 := $i473;
  goto $bb192;
$bb191:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i471 == 1bv1));
  goto $bb192;
$bb192:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i470 := $i472;
  goto $bb189;
}
const __SMACK_or64: ref;
axiom (__SMACK_or64 == $sub.ref(0, 14448));
procedure  __SMACK_or64($i0: bv64, $i1: bv64)
  returns ($r: bv64)
{
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv64;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 63} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_or64:arg:a"} boogie_si_record_bv64($i0);
  call {:cexpr "__SMACK_or64:arg:b"} boogie_si_record_bv64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 63} true;
  assume {:verifier.code 1} true;
  $i2 := $trunc.bv64.bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 66} true;
  assume {:verifier.code 1} true;
  $i3 := $trunc.bv64.bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 50} true;
  assume {:verifier.code 1} true;
  call $i4 := __SMACK_or32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_or32"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 44} true;
  assume {:verifier.code 0} true;
  $i5 := $sext.bv32.bv64($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 37} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_or16: ref;
axiom (__SMACK_or16 == $sub.ref(0, 15480));
procedure  __SMACK_or16($i0: bv16, $i1: bv16)
  returns ($r: bv16)
{
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv16;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 67} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_or16:arg:a"} boogie_si_record_bv16($i0);
  call {:cexpr "__SMACK_or16:arg:b"} boogie_si_record_bv16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 67} true;
  assume {:verifier.code 1} true;
  $i2 := $sext.bv16.bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 70} true;
  assume {:verifier.code 1} true;
  $i3 := $sext.bv16.bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 54} true;
  assume {:verifier.code 1} true;
  call $i4 := __SMACK_or32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_or32"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 47} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.bv32.bv16($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 40} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_or8: ref;
axiom (__SMACK_or8 == $sub.ref(0, 16512));
procedure  __SMACK_or8($i0: bv8, $i1: bv8)
  returns ($r: bv8)
{
  var $i2: bv32;
  var $i3: bv32;
  var $i4: bv32;
  var $i5: bv8;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 62} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_or8:arg:a"} boogie_si_record_bv8($i0);
  call {:cexpr "__SMACK_or8:arg:b"} boogie_si_record_bv8($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 62} true;
  assume {:verifier.code 1} true;
  $i2 := $sext.bv8.bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 65} true;
  assume {:verifier.code 1} true;
  $i3 := $sext.bv8.bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 49} true;
  assume {:verifier.code 1} true;
  call $i4 := __SMACK_or32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_or32"} boogie_si_record_bv32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 43} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.bv32.bv8($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 36} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0, 17544));
procedure  __SMACK_check_overflow($i0: bv32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1604, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1409, 3} true;
  assume {:verifier.code 1} true;
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1410, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __VERIFIER_nondet_unsigned_int: ref;
axiom (__VERIFIER_nondet_unsigned_int == $sub.ref(0, 18576));
procedure  __VERIFIER_nondet_unsigned_int()
  returns ($r: bv32)
{
  var $i0: bv32;
  var $i1: bv32;
  var $i2: bv32;
  var $i3: bv1;
  var $i5: bv1;
  var $i6: bv1;
  var $i4: bv1;
  var $i7: bv32;
  var $i8: bv1;
  var $i10: bv1;
  var $i9: bv1;
  var $i11: bv32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1482, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1482, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_bv32($i0);
  call {:cexpr "x"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1483, 22} true;
  assume {:verifier.code 1} true;
  call $i1 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_bv32($i1);
  call {:cexpr "min"} boogie_si_record_bv32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1484, 22} true;
  assume {:verifier.code 1} true;
  call $i2 := __SMACK_nondet_unsigned_int();
  call {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_bv32($i2);
  call {:cexpr "max"} boogie_si_record_bv32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1485, 25} true;
  assume {:verifier.code 0} true;
  $i3 := $eq.bv32($i1, 0bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1485, 30} true;
  assume {:verifier.code 0} true;
  $i4 := 0bv1;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1485, 37} true;
  assume {:verifier.code 0} true;
  $i5 := $uge.bv32($i2, 4294967295bv32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1485, 49} true;
  assume {:verifier.code 0} true;
  $i4 := 0bv1;
  assume {:branchcond $i5} true;
  goto $bb4, $bb5;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1485, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1bv1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1485, 49} true;
  assume {:verifier.code 1} true;
  $i7 := $zext.bv1.bv32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1485, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i7);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1486, 23} true;
  assume {:verifier.code 0} true;
  $i8 := $uge.bv32($i0, $i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1486, 30} true;
  assume {:verifier.code 0} true;
  $i9 := 0bv1;
  assume {:branchcond $i8} true;
  goto $bb6, $bb7;
$bb4:
  assume ($i5 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1485, 56} true;
  assume {:verifier.code 1} true;
  $i6 := $ule.bv32($i2, 4294967295bv32);
  assume {:verifier.code 0} true;
  $i4 := $i6;
  goto $bb3;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1485, 49} true;
  assume {:verifier.code 0} true;
  assume !(($i5 == 1bv1));
  goto $bb3;
$bb6:
  assume ($i8 == 1bv1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1486, 35} true;
  assume {:verifier.code 1} true;
  $i10 := $ule.bv32($i0, $i2);
  assume {:verifier.code 0} true;
  $i9 := $i10;
  goto $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1486, 30} true;
  assume {:verifier.code 0} true;
  assume !(($i8 == 1bv1));
  goto $bb8;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1486, 30} true;
  assume {:verifier.code 1} true;
  $i11 := $zext.bv1.bv32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1486, 3} true;
  assume {:verifier.code 1} true;
  call __VERIFIER_assume($i11);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1487, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_nondet_unsigned_int: ref;
axiom (__SMACK_nondet_unsigned_int == $sub.ref(0, 19608));
procedure  __SMACK_nondet_unsigned_int()
  returns ($r: bv32);
const __VERIFIER_nondet_uint: ref;
axiom (__VERIFIER_nondet_uint == $sub.ref(0, 20640));
procedure  __VERIFIER_nondet_uint()
  returns ($r: bv32)
{
  var $i0: bv32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1593, 20} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1593, 20} true;
  assume {:verifier.code 1} true;
  call $i0 := __VERIFIER_nondet_unsigned_int();
  call {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_bv32($i0);
  call {:cexpr "x"} boogie_si_record_bv32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1594, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $exn := false;
  return;
}
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 21672));
type $mop;
procedure  boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
procedure  corral_atomic_begin();
procedure  corral_atomic_end();
procedure  $alloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

procedure  $malloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  }
}

procedure  $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 22704));
procedure  __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 23736));
procedure  __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1883, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1883, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1888, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 24768));
procedure  llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 25800));
procedure  __SMACK_static_init()
{
$bb0:
  $exn := false;
  return;
}
procedure  boogie_si_record_bv16(x: bv16);
procedure  boogie_si_record_bv32(x: bv32);
procedure  boogie_si_record_bv64(x: bv64);
procedure  boogie_si_record_bv8(x: bv8);
procedure  boogie_si_record_bvdouble(x: bvdouble);
procedure  boogie_si_record_bvfloat(x: bvfloat);
procedure  boogie_si_record_ref(x: ref);
procedure  $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  $rmode := RNE;
  return;
}
